%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 10 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /Courier-BoldOblique FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 1) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Array T) 247.02 734.29 T
(ypes) 310.64 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(a sequence of values of the) 89.65 683.62 T
3 F
(same type) 265.45 683.62 T
2 F
(\245) 63.65 637.62 T
(a structure of components \050structured type\051) 89.65 637.62 T
(\245) 63.65 591.62 T
(Syntax) 89.65 591.62 T
4 16 Q
(<element type> <array name>) 99.65 564.29 T
5 F
([) 358.85 564.29 T
4 F
(<dimension>) 368.45 564.29 T
5 F
(]) 474.05 564.29 T
2 14 Q
(o) 90.65 529.62 T
(describes a collection of array elements, each of which may be) 117.65 529.62 T
(used to store data values of type) 117.65 513.62 T
6 F
(<element type>) 330.01 513.62 T
2 F
(o) 90.65 471.62 T
6 F
(dimension) 117.65 471.62 T
2 F
( speci\336es the number of element contained in the) 184.51 471.62 T
(array) 117.65 455.62 T
(-) 117.65 429.62 T
(must be a constant expression) 144.65 429.62 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 2) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Array T) 211.24 734.29 T
(ypes \050Cont\325d\051) 274.86 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example:) 89.65 683.62 T
4 16 Q
(int A[10];) 99.65 656.29 T
(int A[3][10];) 99.65 494.29 T
(enum Day {Mon,Tue,Wed,Thu,Fri,Sat,Sun};) 99.65 260.29 T
(char Week[Sun+1];) 99.65 242.29 T
99.65 582.95 459.65 618.95 R
2 Z
N
135.65 618.95 135.65 582.95 2 L
N
423.65 618.95 423.65 582.95 2 L
N
171.65 618.95 171.65 582.95 2 L
N
207.65 618.95 207.65 582.95 2 L
N
243.65 618.95 243.65 582.95 2 L
N
279.65 618.95 279.65 582.95 2 L
N
315.65 618.95 315.65 582.95 2 L
N
351.65 618.95 351.65 582.95 2 L
N
387.65 618.95 387.65 582.95 2 L
N
(0) 117.65 564.95 T
(1) 153.65 564.95 T
(2) 189.65 564.95 T
(3) 225.65 564.95 T
(4) 261.65 564.95 T
(5) 297.65 564.95 T
(6) 333.65 564.95 T
(7) 369.65 564.95 T
(8) 405.65 564.95 T
(9) 441.65 564.95 T
99.65 384.95 459.65 420.95 R
N
135.65 420.95 135.65 384.95 2 L
N
423.65 420.95 423.65 384.95 2 L
N
171.65 420.95 171.65 384.95 2 L
N
207.65 420.95 207.65 384.95 2 L
N
243.65 420.95 243.65 384.95 2 L
N
279.65 420.95 279.65 384.95 2 L
N
315.65 420.95 315.65 384.95 2 L
N
351.65 420.95 351.65 384.95 2 L
N
387.65 420.95 387.65 384.95 2 L
N
99.65 348.95 459.65 384.95 R
N
135.65 384.95 135.65 348.95 2 L
N
423.65 384.95 423.65 348.95 2 L
N
171.65 384.95 171.65 348.95 2 L
N
207.65 384.95 207.65 348.95 2 L
N
243.65 384.95 243.65 348.95 2 L
N
279.65 384.95 279.65 348.95 2 L
N
315.65 384.95 315.65 348.95 2 L
N
351.65 384.95 351.65 348.95 2 L
N
387.65 384.95 387.65 348.95 2 L
N
99.65 348.95 459.65 384.95 R
N
135.65 384.95 135.65 348.95 2 L
N
423.65 384.95 423.65 348.95 2 L
N
171.65 384.95 171.65 348.95 2 L
N
207.65 384.95 207.65 348.95 2 L
N
243.65 384.95 243.65 348.95 2 L
N
279.65 384.95 279.65 348.95 2 L
N
315.65 384.95 315.65 348.95 2 L
N
351.65 384.95 351.65 348.95 2 L
N
387.65 384.95 387.65 348.95 2 L
N
99.65 312.95 459.65 348.95 R
N
135.65 348.95 135.65 312.95 2 L
N
423.65 348.95 423.65 312.95 2 L
N
171.65 348.95 171.65 312.95 2 L
N
207.65 348.95 207.65 312.95 2 L
N
243.65 348.95 243.65 312.95 2 L
N
279.65 348.95 279.65 312.95 2 L
N
315.65 348.95 315.65 312.95 2 L
N
351.65 348.95 351.65 312.95 2 L
N
387.65 348.95 387.65 312.95 2 L
N
(0) 117.65 429.95 T
(1) 153.65 429.95 T
(2) 189.65 429.95 T
(3) 225.65 429.95 T
(5) 297.65 429.95 T
(6) 333.65 429.95 T
(4) 261.65 429.95 T
(7) 369.65 429.95 T
(8) 405.65 429.95 T
(9) 441.65 429.95 T
(0) 81.65 393.95 T
(1) 81.65 357.95 T
(2) 81.65 321.95 T
63.65 96.95 558.65 204.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 96.95 558.65 204.95 R
7 X
0 0 0 1 0 0 0 K
V
4 16 Q
0 X
(Mon Tue Wed Thu Fri Sat Sun) 99.65 177.95 T
99.65 132.95 351.65 168.95 R
0.5 H
2 Z
N
135.65 168.95 135.65 132.95 2 L
N
171.65 168.95 171.65 132.95 2 L
N
207.65 168.95 207.65 132.95 2 L
N
243.65 168.95 243.65 132.95 2 L
N
279.65 168.95 279.65 132.95 2 L
N
315.65 168.95 315.65 132.95 2 L
N
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 3) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Subscripting) 244.02 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(referring to a component of an array) 89.65 683.62 T
4 16 Q
(int A[10];) 99.65 656.29 T
(A[3]) 189.65 602.29 T
(char A[3][10];) 99.65 422.29 T
(A[1][2]) 99.65 350.29 T
63.65 168.95 531.65 312.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 168.95 531.65 312.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 276.95 459.65 312.95 R
0.5 H
2 Z
0 X
N
135.65 312.95 135.65 276.95 2 L
N
423.65 312.95 423.65 276.95 2 L
N
171.65 312.95 171.65 276.95 2 L
N
207.65 312.95 207.65 276.95 2 L
N
243.65 312.95 243.65 276.95 2 L
N
279.65 312.95 279.65 276.95 2 L
N
315.65 312.95 315.65 276.95 2 L
N
351.65 312.95 351.65 276.95 2 L
N
387.65 312.95 387.65 276.95 2 L
N
99.65 240.95 459.65 276.95 R
N
135.65 276.95 135.65 240.95 2 L
N
423.65 276.95 423.65 240.95 2 L
N
171.65 276.95 171.65 240.95 2 L
N
207.65 276.95 207.65 240.95 2 L
N
243.65 276.95 243.65 240.95 2 L
N
279.65 276.95 279.65 240.95 2 L
N
315.65 276.95 315.65 240.95 2 L
N
351.65 276.95 351.65 240.95 2 L
N
387.65 276.95 387.65 240.95 2 L
N
99.65 204.95 459.65 240.95 R
N
135.65 240.95 135.65 204.95 2 L
N
423.65 240.95 423.65 204.95 2 L
N
171.65 240.95 171.65 204.95 2 L
N
207.65 240.95 207.65 204.95 2 L
N
243.65 240.95 243.65 204.95 2 L
N
279.65 240.95 279.65 204.95 2 L
N
315.65 240.95 315.65 204.95 2 L
N
351.65 240.95 351.65 204.95 2 L
N
387.65 240.95 387.65 204.95 2 L
N
4 16 Q
( 0) 72.65 294.95 T
(1) 81.65 258.95 T
(2) 81.65 213.95 T
(0) 117.65 186.95 T
(3) 225.65 186.95 T
(4) 261.65 186.95 T
(5) 297.65 186.95 T
(6) 333.65 186.95 T
(7) 360.65 186.95 T
(8) 396.65 186.95 T
(9) 432.65 186.95 T
(2) 189.65 186.95 T
(1) 153.65 186.95 T
-8.35 24.95 603.65 816.95 C
63.65 492.95 531.65 564.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 492.95 531.65 564.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 528.95 459.65 564.95 R
0.5 H
2 Z
0 X
N
135.65 564.95 135.65 528.95 2 L
N
423.65 564.95 423.65 528.95 2 L
N
171.65 564.95 171.65 528.95 2 L
N
207.65 564.95 207.65 528.95 2 L
N
243.65 564.95 243.65 528.95 2 L
N
279.65 564.95 279.65 528.95 2 L
N
315.65 564.95 315.65 528.95 2 L
N
351.65 564.95 351.65 528.95 2 L
N
387.65 564.95 387.65 528.95 2 L
N
4 16 Q
(0) 117.65 510.95 T
(1) 153.65 510.95 T
(2) 189.65 510.95 T
(3) 225.65 510.95 T
(4) 261.65 510.95 T
(5) 297.65 510.95 T
(6) 333.65 510.95 T
(7) 369.65 510.95 T
(8) 405.65 510.95 T
(9) 441.65 510.95 T
-8.35 24.95 603.65 816.95 C
226.63 558.92 225.65 546.96 220.14 557.62 223.38 558.27 4 Y
0 X
0 0 0 1 0 0 0 K
V
216.65 591.95 223.39 558.26 2 L
0.5 H
2 Z
N
186.93 270.65 189.64 258.96 181.15 267.44 184.04 269.05 4 Y
V
144.65 339.95 184.05 269.04 2 L
N
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 4) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Initialization) 242.7 734.29 T
4 F
(int A[10] = {9,8,7,6,5,4,3,2,1,0}) 99.65 700.29 T
1 F
(Assignment) 249.06 520.29 T
4 F
(int A[10] = {9,8,7,6,5,4,3,2,1,0}) 99.65 486.29 T
(A[3] = -1;) 99.65 450.29 T
63.65 96.95 531.65 744.95 C
63.65 604.95 531.65 676.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 604.95 531.65 676.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 640.95 459.65 676.95 R
0.5 H
2 Z
0 X
N
135.65 676.95 135.65 640.95 2 L
N
423.65 676.95 423.65 640.95 2 L
N
171.65 676.95 171.65 640.95 2 L
N
207.65 676.95 207.65 640.95 2 L
N
243.65 676.95 243.65 640.95 2 L
N
279.65 676.95 279.65 640.95 2 L
N
315.65 676.95 315.65 640.95 2 L
N
351.65 676.95 351.65 640.95 2 L
N
387.65 676.95 387.65 640.95 2 L
N
4 16 Q
(0) 117.65 622.95 T
(1) 153.65 622.95 T
(2) 189.65 622.95 T
(3) 225.65 622.95 T
(4) 261.65 622.95 T
(5) 297.65 622.95 T
(6) 333.65 622.95 T
(7) 369.65 622.95 T
(8) 405.65 622.95 T
(9) 441.65 622.95 T
(9  8   7   6  5   4   3   2   1  0) 117.65 658.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
63.65 354.95 531.65 426.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 354.95 531.65 426.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 390.95 459.65 426.95 R
0.5 H
2 Z
0 X
N
135.65 426.95 135.65 390.95 2 L
N
423.65 426.95 423.65 390.95 2 L
N
171.65 426.95 171.65 390.95 2 L
N
207.65 426.95 207.65 390.95 2 L
N
243.65 426.95 243.65 390.95 2 L
N
279.65 426.95 279.65 390.95 2 L
N
315.65 426.95 315.65 390.95 2 L
N
351.65 426.95 351.65 390.95 2 L
N
387.65 426.95 387.65 390.95 2 L
N
4 16 Q
(0) 117.65 372.95 T
(1) 153.65 372.95 T
(2) 189.65 372.95 T
(3) 225.65 372.95 T
(4) 261.65 372.95 T
(5) 297.65 372.95 T
(6) 333.65 372.95 T
(7) 369.65 372.95 T
(8) 405.65 372.95 T
(9) 441.65 372.95 T
(9  8   7  -1  5   4   3   2   1  0) 117.65 408.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 5) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Array Data T) 181.33 734.29 T
(ypes - Example) 289.23 734.29 T
4 F
(// Counts lower case letters in a f) 63.65 700.29 T
(ile) 399.65 700.29 T
(#include <iostream.h>) 63.65 685.29 T
(#include <fstream.h>) 63.65 670.29 T
(#include <ctype.h>) 63.65 655.29 T
(// External f) 63.65 625.29 T
(ile names) 188.45 625.29 T
(#def) 63.65 610.29 T
(ine in_f) 102.05 610.29 T
(ile "test") 178.85 610.29 T
(main\050\051 {) 63.65 580.29 T
(     int count[26]; // holds letter count) 63.65 565.29 T
(     ifstream ins;  // ins is input stream) 63.65 550.29 T
(     char next;           // next character) 63.65 520.29 T
(     // open input f) 63.65 490.29 T
(ile, exit on error) 255.65 490.29 T
(     ins.open \050in_f) 63.65 475.29 T
(ile\051;) 246.05 475.29 T
(     if \050ins.fail \050\051\051) 63.65 460.29 T
(          cerr << "***ERROR: Cannot open ") 63.65 445.29 T
(               << in_f) 63.65 430.29 T
(ile << endl;) 274.85 430.29 T
(     // initialize count) 63.65 400.29 T
(     for \050int i=0; i<=25; i++\051) 63.65 385.29 T
(          count[i] = 0;) 63.65 370.29 T
(     ins.get\050next\051;  // get f) 63.65 340.29 T
(irst character) 342.05 340.29 T
(     while \050!ins.eof\050\051\051 {) 63.65 310.29 T
(          if \050islower\050next\051\051 // lower case?) 63.65 295.29 T
(               count[int\050next\051-int\050'a'\051]++;) 63.65 280.29 T
(          ins.get\050next\051;  // get next character) 63.65 265.29 T
(     }) 63.65 250.29 T
(     // print table of letter count) 63.65 220.29 T
(     for \050char c='a'; c<='z'; c++\051) 63.65 205.29 T
(          cout << c << "   ") 63.65 190.29 T
-0.13 (               << count[int\050c\051-int\050'a'\051] << endl;) 63.65 175.29 P
(     ins.close\050\051;   // close input f) 63.65 145.29 T
(ile stream) 409.25 145.29 T
(     return 0;) 63.65 130.29 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 6) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Arrays as Arguments) 210.24 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(pass individual elements of an array to a function) 89.65 683.62 T
(o) 90.65 657.62 T
(Example:) 117.65 657.62 T
4 16 Q
(void order\050) 117.65 630.29 T
7 F
(int& x, int& y) 223.25 630.29 T
4 F
(\051 {) 357.65 630.29 T
(int temp;) 135.65 612.29 T
(if \050x > y\051 {) 135.65 576.29 T
(temp = x; x = y; y = temp;) 153.65 558.29 T
(}) 135.65 540.29 T
(return;) 135.65 522.29 T
(} // end order) 117.65 504.29 T
(main\050\051 {) 117.65 468.29 T
(int A[10] = {9,8,7,6,5,4,3,2,1,0};) 135.65 450.29 T
(order\050) 135.65 414.29 T
7 F
(A[3], A[5]) 193.25 414.29 T
4 F
(\051;) 289.25 414.29 T
(return 0;) 135.65 396.29 T
(}) 117.65 378.29 T
8 F
(Before:) 99.65 342.29 T
(After:) 99.65 216.29 T
63.65 96.95 531.65 744.95 C
63.65 246.95 531.65 318.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 246.95 531.65 318.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 282.95 459.65 318.95 R
0.5 H
2 Z
0 X
N
135.65 318.95 135.65 282.95 2 L
N
423.65 318.95 423.65 282.95 2 L
N
171.65 318.95 171.65 282.95 2 L
N
207.65 318.95 207.65 282.95 2 L
N
243.65 318.95 243.65 282.95 2 L
N
279.65 318.95 279.65 282.95 2 L
N
315.65 318.95 315.65 282.95 2 L
N
351.65 318.95 351.65 282.95 2 L
N
387.65 318.95 387.65 282.95 2 L
N
4 16 Q
(0) 117.65 264.95 T
(1) 153.65 264.95 T
(2) 189.65 264.95 T
(3) 225.65 264.95 T
(4) 261.65 264.95 T
(5) 297.65 264.95 T
(6) 333.65 264.95 T
(7) 369.65 264.95 T
(8) 405.65 264.95 T
(9) 441.65 264.95 T
(9  8   7   6  5   4   3   2   1  0) 117.65 300.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
63.65 120.95 531.65 192.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 120.95 531.65 192.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 156.95 459.65 192.95 R
0.5 H
2 Z
0 X
N
135.65 192.95 135.65 156.95 2 L
N
423.65 192.95 423.65 156.95 2 L
N
171.65 192.95 171.65 156.95 2 L
N
207.65 192.95 207.65 156.95 2 L
N
243.65 192.95 243.65 156.95 2 L
N
279.65 192.95 279.65 156.95 2 L
N
315.65 192.95 315.65 156.95 2 L
N
351.65 192.95 351.65 156.95 2 L
N
387.65 192.95 387.65 156.95 2 L
N
4 16 Q
(0) 117.65 138.95 T
(1) 153.65 138.95 T
(2) 189.65 138.95 T
(3) 225.65 138.95 T
(4) 261.65 138.95 T
(5) 297.65 138.95 T
(6) 333.65 138.95 T
(7) 369.65 138.95 T
(8) 405.65 138.95 T
(9) 441.65 138.95 T
(9  8   7) 117.65 174.95 T
7 F
(4) 223.25 174.95 T
4 F
(  5) 232.85 174.95 T
7 F
(6) 290.45 174.95 T
4 F
(   3   2   1  0) 300.05 174.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 7) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Arrays as Arguments \050Cont\325d\051) 174.46 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(pass an) 89.65 683.62 T
1 F
(entire) 142.55 683.62 T
2 F
( array to a function) 186.63 683.62 T
(o) 90.65 657.62 T
(never by value) 117.65 657.62 T
(o) 90.65 631.62 T
(simulated pass by reference \050address of \336rst element\051) 117.65 631.62 T
(o) 90.65 605.62 T
(Example) 117.65 605.62 T
4 16 Q
(// Find the largest value in an array) 117.65 578.29 T
(// input:   n - number of elements to check) 117.65 560.29 T
(//        a[] - array of elements) 117.65 542.29 T
(// output:index to the largest element) 117.65 524.29 T
(int) 117.65 506.29 T
5 F
(max_element) 156.05 506.29 T
4 F
(\050int n,) 261.65 506.29 T
7 F
(const int a[]) 338.45 506.29 T
4 F
(\051 {) 463.25 506.29 T
(int max_index = 0;) 135.65 488.29 T
(for \050int i=1; i<n; i++\051) 135.65 452.29 T
(if \050a[i] > a[max_index]\051) 153.65 434.29 T
(max_index = i;) 171.65 416.29 T
(return max_index;) 135.65 380.29 T
(} // end max_element;) 117.65 362.29 T
(#include <iostream.h>) 117.65 326.29 T
(main\050\051 {) 117.65 308.29 T
(int A[10] = {9,8,7,6,5,4,10,2,1,0};) 135.65 290.29 T
(cout << A[) 135.65 254.29 T
5 F
(max_element) 231.65 254.29 T
4 F
(\05010,) 337.25 254.29 T
7 F
(A) 375.65 254.29 T
4 F
(\051] << endl;) 385.25 254.29 T
(return 0;) 135.65 236.29 T
(}) 117.65 218.29 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 8) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Searching) 255.42 734.29 T
1 14 Q
(Problem De\336nition:) 63.65 701.62 T
2 F
-0.11 (Search an) 63.65 669.62 P
6 F
-0.11 ( unordered) 128.36 669.62 P
2 F
-0.11 ( array of integers for a value and return its index if) 198.22 669.62 P
(the value is found.  Otherwise, return -1.) 63.65 653.62 T
1 F
(Solution Outline:) 63.65 312.62 T
4 16 Q
(Start with the f) 63.65 279.29 T
(irst array element \050index 0\051.) 217.25 279.29 T
(While) 63.65 243.29 T
8 F
(value) 121.25 243.29 T
4 F
( not found and more array element do) 169.25 243.29 T
(Try next element \050increment index\051;) 81.65 225.29 T
(If) 63.65 189.29 T
8 F
(value) 92.45 189.29 T
4 F
(not found then) 150.05 189.29 T
(return position to -1) 81.65 171.29 T
(else) 63.65 153.29 T
(return index;) 81.65 135.29 T
63.65 96.95 531.65 744.95 C
63.65 339.95 531.65 614.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
133.4 490.95 421.4 526.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
169.4 526.95 169.4 490.95 2 L
N
205.4 526.95 205.4 490.95 2 L
N
241.4 526.95 241.4 490.95 2 L
N
277.4 526.95 277.4 490.95 2 L
N
313.4 526.95 313.4 490.95 2 L
N
349.4 526.95 349.4 490.95 2 L
N
385.4 526.95 385.4 490.95 2 L
N
4 16 Q
(10  7   9   1  17  30  7   6) 142.4 508.95 T
(0   1  2   3   4  5   6   7) 151.4 535.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 9) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Searching \050Cont\325d\051) 219.64 734.29 T
4 F
(// Searches an) 63.65 700.29 T
7 F
(unordered) 207.65 700.29 T
4 F
( array of integers) 294.05 700.29 T
(int search\050int data[], // input: array) 63.65 682.29 T
(           int size,   // input: array size) 63.65 664.29 T
(           int value   // input: value to f) 63.65 646.29 T
(ind) 476.45 646.29 T
(           \051   // output: index if found) 63.65 628.29 T
(               //         otherwise return -1) 63.65 610.29 T
({) 63.65 592.29 T
(     int index = 0;    // initialize index to 0) 63.65 574.29 T
(     while \050\050data[index] != value\051 &&) 63.65 538.29 T
(            \050index < size\051\051) 63.65 520.29 T
(          index++;) 63.65 502.29 T
(     if \050data[index] != value\051) 63.65 466.29 T
(          return -1;) 63.65 448.29 T
(     else) 63.65 430.29 T
(          return index;) 63.65 412.29 T
(} // search) 63.65 394.29 T
(#include <iostream.h>) 63.65 304.29 T
(int main\050\051 {) 63.65 286.29 T
(     int A[10] = { 5,2,4,6,9,2,25,5,18,3 };) 63.65 268.29 T
(     int x;) 63.65 250.29 T
(     cin >> x;) 63.65 214.29 T
(     cout << search\050A,10,x\051 << endl;) 63.65 196.29 T
(     return 0;) 63.65 160.29 T
(}) 63.65 142.29 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 10) 546.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Example) 261.35 734.29 T
4 F
(// Add a[i] and b[i] and store the sum in c[i]) 63.65 682.29 T
(void  add_array) 63.65 646.29 T
(\050int size,) 153.65 628.29 T
(// in: array size) 315.65 628.29 T
( const f) 153.65 610.29 T
(loat a[],) 230.45 610.29 T
(// in: f) 316.85 610.29 T
(irst array) 393.65 610.29 T
( const f) 153.65 592.29 T
(loat b[],) 230.45 592.29 T
(// in: second array) 316.85 592.29 T
( f) 153.65 574.29 T
(loat c[] \051) 172.85 574.29 T
(// out: result array) 315.65 574.29 T
(// array elements with subscripts ranging from) 63.65 538.29 T
(// 0 to size-1 are added element by element) 63.65 520.29 T
(// Pre: a[i] and b[i] \0500<=i<=size-1\051 are def) 63.65 502.29 T
(ined) 486.05 502.29 T
(// Post: c[i] = a[i] + b[i] \0500<=i<=size-1\051) 63.65 484.29 T
({) 63.65 448.29 T
(int i;) 99.65 430.29 T
(// Add a[i] and b[i] and store result in c[i]) 99.65 394.29 T
(for \050i=0; i < size; i++\051) 99.65 376.29 T
(c[i] = a[i] + b[i];) 117.65 358.29 T
(return;) 99.65 322.29 T
(}) 63.65 286.29 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 11) 546.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Storage of Multidimensional Arrays) 148.84 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example:) 89.65 683.62 T
4 16 Q
(char a[3][3];) 99.65 656.29 T
2 14 Q
(\245) 63.65 525.62 T
2.66 (most compiler store multidimensional arrays in adjacent memory) 89.65 525.62 P
(cells) 90.65 509.62 T
(o) 90.65 483.62 T
3 F
(row-major) 117.65 483.62 T
2 F
( order) 192.31 483.62 T
4 16 Q
(   0    1    2    3    4    5    6    7   8) 63.65 418.29 T
(offset = ix3 + j) 99.65 382.29 T
2 14 Q
(o) 90.65 311.62 T
(column-major order) 117.65 311.62 T
4 16 Q
(   0    1    2    3    4    5    6    7   8) 63.65 246.29 T
(offset?) 99.65 210.29 T
2 14 Q
([0][0]) 208.54 623.62 T
([0][1]) 280.54 623.62 T
([0][2]) 352.54 623.62 T
([1][0]) 208.54 599.62 T
([1][1]) 280.54 599.62 T
([1][2]) 352.54 599.62 T
([2][0]) 208.54 575.62 T
([2][1]) 280.54 575.62 T
([2][2]) 352.54 575.62 T
([0][0]) 88.54 451.62 T
([0][1]) 136.54 451.62 T
([0][2]) 184.54 451.62 T
([1][0]) 232.54 451.62 T
([1][1]) 280.54 451.62 T
([1][2]) 328.54 451.62 T
([2][0]) 376.54 451.62 T
([2][1]) 424.54 451.62 T
([2][2]) 472.54 451.62 T
([0][0]) 88.54 279.62 T
([1][0]) 136.54 279.62 T
([2][0]) 184.54 279.62 T
([0][1]) 232.54 279.62 T
([1][1]) 280.54 279.62 T
([2][1]) 328.54 279.62 T
([0][2]) 376.54 279.62 T
([1][2]) 424.54 279.62 T
([2][2]) 472.54 279.62 T
189.65 638.7 189.65 567.2 2 L
V
N
261.65 639.2 261.65 566.7 2 L
V
N
333.65 639.2 333.65 566.7 2 L
V
N
405.65 638.7 405.65 567.2 2 L
V
N
189.4 638.95 405.9 638.95 2 L
V
N
189.4 614.95 405.9 614.95 2 L
V
N
189.4 590.95 405.9 590.95 2 L
V
N
189.4 566.95 405.9 566.95 2 L
V
N
129.65 467.95 129.65 442.7 2 L
V
N
177.65 467.95 177.65 442.7 2 L
V
N
225.65 467.95 225.65 442.7 2 L
V
N
273.65 467.95 273.65 442.7 2 L
V
N
321.65 467.95 321.65 442.7 2 L
V
N
369.65 467.95 369.65 442.7 2 L
V
N
417.65 467.95 417.65 442.7 2 L
V
N
465.65 467.95 465.65 442.7 2 L
V
N
81.65 466.95 513.65 466.95 2 L
V
2 H
N
81.65 442.95 513.65 442.95 2 L
V
0.5 H
N
129.65 295.95 129.65 270.7 2 L
V
N
177.65 295.95 177.65 270.7 2 L
V
N
225.65 295.95 225.65 270.7 2 L
V
N
273.65 295.95 273.65 270.7 2 L
V
N
321.65 295.95 321.65 270.7 2 L
V
N
369.65 295.95 369.65 270.7 2 L
V
N
417.65 295.95 417.65 270.7 2 L
V
N
465.65 295.95 465.65 270.7 2 L
V
N
81.65 294.95 513.65 294.95 2 L
V
2 H
N
81.65 270.95 513.65 270.95 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 12) 546.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Initializing & Passing Multidimensional Array) 104.94 734.29 T
4 F
(// Initializing multidimensional arrays) 63.65 700.29 T
(#include <iostream.h>) 63.65 682.29 T
(void printArray\050) 63.65 592.29 T
7 F
(int [][3]) 217.25 592.29 T
4 F
(\051;) 303.65 592.29 T
(main\050\051 {) 63.65 556.29 T
7 F
(     int a1[2][3] = { {1,2,3}, {4,5,6} },) 63.65 538.29 T
(         a2[2][3] = { 1,2,3,4,5,6 },) 63.65 520.29 T
(         a3[2][3] = { 1,2,3,4 },) 63.65 502.29 T
(         a4[2][3] = { {1,2}, {4} };) 63.65 484.29 T
4 F
(     cout << endl; printArray\050a1\051;) 63.65 448.29 T
(     cout << endl; printArray\050a2\051;) 63.65 430.29 T
(     cout << endl; printArray\050a3\051;) 63.65 412.29 T
(     cout << endl; printArray\050a4\051;) 63.65 394.29 T
(     return 0;) 63.65 358.29 T
(}) 63.65 340.29 T
(void printArray\050int a[][3]\051 {) 63.65 304.29 T
(     for \050int i=0; i<=1; i++\051 {) 63.65 286.29 T
(          for \050int j=0; j<=2; j++\051) 63.65 268.29 T
(               cout << a[i][j] << ' ';) 63.65 250.29 T
(          cout << endl;) 63.65 232.29 T
(     }) 63.65 214.29 T
(}) 63.65 196.29 T
7 F
(size) 180.65 641.06 T
8 F
(of subsequent subscript) 228.65 641.06 T
7 F
(required) 459.05 641.06 T
306.36 614.2 297.64 605.96 300.66 617.57 303.51 615.89 4 Y
V
310.65 627.95 303.52 615.88 2 L
2 Z
N
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 15) 276.13 61.61 T
-1.25 ( 13) 546.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Using 1-D array instead of m-D array) 144.33 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(instead of declaring) 89.65 683.62 T
4 16 Q
(int a[2][3][4];) 99.65 656.29 T
2 14 Q
(\245) 63.65 609.62 T
(we can declare) 89.65 609.62 T
4 16 Q
(int a1[24];) 99.65 582.29 T
2 14 Q
(\245) 63.65 535.62 T
(whenever we want to access  component) 89.65 535.62 T
4 16 Q
(a[i][j][k]) 99.65 508.29 T
2 14 Q
(\245) 63.65 461.62 T
(we access component) 89.65 461.62 T
4 16 Q
(a1[i*12 + j*4 + k]) 99.65 418.29 T
FMENDPAGE
%%EndPage: "13" 13
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 13
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-BoldItalic
%%+ Courier
%%+ Courier-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%EOF
