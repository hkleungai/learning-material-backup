%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Courier-BoldOblique FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
8 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 1) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Scope) 273.05 734.29 T
2 14 Q
(\245) 63.65 683.62 T
4.89 (The) 89.65 683.62 P
1 F
5.05 (scope of a declaration) 123.32 683.62 P
2 F
4.89 ( is the block of codes where the) 297.53 683.62 P
1.96 (identi\336er introduced by that declaration refers to the object being) 90.65 667.62 P
(declared.) 90.65 651.62 T
(\245) 63.65 605.62 T
1.05 (A declaration associates an identi\336er with an object,  but the same) 89.65 605.62 P
(identi\336er could be used in different declarations.) 90.65 589.62 T
(\245) 63.65 543.62 T
(Identi\336ers may not be recognized throughout the entire program) 89.65 543.62 T
(\245) 63.65 497.62 T
2.87 (A) 89.65 497.62 P
1 F
2.96 (global declaration) 106.52 497.62 P
2 F
2.87 ( is a declaration that is made outside any) 241.84 497.62 P
(block.) 90.65 481.62 T
(\245) 63.65 435.62 T
2.42 (Objects that are declared inside the boby of a function are called) 89.65 435.62 P
1 F
(local) 90.65 419.62 T
2 F
( to the function.) 125.4 419.62 T
(\245) 63.65 373.62 T
4.12 (The scope of a formal argument name includes the body of its) 89.65 373.62 P
(function.) 90.65 357.62 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 2) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Scope) 273.05 734.29 T
2 14 Q
(Example:) 63.65 701.62 T
(int  y = 38) 99.65 669.62 T
(void  f \050int, int\051;) 99.65 637.62 T
(void  main \050 \051 {) 99.65 605.62 T
(int  z = 47;) 135.65 573.62 T
({) 135.65 541.62 T
(const  int  a = 90;) 171.65 509.62 T
(z  +=  a;) 171.65 477.62 T
(}) 135.65 461.62 T
(z  =  2 * y;) 135.65 445.62 T
(f \0501, 2\051;) 135.65 429.62 T
(}) 99.65 413.62 T
(void  f \050int  s,  int  t\051  {) 99.65 381.62 T
(int  r = 12;) 135.65 349.62 T
(s  = r + t;) 135.65 317.62 T
(int  i = 27;) 135.65 285.62 T
(s  += i;) 135.65 253.62 T
(}) 99.65 237.62 T
72.65 186.95 459.65 663.95 R
2 Z
N
81.65 204.95 441.65 627.95 R
N
90.65 411.95 423.65 564.95 R
N
99.65 456.95 405.65 501.95 R
N
90.65 222.95 423.65 375.95 R
N
99.65 231.95 405.65 330.95 R
N
99.65 267.95 387.65 267.95 387.65 231.95 3 L
N
1 F
(scope of y) 378.65 645.95 T
(scope of f) 351.65 609.95 T
(scope of z) 342.65 546.95 T
(scope of a) 324.65 483.95 T
(scope of s & t) 315.65 357.95 T
(scope of r) 315.65 312.95 T
(scope of i) 315.65 249.95 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 3) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Scope) 273.05 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example) 89.65 683.62 T
3 16 Q
(#include <iostream.h>) 135.65 640.29 T
(int) 135.65 604.29 T
231.65 602.93 174.05 602.93 2 L
V
1.6 H
N
4 F
(Number) 174.05 604.29 T
3 F
(; //) 231.65 604.29 T
5 F
(global) 270.05 604.29 T
3 F
( variable) 327.65 604.29 T
(void Increment\050int) 135.65 568.29 T
4 F
(Number) 318.05 568.29 T
3 F
(\051 {) 375.65 568.29 T
4 F
(Number) 171.65 550.29 T
3 F
( =) 229.25 550.29 T
4 F
(Number) 258.05 550.29 T
3 F
( + 1;) 315.65 550.29 T
(cout <<) 171.65 532.29 T
4 F
(Number) 248.45 532.29 T
3 F
(<< endl;) 315.65 532.29 T
(}) 135.65 514.29 T
(void main\050\051 {) 135.65 478.29 T
211.25 458.93 153.65 458.93 2 L
V
N
4 F
(Number) 153.65 460.29 T
3 F
( = 1;) 211.25 460.29 T
(Increment\050) 153.65 442.29 T
307.25 440.93 249.65 440.93 2 L
V
N
4 F
(Number) 249.65 442.29 T
3 F
(\051;) 307.25 442.29 T
(cout <<) 153.65 424.29 T
288.05 422.93 230.45 422.93 2 L
V
N
4 F
(Number) 230.45 424.29 T
3 F
( << endl;) 288.05 424.29 T
(return 0;) 153.65 406.29 T
(}) 135.65 388.29 T
2 14 Q
(o) 90.65 335.62 T
6 F
(scope) 117.65 335.62 T
2 F
( of) 151.33 335.62 T
228.6 334.19 170.78 334.19 2 L
V
0.76 H
N
7 F
(Number) 170.78 335.62 T
2 F
( does not include function) 228.6 335.62 T
6 F
(Increment) 398.15 335.62 T
2 F
(o) 90.65 309.62 T
6 F
(scope) 117.65 309.62 T
2 F
( of) 151.33 309.62 T
7 F
(Number) 170.78 309.62 T
2 F
( includes only the function) 228.6 309.62 T
6 F
(Increment) 403.6 309.62 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 4) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Referring to Global V) 110.77 734.29 T
(ariables inside function) 287.22 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example) 89.65 683.62 T
3 16 Q
(#include <iostream.h>) 135.65 640.29 T
(int) 135.65 604.29 T
5 F
(Number) 174.05 604.29 T
3 F
(; //global variable) 231.65 604.29 T
(void Increment\050int Num\051 {) 135.65 568.29 T
(Num = Num + 1;) 171.65 550.29 T
(cout << Num) 171.65 532.29 T
(<< endl;) 286.85 532.29 T
4 F
(Number) 171.65 514.29 T
8 F
( =) 229.25 514.29 T
4 F
(Number) 258.05 514.29 T
8 F
( + 1;) 315.65 514.29 T
3 F
(}) 135.65 496.29 T
(void main\050\051 {) 135.65 460.29 T
5 F
(Number) 153.65 442.29 T
3 F
( = 1;) 211.25 442.29 T
(Increment\050) 153.65 424.29 T
5 F
(Number) 249.65 424.29 T
3 F
(\051;) 307.25 424.29 T
(cout <<) 153.65 406.29 T
5 F
(Number) 230.45 406.29 T
3 F
( << endl;) 288.05 406.29 T
(return 0;) 153.65 388.29 T
(}) 135.65 370.29 T
2 14 Q
(o) 90.65 299.62 T
175.47 298.19 117.65 298.19 2 L
V
0.76 H
N
7 F
7.61 (Number) 117.65 299.62 P
2 F
7.37 ( inside function) 175.47 299.62 P
6 F
7.37 (Increment) 301.53 299.62 P
2 F
7.37 ( is referring to global) 366.58 299.62 P
(variable) 117.65 283.62 T
(o) 90.65 257.62 T
(Lead to some of the most dif\336cult to \336nd bugs in programming) 117.65 257.62 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 5) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Global V) 145.43 734.29 T
(ariable & Pass-by-Reference) 215.21 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example) 89.65 683.62 T
3 16 Q
(#include <iostream.h>) 135.65 640.29 T
(int Number; //global variable) 135.65 604.29 T
(void Increment\050int) 135.65 568.29 T
8 F
(&) 308.45 568.29 T
3 F
( Num\051 {) 318.05 568.29 T
(Num = Num + 1;) 171.65 550.29 T
(cout << Num) 171.65 532.29 T
(<< endl;) 286.85 532.29 T
(Number = Number + 1;) 171.65 514.29 T
(}) 135.65 496.29 T
(void main\050\051 {) 135.65 460.29 T
(Number = 1;) 153.65 442.29 T
(Increment\050Number\051;) 153.65 424.29 T
(cout << Number << endl;) 153.65 406.29 T
(return 0;) 153.65 388.29 T
(}) 135.65 370.29 T
2 14 Q
(o) 90.65 299.62 T
-0.38 (When) 117.65 299.62 P
6 F
-0.38 (Increment) 159 299.62 P
2 F
-0.38 (is called,) 227.56 299.62 P
6 F
-0.38 (Num) 287.22 299.62 P
2 F
-0.38 ( refers to global variable) 319.63 299.62 P
6 F
-0.38 (Number) 479.02 299.62 P
2 F
(o) 90.65 273.62 T
6 F
("Number = Number + 1") 117.65 273.62 T
2 F
(also refers to global variable) 278.31 273.62 T
6 F
(Number) 465.28 273.62 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 6) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Scope & Argument Passing) 185.28 734.29 T
2 14 Q
(\245) 63.65 701.62 T
(Example) 89.65 701.62 T
3 16 Q
(#include <iostream.h>) 63.65 674.29 T
(int A,B,C,D;) 63.65 656.29 T
(void Two\050int A, int B, int& D\051 {) 63.65 620.29 T
(     B = 21; D = 23;) 63.65 602.29 T
(     cout << A << " " << B << " ") 63.65 584.29 T
(          << C << " " << D << endl;) 63.65 566.29 T
(}) 63.65 548.29 T
(void One\050int A, int B, int& C\051 {) 63.65 512.29 T
(     int D;    // Local variable) 63.65 494.29 T
(     A = 10; B = 11; C = 12; D = 13;) 63.65 476.29 T
(     cout << A << " " << B << " ") 63.65 458.29 T
(          << C << " " << D << endl;) 63.65 440.29 T
(     Two\050A,B,C\051;) 63.65 422.29 T
(}) 63.65 404.29 T
(void main\050\051 {) 63.65 368.29 T
(     A = 1; B = 2; C = 3; D = 4;) 63.65 350.29 T
(     One\050A,B,C\051;) 63.65 332.29 T
(     cout << A << " " << B << " ") 63.65 314.29 T
(          << C << " " << D << endl;) 63.65 296.29 T
(     Two\050A,B,C\051;) 63.65 278.29 T
(     cout << A << " " << B << " ") 63.65 260.29 T
(          << C << " " << D << endl;) 63.65 242.29 T
(}) 63.65 224.29 T
(10 11 12 13) 63.65 188.29 T
(10 21 23 23) 63.65 170.29 T
(1 2 23 4) 63.65 152.29 T
(1 21 23 23) 63.65 134.29 T
(1 2 23 4) 63.65 116.29 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 7) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Static objects) 241.57 734.29 T
2 14 Q
(\245) 63.65 683.62 T
1.76 (A local object is created when its de\336nition is executed. When the) 89.65 683.62 P
0.65 (function containing its de\336nition \336nishes execution, the) 90.65 667.62 P
1 F
0.67 (lifetime) 459.19 667.62 P
2 F
0.65 ( of) 515.45 667.62 P
(the object is over) 90.65 651.62 T
(.) 198.5 651.62 T
(int  f \050int  x\051  {) 90.65 619.62 T
(int  y = 3;) 117.65 603.62 T
(y  =  y + x;) 117.65 587.62 T
(return y;) 117.65 571.62 T
(}) 90.65 555.62 T
(cout << f\0501\051  << endl;) 90.65 523.62 T
(//  output  is  4) 279.65 523.62 T
(cout << f\0501\051  << endl;) 90.65 491.62 T
(//  output  is  4) 279.65 491.62 T
(\245) 63.65 445.62 T
0.26 (The lifetime of a) 89.65 445.62 P
1 F
0.27 (static object) 200.39 445.62 P
2 F
0.26 ( begins with the execution of the \336rst) 289.46 445.62 P
0.93 (call to the function in which it is de\336ned. A static object exists and) 90.65 429.62 P
(maintains its value from one execution of the function to the next.) 90.65 413.62 T
(int  f \050int  x\051  {) 90.65 381.62 T
1 F
(static) 117.65 365.62 T
2 F
(  int  y = 3;) 158.09 365.62 T
(y  =  y + x;) 117.65 349.62 T
(return y;) 117.65 333.62 T
(}) 90.65 317.62 T
(cout << f\0501\051  << endl;) 90.65 285.62 T
(//  output  is  4) 279.65 285.62 T
(cout << f\0501\051  << endl;) 90.65 253.62 T
(//  output  is  5) 279.65 253.62 T
(cout << f\0502\051  << endl;) 90.65 221.62 T
(//  output  is  7) 279.65 221.62 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 8) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Basic T) 248.66 734.29 T
(ypes) 309.01 734.29 T
2 14 Q
(\245) 63.65 683.62 T
7 F
(char) 89.65 683.62 T
2 F
(- a character in the ASCII character set) 180.65 683.62 T
(\245) 63.65 637.62 T
7 F
(int) 89.65 637.62 T
2 F
(- whole number \050-32768 to 32767\051) 180.65 637.62 T
(\245) 63.65 591.62 T
7 F
(\337oat) 89.65 591.62 T
2 F
(- real number) 180.65 591.62 T
(\321) 90.65 539.62 T
(char) 116.28 539.62 T
(, int -) 144.01 539.62 T
7 F
(ordinal) 182.65 539.62 T
2 F
( types) 237.11 539.62 T
1 16 Q
(Why T) 248.96 430.29 T
(ypes?) 300.7 430.29 T
2 14 Q
(\245) 63.65 379.62 T
(values are stored internally in a computer as binary numbers) 89.65 379.62 T
(\245) 63.65 333.62 T
(computers are comfortable to add a) 89.65 333.62 T
6 F
(\337oat) 321.45 333.62 T
2 F
( to a) 349.96 333.62 T
6 F
(char) 381.87 333.62 T
2 F
(\245) 63.65 287.62 T
(protects the programmer from making mistakes) 89.65 287.62 T
(\321) 90.65 261.62 T
(a type de\336nes the) 116.28 261.62 T
7 F
(range of values) 234.26 261.62 T
2 F
( that an object can take on,) 343.95 261.62 T
(and the) 117.65 243.62 T
7 F
(operations) 170.81 243.62 T
2 F
( that apply to it) 247.29 243.62 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 9) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Data T) 227.77 734.29 T
(ype : Char) 282.78 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Constants) 89.65 683.62 T
3 16 Q
(const char star = \325*\325;) 117.65 656.29 T
2 14 Q
(\245) 63.65 609.62 T
(V) 89.65 609.62 T
(ariable Declaration) 98.47 609.62 T
3 16 Q
(char letter;) 117.65 582.29 T
2 14 Q
(\245) 63.65 535.62 T
(V) 89.65 535.62 T
(ariable Assignment) 98.47 535.62 T
3 16 Q
(letter := \325A\325;) 117.65 508.29 T
2 14 Q
(\245) 63.65 461.62 T
(Character I/O) 89.65 461.62 T
3 16 Q
(cin << A << B << C << D;) 117.65 434.29 T
5 F
(INPUT: 1X3Y) 117.65 398.29 T
3 F
(A = \3251\325, B = \325X\325, C = \3253\325, D = \325Y\325) 117.65 362.29 T
(cout << A << B << C << D << endl;) 117.65 290.29 T
5 F
(OUTPUT:) 117.65 236.29 T
(1X3Y) 117.65 218.29 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 10) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Character Set) 239.78 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(7-bit ASCII character set: 128 characters) 89.65 683.62 T
(\245) 63.65 637.62 T
(begins with 32 non-printing control characters) 89.65 637.62 T
(\321) 90.65 591.62 T
(Of interests:) 116.28 591.62 T
(o) 135.22 565.62 T
(0  \050\1340\051) 161.85 565.62 T
(NUL character) 243.65 565.62 T
(commonly used as end of string character) 243.65 549.62 T
(o) 135.22 523.62 T
(7 \050\1347\051) 161.85 523.62 T
(BEL character) 243.65 523.62 T
(for programs with bells and whistles) 243.65 507.62 T
(o) 135.22 481.62 T
(8 \050\13410\051) 161.85 481.62 T
(BS character \050\134b\051) 243.65 481.62 T
(backspace character) 243.65 465.62 T
(o) 135.22 439.62 T
(10 \050\13412\051) 161.85 439.62 T
(LF character \050\134n\051) 243.65 439.62 T
(line feed character) 243.65 423.62 T
(o) 135.22 397.62 T
(13 \050\13415\051) 161.85 397.62 T
(CR character \050\134r\051) 243.65 397.62 T
(carriage return character) 243.65 381.62 T
(\245) 63.65 335.62 T
(space \05032\051 is the \336rst printable ASCII character) 89.65 335.62 T
(\245) 63.65 289.62 T
(NUL is the 0th ASCII character) 89.65 289.62 T
(\245) 63.65 243.62 T
(\325A) 89.65 243.62 T
(\325 through \325Z\325 have code values 65 through 90) 101.58 243.62 T
(\245) 63.65 197.62 T
(\325a\325 through \325z\325 have code values 97 through 122) 89.65 197.62 T
(\245) 63.65 151.62 T
(\3250\325 through \3259\325 have code values 48 through 57) 89.65 151.62 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 11) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Some Character Functions from ctype.h) 131.56 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(isupper\050c\051) 89.65 683.62 T
(returns nonzero if c is an uppercase letter) 207.65 683.62 T
(\245) 63.65 637.62 T
(islower\050c\051) 89.65 637.62 T
(returns nonzero if c is a lowercase letter) 207.65 637.62 T
(\245) 63.65 591.62 T
(isdigit\050c\051) 89.65 591.62 T
(returns nonzero if c is digit character) 207.65 591.62 T
(\245) 63.65 545.62 T
(isalpha\050c\051) 89.65 545.62 T
2.33 (returns nonzero if either islower\050c\051 or isupper\050c\051) 207.65 545.62 P
(returns  nonzero) 206.65 529.62 T
(\245) 63.65 483.62 T
(isalnum\050c\051) 89.65 483.62 T
3.49 (returns nonzero if either isalpha\050c\051 or isdigit\050c\051) 207.65 483.62 P
(returns nonzero) 206.65 467.62 T
(\245) 63.65 421.62 T
(isspace\050c\051) 89.65 421.62 T
0.54 (returns nonzero if c is a space, newline, formfeed,) 207.65 421.62 P
(carriage return, tab or vertical tab) 206.65 405.62 T
(\245) 63.65 359.62 T
(tolower\050c\051) 89.65 359.62 T
3.83 (if c is uppercase, returns lowercase; otherwise,) 207.65 359.62 P
(returns c) 206.65 343.62 T
(\245) 63.65 297.62 T
(toupper\050c\051) 89.65 297.62 T
3.83 (if c is lowercase, returns uppercase; otherwise,) 207.65 297.62 P
(returns c) 206.65 281.62 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 12) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Relational Operators with Ordinal T) 131.7 734.29 T
(ype) 433.97 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(\325A) 89.65 683.62 T
(\325 through \325Z\325 have code values 65 through 90) 101.58 683.62 T
3 16 Q
(\325A\325 < \325B\325 < \245\245\245 < \325Z\325) 99.65 656.29 T
2 14 Q
(\245) 63.65 609.62 T
(\325a\325 through \325z\325 have code values 97 through 122) 89.65 609.62 T
3 16 Q
(\325a\325 < \325b\325 < \245\245\245 < \325z\325) 99.65 582.29 T
2 14 Q
(\245) 63.65 535.62 T
(\3250\325 through \3259\325 have code values 48 through 57) 89.65 535.62 T
3 16 Q
(\3250\325 < \3251\325 < \245\245\245 < \3259\325) 99.65 508.29 T
1 F
(Using Ordinal T) 158.38 418.29 T
(ype in a For Loop) 290.86 418.29 T
2 14 Q
(\245) 63.65 367.62 T
1.27 (<counter variable> can have any ordinal \050counting\051 type, including) 89.65 367.62 P
7 F
(int) 90.65 351.62 T
2 F
( and) 111.38 351.62 T
7 F
(char) 143.54 351.62 T
2 F
(.  \050) 176.22 351.62 T
221.07 354.59 192.55 354.59 2 L
V
0.59 H
N
6 F
(\337oat) 192.55 351.62 T
2 F
( is forbidden.\051) 221.07 351.62 T
(o) 90.65 325.62 T
(Example) 117.65 325.62 T
3 16 Q
(for \050Char CharCounter = \325a\325;) 117.65 298.29 T
(          CharCounter <= \325e\325;) 117.65 280.29 T
(          CharCounter++\051) 117.65 262.29 T
(cout << CharCounter;) 135.65 244.29 T
(for \050Char CharCounter = \325E\325;) 117.65 208.29 T
(          CharCounter >= \325A\325;) 117.65 190.29 T
(          CharCounter--\051) 117.65 172.29 T
(cout << CharCounter;) 135.65 154.29 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 13) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Example) 261.35 734.29 T
3 F
(//File islower.cpp) 63.65 700.29 T
(#include <iostream.h>) 63.65 682.29 T
(int islower\050char c\051 {) 63.65 646.29 T
(     if \050c>='a' && c<='z'\051) 63.65 628.29 T
(          return 1;) 63.65 610.29 T
(     else) 63.65 592.29 T
(          return 0;) 63.65 574.29 T
(}) 63.65 556.29 T
(void main\050\051 {) 63.65 520.29 T
(     char c;) 63.65 502.29 T
(     cin >> c;) 63.65 484.29 T
(     if \050islower\050c\051\051) 63.65 466.29 T
(          cout << "\134'" << c << "\134'" << " ") 63.65 448.29 T
(               << "is a lower case letter") 63.65 430.29 T
(               << endl;) 63.65 412.29 T
(     else) 63.65 394.29 T
(          cout << "\134'" << c << "\134'" << " ") 63.65 376.29 T
-0.1 (               << "is a not a lower case letter") 63.65 358.29 P
(               << endl;) 63.65 340.29 T
(     return 0;) 63.65 322.29 T
(}) 63.65 304.29 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 14) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Standard I/O Streams) 207.71 734.29 T
2 14 Q
(\245) 63.65 683.62 T
7 F
(stream) 89.65 683.62 T
2 F
( - a sequence of characters) 139.17 683.62 T
(o) 135.22 657.62 T
7 F
(cout) 161.85 657.62 T
2 F
( - output stream) 192.69 657.62 T
(o) 135.22 631.62 T
7 F
(cin) 161.85 631.62 T
2 F
( - input stream) 184.4 631.62 T
7 F
(\245) 63.65 585.62 T
(input/output operator) 89.65 585.62 T
(o) 135.22 559.62 T
(output operator \050<<\051) 161.85 559.62 T
2 F
(-) 178.85 533.62 T
2.18 (convert typed data to a stream of characters and) 200.45 533.62 P
(insert them into an output stream) 200.45 517.62 T
7 F
(o) 135.22 491.62 T
(input operator \050>>\051) 161.85 491.62 T
2 F
(-) 178.85 465.62 T
7.84 (extract information from an input stream of) 200.45 465.62 P
(characters and convert them into typed data) 200.45 449.62 T
63.65 96.95 531.65 744.95 C
63.65 100.95 531.65 418.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
62.65 355.95 530.65 409.95 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Output conversion \050from internal representation to characters\051) 62.65 400.62 T
3 16 Q
(cout << "Enter " << setw\0503\051 << n) 62.65 383.29 T
(     << " f) 62.65 365.29 T
(loat values separated by a blank.";) 168.25 365.29 T
80.65 310.95 215.65 337.95 R
7 X
V
0.5 H
2 Z
0 X
N
107.65 337.95 107.65 310.95 2 L
N
134.65 337.95 134.65 310.95 2 L
N
161.65 337.95 161.65 310.95 2 L
N
188.65 337.95 188.65 310.95 2 L
N
215.65 310.95 350.65 337.95 R
7 X
V
0 X
N
242.65 337.95 242.65 310.95 2 L
N
269.65 337.95 269.65 310.95 2 L
N
296.65 337.95 296.65 310.95 2 L
N
323.65 337.95 323.65 310.95 2 L
N
350.65 310.95 485.65 337.95 R
7 X
V
0 X
N
377.65 337.95 377.65 310.95 2 L
N
404.65 337.95 404.65 310.95 2 L
N
431.65 337.95 431.65 310.95 2 L
N
458.65 337.95 458.65 310.95 2 L
N
(E  n  t  e r     2  0  3    f  l  o  a  t \245\245\245) 88.45 318.97 T
62.65 202.95 530.65 247.95 R
7 X
V
2 14 Q
0 X
(Input conversion) 62.65 238.62 T
3 16 Q
(cin >> month >> day >> year;) 62.65 221.29 T
89.65 157.95 224.65 184.95 R
7 X
V
0 X
N
116.65 184.95 116.65 157.95 2 L
N
143.65 184.95 143.65 157.95 2 L
N
170.65 184.95 170.65 157.95 2 L
N
197.65 184.95 197.65 157.95 2 L
N
224.65 157.95 359.65 184.95 R
7 X
V
0 X
N
251.65 184.95 251.65 157.95 2 L
N
278.65 184.95 278.65 157.95 2 L
N
305.65 184.95 305.65 157.95 2 L
N
332.65 184.95 332.65 157.95 2 L
N
359.65 157.95 494.65 184.95 R
7 X
V
0 X
N
386.65 184.95 386.65 157.95 2 L
N
413.65 184.95 413.65 157.95 2 L
N
440.65 184.95 440.65 157.95 2 L
N
467.65 184.95 467.65 157.95 2 L
N
(1  2       2  4     9  6) 98.65 166.95 T
132.21 208.31 143.65 211.96 135.88 202.81 134.05 205.56 4 Y
V
116.65 193.95 134.05 205.55 2 L
N
221.34 200.42 224.65 211.95 227.96 200.42 224.65 200.42 4 Y
V
224.65 193.95 224.65 200.42 2 L
N
302.34 200.42 305.65 211.95 308.96 200.42 305.65 200.42 4 Y
V
305.65 193.95 305.65 200.42 2 L
N
89.65 193.95 143.65 193.95 2 L
N
197.65 193.95 251.65 193.95 2 L
N
278.65 193.95 332.65 193.95 2 L
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
(Lecture 12) 276.13 61.61 T
( 15) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Streams as a Sequence of Lines) 167.8 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Internal representation of a character stream) 89.65 683.62 T
3 12 Q
(<65><65><32><66><66>) 99.65 642.95 T
301.25 641.93 243.65 641.93 2 L
V
1.2 H
N
8 F
(<13><10>) 243.65 642.95 T
3 F
(<48><49><32><50><51>) 301.25 642.95 T
502.85 641.93 445.25 641.93 2 L
V
N
8 F
(<13><10>) 445.25 642.95 T
3 F
(<52>) 502.85 642.95 T
2 14 Q
(\245) 63.65 518.62 T
(Display on TERMINAL) 89.65 518.62 T
3 16 Q
(AA BB) 99.65 475.29 T
(01 23) 99.65 457.29 T
(4) 99.65 439.29 T
63.65 96.95 531.65 744.95 C
63.65 573.95 531.65 638.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 14 Q
0 X
0 0 0 1 0 0 0 K
(end of line) 180.65 587.82 T
(end of line) 378.65 587.82 T
250.05 629.72 261.64 632.82 253.46 624.05 251.75 626.89 4 Y
V
216.65 605.82 251.76 626.89 2 L
0.5 H
2 Z
N
439.42 628.55 450.64 632.82 443.39 623.25 441.41 625.9 4 Y
V
414.65 605.82 441.42 625.9 2 L
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "15" 15
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 15
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ Courier
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-BoldItalic
%%+ Courier-Bold
%%EOF
