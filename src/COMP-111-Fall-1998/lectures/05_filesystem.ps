%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.01 841.97 0 1 11 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 0 /NewCenturySchlbk-Italic FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-1) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
39.35 458.44 280.65 796.26 R
N
1 10.72 Q
(F) 128.17 768.25 T
(ile Systems) 135.22 768.25 T
1 6.26 Q
(\245) 59.17 743.11 T
(What\325) 67.22 743.11 T
(s a \336le system?) 84.21 743.11 T
(A means of organizing information stored on a computer) 67.22 727.47 T
(. A \336le) 229.6 727.47 T
(system is a) 67.22 719.88 T
2 F
(logical) 101.06 719.88 T
1 F
( view) 120.16 719.88 T
(, not necessarily a physical view) 134.45 719.88 T
(.) 226.36 719.88 T
(\245) 59.17 704.24 T
(What does a \336le system provide?) 67.22 704.24 T
(\245) 67.22 691.28 T
(Creation) 75.26 691.28 T
(\245) 67.22 678.32 T
(Removal) 75.26 678.32 T
(\245) 67.22 665.36 T
(Movement) 75.26 665.36 T
(\245) 67.22 652.4 T
(Categorization) 75.26 652.4 T
(\245) 67.22 639.44 T
(Security) 75.26 639.44 T
(\245) 59.17 623.8 T
(Examples of \336le systems:) 67.22 623.8 T
(\245) 67.22 610.85 T
(MS-DOS \336le system) 75.26 610.85 T
(\245) 67.22 597.89 T
(Macintosh \336le system) 75.26 597.89 T
(\245) 67.22 584.93 T
(CD-ROM \336le systems) 75.26 584.93 T
(\245) 67.22 571.97 T
(UNIX \336le system) 75.26 571.97 T
(\245) 67.22 559.01 T
(NFS \050networked \336le system\051) 75.26 559.01 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-2) 428.02 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
314.36 458.44 555.66 796.26 R
N
1 10.72 Q
(UNIX F) 386.99 769.01 T
(ile Systems) 426.41 769.01 T
1 6.26 Q
(\245) 334.18 742.49 T
(Hierarc) 342.22 742.49 T
(hical Organization) 364.3 742.49 T
(\245) 334.18 609.78 T
(Root of tree is at top denoted by \324/\325) 342.22 609.78 T
(\245) 334.18 594.14 T
(Kinds of \336les) 342.22 594.14 T
(\245) 342.22 581.18 T
(Directory \336les) 350.27 581.18 T
(Places in whic) 350.27 569.56 T
(h to put \336les; the branc) 391.36 569.56 T
(hes in the tree) 458.51 569.56 T
(\245) 342.22 556.6 T
(Regular F) 350.27 556.6 T
(iles) 379.17 556.6 T
(Lea) 350.27 544.98 T
(ves of the trees; cannot contain other \336les) 360.98 544.98 T
334.18 464.3 535.83 776.15 C
356.21 623.33 513.8 740.41 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
445.58 655.95 445.58 647.91 2 L
0.22 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
453.62 676.06 477.75 668.02 2 L
N
413.4 668.02 441.56 676.06 2 L
N
453.62 692.15 477.75 684.1 2 L
N
413.4 684.1 441.56 692.15 2 L
N
445.58 708.23 445.58 700.19 2 L
N
445.58 688.12 445.58 680.08 2 L
N
413.4 720.3 441.56 728.34 2 L
N
445.58 728.34 445.58 720.3 2 L
N
453.62 728.34 477.75 720.3 2 L
N
7 X
90 450 12.06 6.03 445.58 730.35 G
0 X
90 450 12.06 6.03 445.58 730.35 A
3 6.26 Q
(/) 443.84 729.62 T
7 X
90 450 12.06 6.03 413.4 714.27 G
0 X
90 450 12.06 6.03 413.4 714.27 A
(bin) 409.23 711.96 T
7 X
90 450 12.06 6.03 445.58 714.27 G
0 X
90 450 12.06 6.03 445.58 714.27 A
(staff) 439.67 711.96 T
7 X
90 450 12.06 6.03 477.75 714.27 G
0 X
90 450 12.06 6.03 477.75 714.27 A
(lib) 474.62 711.96 T
7 X
90 450 12.06 6.03 445.58 694.16 G
0 X
90 450 12.06 6.03 445.58 694.16 A
(cs) 442.45 691.85 T
7 X
90 450 12.06 6.03 477.75 678.07 G
0 X
90 450 12.06 6.03 477.75 678.07 A
(roland) 469.06 675.77 T
7 X
90 450 12.06 6.03 445.58 678.07 G
0 X
90 450 12.06 6.03 445.58 678.07 A
(hor) 436.54 675.77 T
(ner) 445.73 675.77 T
7 X
90 450 12.06 6.03 413.4 678.07 G
0 X
90 450 12.06 6.03 413.4 678.07 A
(gankw) 404.36 675.77 T
445.58 672.04 445.58 663.99 2 L
N
7 X
90 450 12.06 6.03 477.75 661.98 G
0 X
90 450 12.06 6.03 477.75 661.98 A
(Pla) 471.76 659.68 T
(y) 480.61 659.68 T
7 X
90 450 12.06 6.03 445.58 661.98 G
0 X
90 450 12.06 6.03 445.58 661.98 A
(Libr) 435.96 659.68 T
(ar) 446.32 659.68 T
(y) 452.07 659.68 T
7 X
90 450 12.06 6.03 413.4 661.98 G
1.34 H
0 X
90 450 12.06 6.03 413.4 661.98 A
(.mailrc) 404.2 659.68 T
4 F
(...) 496.66 661.27 T
(...) 496.66 679.61 T
(...) 496.66 715.81 T
7 X
90 450 12.06 6.03 445.58 645.9 G
0 X
90 450 12.06 6.03 445.58 645.9 A
3 F
(bib) 438.34 643.59 T
(lio) 446.56 643.59 T
1 F
(F) 378.93 632.66 T
(ile) 383.04 632.66 T
405.29 649.11 404.55 650.21 409.14 651.7 406.04 648.01 4 Y
0.22 H
0 Z
N
405.29 649.11 404.55 650.21 409.14 651.7 406.04 648.01 4 Y
V
389.59 638.52 405.2 649.05 2 L
2 Z
N
425.55 641.9 425.27 643.2 430.08 642.9 425.84 640.6 4 Y
0 Z
N
425.55 641.9 425.27 643.2 430.08 642.9 425.84 640.6 4 Y
V
392.27 634.5 425.44 641.88 2 L
2 Z
N
(Directory) 375.07 697.06 T
428.79 708.08 428.39 709.35 433.22 709.45 429.18 706.81 4 Y
0 Z
N
428.79 708.08 428.39 709.35 433.22 709.45 429.18 706.81 4 Y
V
404.78 700.64 428.68 708.05 2 L
2 Z
N
427.68 695.58 427.76 696.91 432.31 695.3 427.6 694.26 4 Y
0 Z
N
427.68 695.58 427.76 696.91 432.31 695.3 427.6 694.26 4 Y
V
403.44 697.06 427.57 695.59 2 L
2 Z
N
334.18 464.3 535.83 776.15 C
302.01 432.13 568.01 808.33 C
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-3) 153.02 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
39.35 59.96 280.65 397.78 R
N
1 10.72 Q
(UNIX F) 111.98 370.52 T
(ile Systems) 151.41 370.52 T
1 6.26 Q
(\245) 59.17 344.01 T
(A few special directories) 67.22 344.01 T
(\245) 67.22 331.05 T
(The directory \322/\323 \050pronounced \322slash\323 and also called \322the root\323\051) 75.26 331.05 T
(is the ancestor of) 75.26 323.45 T
2 F
(all) 126.12 323.45 T
1 F
( \336les in the \336le system) 133.88 323.45 T
(\245) 67.22 310.49 T
-0.13 (/bin and /usr/bin contain UNIX utilities \050e) 75.26 310.49 P
-0.13 (.g) 195.35 310.49 P
-0.13 (. the) 200.29 310.49 P
2 F
-0.13 (cat) 214.64 310.49 P
1 F
-0.13 ( command is) 223.21 310.49 P
(actually located in /bin/cat\051) 75.26 302.9 T
(\245) 67.22 289.94 T
(/dev contains \336les whic) 75.26 289.94 T
(h describe \322devices\323 suc) 141.84 289.94 T
(h as terminals) 209.8 289.94 T
(and printers that the system controls) 75.26 282.34 T
(\245) 67.22 269.38 T
(/etc contains administrative programs like password \336les) 75.26 269.38 T
(\245) 67.22 256.42 T
(/tmp is a place for users to create temporary \336les; periodically) 75.26 256.42 T
(deleted) 75.26 248.83 T
(\245) 67.22 235.87 T
(Every directory has at least two entries: \322.) 75.26 235.87 T
(\323 is an alias for the) 196.8 235.87 T
(directory itself) 75.26 228.27 T
(, and \322..) 117.19 228.27 T
(\323 is an alias for the directory\325) 138.99 228.27 T
(s parent) 222.25 228.27 T
(\245) 59.17 212.63 T
(Naming \336les) 67.22 212.63 T
(\245) 67.22 199.67 T
(No two \336les in the same directory can ha) 75.26 199.67 T
(ve the same name) 193.15 199.67 T
(\245) 67.22 186.72 T
(Case is signi\336cant: the \336les \322README\323 and \322Readme\323 are) 75.26 186.72 T
(different \336les) 75.26 179.12 T
(.) 113.68 179.12 T
(\245) 67.22 166.16 T
(By convention, \336les are often named with an \322extension\323, e) 75.26 166.16 T
(.g) 245 166.16 T
(.) 249.95 166.16 T
(c) 75.26 158.56 T
(hapter1.frame) 78 158.56 T
(, bicyc) 119.36 158.56 T
(le) 137.16 158.56 T
(.gif to indicate the \336le\325) 142.14 158.56 T
(s content.) 206.41 158.56 T
(\245) 67.22 145.61 T
(Y) 75.26 145.61 T
(ou cannot create a \336le named \322.) 79.04 145.61 T
(\323 or \322..) 169.53 145.61 T
(\323.) 187.03 145.61 T
(\245) 67.22 132.65 T
-0.04 (There are otherwise no restrictions on \336lenames \050but you might) 75.26 132.65 P
(ha) 75.26 125.05 T
(ve a little trouble typing the name if you\325re overly creative\051.) 82.5 125.05 T
(\245) 67.22 112.09 T
(\322Invisible\323 \336les and directories \050those that normally don\325t show) 75.26 112.09 T
(up using) 75.26 104.49 T
2 F
(ls) 102.03 104.49 T
1 F
(\051 ha) 106.89 104.49 T
(ve a period as the \336rst c) 117.95 104.49 T
(haracter) 186.96 104.49 T
(, e) 211 104.49 T
(.g) 217.5 104.49 T
(. \322.login\323,) 222.44 104.49 T
(\322.plan\323, \322.newsrc\323, etc) 75.26 96.9 T
(. Many programs create suc) 136.79 96.9 T
(h \336les to keep) 216.8 96.9 T
(information in between runs) 75.26 89.3 T
(.) 157.6 89.3 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-4) 428.02 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
314.36 59.96 555.66 397.78 R
N
1 10.72 Q
(P) 407.1 370.52 T
(athnames) 413.85 370.52 T
1 6.26 Q
(\245) 334.18 344.01 T
(Simple \336lenames) 342.22 344.01 T
(F) 342.22 328.37 T
(or this to work, the \336le must be in your current working directory) 346.05 328.37 T
(\245) 334.18 312.73 T
(Relative pathnames) 342.22 312.73 T
(A string of directory references) 342.22 297.09 T
(, beginning with a directory that is) 431.6 297.09 T
(in the current working directory) 342.22 289.49 T
(, e) 434.69 289.49 T
(.g) 441.18 289.49 T
(.) 446.13 289.49 T
0 F
(./\336le) 350.27 277.87 T
(../g) 350.27 266.26 T
(ankw/.plan) 358.23 266.26 T
(bin/chkmail) 350.27 254.64 T
1 F
(\245) 334.18 239 T
(Absolute pathname) 342.22 239 T
(A pathname beginning at the root, e) 342.22 223.36 T
(.g) 446.74 223.36 T
(.) 451.68 223.36 T
0 F
(/staf) 350.27 211.74 T
(f/cs/horner/.plan) 360.88 211.74 T
(/bin/cat) 350.27 200.12 T
(/etc/passwd) 350.27 188.5 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-5) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
39.35 458.44 280.65 796.26 R
N
1 10.72 Q
(Special Directories) 113.33 769.01 T
1 6.26 Q
(\245) 59.17 742.49 T
(Home directory) 67.22 742.49 T
(\245) 67.22 729.53 T
(The directory you are in when you \336rst log in) 75.26 729.53 T
(\245) 67.22 716.57 T
(This is your space; you control security) 75.26 716.57 T
(.) 186.85 716.57 T
(\245) 67.22 703.62 T
(Place to put your personalized .startup \336les) 75.26 703.62 T
(\245) 67.22 690.66 T
(Y) 75.26 690.66 T
(our working directory after typing) 79.04 690.66 T
2 F
(cd) 179.48 690.66 T
1 F
( with no arguments) 186.08 690.66 T
(\245) 59.17 675.02 T
(W) 67.22 675.02 T
(orking directory) 72.98 675.02 T
(The directory you are currently working \322in\323) 67.22 659.38 T
(\245) 67.22 646.42 T
(T) 75.26 646.42 T
(o access \336les in your working directory) 79.09 646.42 T
(, use only simple) 190.1 646.42 T
(\336lenames) 75.26 638.82 T
(\245) 67.22 625.86 T
(T) 75.26 625.86 T
(o access \336les in other directories) 79.09 625.86 T
(, must use a pathname) 172.19 625.86 T
(\245) 67.22 612.9 T
2 F
(pwd) 75.26 612.9 T
1 F
( command prints the current directory) 87.54 612.9 T
(\245) 67.22 599.95 T
2 F
(cd) 75.26 599.95 T
1 F
( command \050whic) 81.86 599.95 T
(h takes a pathname\051 c) 128.74 599.95 T
(hanges the working) 192.77 599.95 T
(directory) 75.26 592.35 T
(. W) 100.42 592.35 T
(ith no arguments) 109.93 592.35 T
(,) 159.7 592.35 T
2 F
(cd) 163.18 592.35 T
1 F
( c) 169.78 592.35 T
(hanges to your home) 174.26 592.35 T
(directory) 75.26 584.75 T
(.) 100.42 584.75 T
(\245) 59.17 569.11 T
(Special directory names and shorthands) 67.22 569.11 T
(\245) 67.22 556.15 T
(Remember) 75.26 556.15 T
(, \322) 105.92 556.15 T
0 F
(.) 111.83 556.15 T
1 F
(\323 is alw) 113.16 556.15 T
(a) 134.14 556.15 T
(ys the directory itself) 137.56 556.15 T
(\245) 67.22 543.2 T
(\322) 75.26 543.2 T
0 F
(..) 77.69 543.2 T
1 F
(\323 is alw) 80.59 543.2 T
(a) 101.57 543.2 T
(ys the parent \050so what is \322) 104.99 543.2 T
0 F
(/..) 180.3 543.2 T
1 F
(\323?\051) 184.94 543.2 T
(\245) 67.22 530.24 T
(In most shells \322) 75.26 530.24 T
0 F
(~) 119.99 530.24 T
1 F
(\323 means your home directory) 123.37 530.24 T
(\245) 67.22 517.28 T
(And) 75.26 517.28 T
0 F
(~) 88.93 517.28 T
2 F
(user) 92.32 517.28 T
1 F
( means) 104.47 517.28 T
2 F
(user) 126.84 517.28 T
1 F
(\325) 138.99 517.28 T
(s home directory) 140.11 517.28 T
(, so:) 187.29 517.28 T
5 F
(% more ~horner/.plan) 75.26 505.9 T
1 F
-0.1 (looks at the \336le \322) 75.26 495.38 P
0 F
-0.09 (.plan) 123.29 495.38 P
1 F
-0.1 (\323 in \322) 135.63 495.38 P
0 F
-0.09 (/staf) 149.56 495.38 P
-0.09 (f/cs/horner) 160.18 495.38 P
1 F
-0.1 (\323, whic) 187.28 495.38 P
-0.1 (h is horner\325) 206.48 495.38 P
-0.1 (s home) 239.02 495.38 P
(directory) 75.26 487.78 T
(.) 100.42 487.78 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-6) 428.02 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
314.36 458.44 555.66 796.26 R
N
1 10.72 Q
(Commands over Directories) 366.19 769.01 T
1 6.26 Q
(\245) 334.18 742.49 T
2 F
-0.13 (mkdir) 342.22 742.49 P
1 F
-0.13 ( makes a new directory) 359.95 742.49 P
-0.13 (, if you ha) 425.61 742.49 P
-0.13 (ve permission to do so) 453.77 742.49 P
-0.13 (. W) 516.63 742.49 P
-0.13 (ith) 526 742.49 P
(a simple pathname) 342.22 734.9 T
(,) 397.5 734.9 T
2 F
(mkdir) 400.98 734.9 T
1 F
( makes a new directory in your working) 418.7 734.9 T
(directory) 342.22 727.3 T
(.) 367.38 727.3 T
0 F
(% pwd) 342.22 715.58 T
(/tmp_mnt/homes/g) 342.22 706.37 T
(ankw) 389.47 706.37 T
(% ls -l) 342.22 697.17 T
(total 2) 342.22 687.96 T
(-rw-r) 342.22 678.76 T
(--r) 354.95 678.76 T
(-- 1 g) 361.07 678.76 T
(ankw 136 Sep 7 10:47 Readme) 374.59 678.76 T
(drwxr) 342.22 669.55 T
(-xr) 357.04 669.55 T
(-x 2 g) 364.21 669.55 T
(ankw 512 Aug 8 12:24 bin) 378.77 669.55 T
(% mkdir ne) 342.22 660.35 T
(wdir) 371.26 660.35 T
(% ls -l) 342.22 651.14 T
(total 3) 342.22 641.94 T
(-rw-r) 342.22 632.73 T
(--r) 354.95 632.73 T
(-- 1 g) 361.07 632.73 T
(ankw 136 Sep 7 10:47 Readme) 374.59 632.73 T
(drwxr) 342.22 623.53 T
(-xr) 357.04 623.53 T
(-x 2 g) 364.21 623.53 T
(ankw 512 Aug 8 12:24 bin) 378.77 623.53 T
(drwxr) 342.22 614.32 T
(-xr) 357.04 614.32 T
(-x 1 g) 364.21 614.32 T
(ankw 512 Sep 25 15:00 ne) 378.77 614.32 T
(wdir) 445.16 614.32 T
1 F
(\245) 334.18 590.2 T
2 F
(rmdir) 342.22 590.2 T
1 F
( deletes a directory) 359.24 590.2 T
(, again, if you ha) 413.38 590.2 T
(ve permission to do so) 461.52 590.2 T
(.) 524.9 590.2 T
0 F
(% rmdir ne) 342.22 578.48 T
(wdir) 370.21 578.48 T
(% ls -l) 342.22 569.28 T
(total 2) 342.22 560.07 T
(-rw-r) 342.22 550.87 T
(--r) 354.95 550.87 T
(-- 1 g) 361.07 550.87 T
(ankw 136 Sep 7 10:47 Readme) 374.59 550.87 T
(drwxr) 342.22 541.66 T
(-xr) 357.04 541.66 T
(-x 2 g) 364.21 541.66 T
(ankw 512 Aug 8 12:24 bin) 378.77 541.66 T
(% rmdir /usr) 342.22 532.46 T
(rmdir: /usr: Permission denied) 342.22 523.25 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-7) 153.02 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
39.35 59.96 280.65 397.78 R
N
1 10.72 Q
(Commands over Directories) 91.19 370.52 T
2 6.26 Q
(mv) 67.22 343.57 T
1 F
( can be used to move a \336le or \336les to another directory) 76.03 343.57 T
(. Starting) 231.19 343.57 T
(with:) 67.22 336.33 T
0 F
(% pwd) 67.22 327.2 T
(/staf) 67.22 318 T
(f/cs/horner) 77.83 318 T
(% date > ne) 67.22 308.79 T
(wdir/no) 96.82 308.79 T
(w) 116.13 308.79 T
(% mv ne) 67.22 234.9 T
(wdir/no) 89.3 234.9 T
(w .) 108.61 234.9 T
1 F
(Y) 67.22 169.7 T
(ou can move several \336les at a time using mv) 71 169.7 T
(. Read the man page) 197.9 169.7 T
(.) 257.01 169.7 T
(% mv memo* newdir) 67.22 154.06 T
(%mv memo1 memo2 newdir) 67.22 138.42 T
59.17 65.82 260.83 377.67 C
96.33 243.09 223.67 307.44 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.83 267.51 188.83 259.46 2 L
0.22 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
124.48 279.57 148.61 287.62 2 L
N
163.49 287.62 187.62 279.57 2 L
N
7 X
90 450 12.06 6.03 155.45 289.63 G
0 X
90 450 12.06 6.03 155.45 289.63 A
3 6.26 Q
(hor) 146.41 287.32 T
(ner) 155.6 287.32 T
155.45 283.59 155.45 275.55 2 L
N
7 X
90 450 12.06 6.03 187.62 273.54 G
0 X
90 450 12.06 6.03 187.62 273.54 A
(ne) 178.47 271.24 T
(wdir) 185.3 271.24 T
7 X
90 450 12.06 6.03 155.45 273.54 G
0 X
90 450 12.06 6.03 155.45 273.54 A
(lib) 152.32 271.24 T
7 X
90 450 12.06 6.03 122.38 273.54 G
0 X
90 450 12.06 6.03 122.38 273.54 A
(bin) 118.21 271.24 T
7 X
90 450 12.06 6.03 188.83 257.45 G
1.34 H
0 X
90 450 12.06 6.03 188.83 257.45 A
(no) 183.14 255.15 T
(w) 190 255.15 T
59.17 65.82 260.83 377.67 C
27 33.64 293 409.84 C
59.17 65.82 260.83 377.67 C
90.1 183.26 229.9 233.55 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
154.45 216.33 214.77 204.26 2 L
0.22 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
118.25 204.26 142.38 212.3 2 L
N
157.26 212.3 181.39 204.26 2 L
N
7 X
90 450 12.06 6.03 149.22 214.32 G
0 X
90 450 12.06 6.03 149.22 214.32 A
3 6.26 Q
(hor) 140.18 212.01 T
(ner) 149.38 212.01 T
149.22 208.28 149.22 200.24 2 L
N
7 X
90 450 12.06 6.03 181.39 198.23 G
0 X
90 450 12.06 6.03 181.39 198.23 A
(ne) 172.24 195.92 T
(wdir) 179.08 195.92 T
7 X
90 450 12.06 6.03 149.22 198.23 G
0 X
90 450 12.06 6.03 149.22 198.23 A
(lib) 146.09 195.92 T
7 X
90 450 12.06 6.03 116.15 198.23 G
0 X
90 450 12.06 6.03 116.15 198.23 A
(bin) 111.98 195.92 T
7 X
90 450 12.06 6.03 214.78 198.23 G
1.34 H
0 X
90 450 12.06 6.03 214.78 198.23 A
(no) 209.09 195.92 T
(w) 215.95 195.92 T
59.17 65.82 260.83 377.67 C
27 33.64 293 409.84 C
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-8) 428.02 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
314.36 59.96 555.66 397.78 R
N
1 10.72 Q
(Security and Access P) 354.18 370.52 T
(ermissions) 462.61 370.52 T
1 6.26 Q
(\245) 334.18 344.01 T
(There are three types of user:) 342.22 344.01 T
(\245) 342.22 331.05 T
(The owner of the \336le \050) 350.27 331.05 T
2 F
(user) 413.41 331.05 T
1 F
(\051) 425.56 331.05 T
(\245) 342.22 318.09 T
(The group of the \336le \050) 350.27 318.09 T
2 F
(group) 412.36 318.09 T
1 F
(\051) 429.04 318.09 T
(\245) 342.22 305.13 T
(Anyone else \050) 350.27 305.13 T
2 F
(other) 388.73 305.13 T
1 F
(\051) 403.43 305.13 T
(\245) 334.18 289.49 T
(There are three types of permission, independent of eac) 342.22 289.49 T
(h other:) 502.52 289.49 T
(\245) 342.22 276.53 T
(Read permission) 350.27 276.53 T
(\245) 342.22 263.57 T
(Write permission) 350.27 263.57 T
(\245) 342.22 250.62 T
(Execute permission) 350.27 250.62 T
(\245) 334.18 234.98 T
(Using \322) 342.22 234.98 T
2 F
(ls -l) 363.54 234.98 T
1 F
(\323 to see \336le permissions \050use \322ls -lg\323 to see groups) 374.31 234.98 T
(, too\051:) 515.62 234.98 T
(\245) 334.18 175.1 T
(The permissions are in four groups:) 342.22 175.1 T
(\245) 342.22 117.45 T
(The type is \322) 350.27 117.45 T
0 F
(-) 386.42 117.45 T
1 F
(\323 for regular \336les) 388.5 117.45 T
(, \322) 437.12 117.45 T
0 F
(d) 443.03 117.45 T
1 F
(\323 for directories and \322l\323 for) 446.16 117.45 T
(symbolic links) 350.27 109.86 T
(. There are a few other types that we\325ll ignore for) 391.36 109.86 T
(now) 350.27 102.26 T
(. See ls\0501\051 if you\325re interested.) 361.3 102.26 T
(\245) 342.22 89.3 T
(The next nine letters indicate if the \336le is readable) 350.27 89.3 T
(, writable or) 496.61 89.3 T
(executable for the owner of the \336le) 350.27 81.7 T
(, the \336le\325) 449.9 81.7 T
(s group) 474.55 81.7 T
(, or other) 495.75 81.7 T
(users) 350.27 74.11 T
(, respectively) 365.63 74.11 T
(.) 402.85 74.11 T
334.18 65.82 535.83 377.67 C
334.61 188.65 535.4 232.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.26 Q
0 X
0 0 0 1 0 0 0 K
(-rw-r) 362.18 222.18 T
(--r) 374.91 222.18 T
(--) 381.03 222.18 T
( 1 horner        136 Sep  7 10:47 READ: _ME) 389.89 222.18 T
1 F
(P) 339.6 204.15 T
(ermissions) 343.54 204.15 T
364.52 216.31 363.33 216.91 366.6 220.46 365.71 215.72 4 Y
0.22 H
0 Z
N
364.52 216.31 363.33 216.91 366.6 220.46 365.71 215.72 4 Y
V
362.76 212.78 364.48 216.21 2 L
2 Z
N
(Links) 382.87 202 T
(Owner) 407.64 197.98 T
392.13 216.63 391.03 217.37 394.71 220.49 393.24 215.89 4 Y
0 Z
N
392.13 216.63 391.03 217.37 394.71 220.49 393.24 215.89 4 Y
V
386.89 208.76 392.07 216.54 2 L
2 Z
N
409.25 216.31 408.06 215.72 407.18 220.46 410.44 216.91 4 Y
0 Z
N
409.25 216.31 408.06 215.72 407.18 220.46 410.44 216.91 4 Y
V
415.04 204.74 409.3 216.21 2 L
2 Z
N
(Size) 434.66 206.02 T
(Name) 483.41 200.13 T
430.67 217.26 429.73 216.32 427.39 220.54 431.61 218.2 4 Y
0 Z
N
430.67 217.26 429.73 216.32 427.39 220.54 431.61 218.2 4 Y
V
435.15 212.78 430.75 217.18 2 L
2 Z
N
488.65 215.93 487.36 215.61 487.53 220.43 489.94 216.26 4 Y
0 Z
N
488.65 215.93 487.36 215.61 487.53 220.43 489.94 216.26 4 Y
V
491.45 204.74 488.68 215.82 2 L
2 Z
N
(Last modi\336cation) 455.26 192.67 T
459.28 215.78 457.95 215.78 459.28 220.42 460.61 215.78 4 Y
0 Z
N
459.28 215.78 457.95 215.78 459.28 220.42 460.61 215.78 4 Y
V
459.28 196.7 459.28 215.67 2 L
2 Z
N
334.18 65.82 535.83 377.67 C
302.01 33.64 568.01 409.84 C
334.18 65.82 535.83 377.67 C
382.83 128.33 487.18 173.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10.72 Q
0 X
0 0 0 1 0 0 0 K
(-rw-r) 395.32 161.39 T
(--r) 417.14 161.39 T
(--) 427.64 161.39 T
1 6.26 Q
(Type) 386.85 142.12 T
396.66 152.41 395.47 153.01 398.74 156.56 397.85 151.82 4 Y
0.22 H
0 Z
N
396.66 152.41 395.47 153.01 398.74 156.56 397.85 151.82 4 Y
V
394.9 148.88 396.61 152.31 2 L
2 Z
N
(User) 406.96 134.08 T
408.56 148.12 407.29 147.7 407.09 152.52 409.82 148.54 4 Y
0 Z
N
408.56 148.12 407.29 147.7 407.09 152.52 409.82 148.54 4 Y
V
410.98 140.84 408.59 148.01 2 L
2 Z
N
180 270 6.03 4.02 404.95 156.93 A
270 360 6.03 4.02 404.95 156.93 A
180 270 6.03 4.02 417.01 156.93 A
270 360 6.03 4.02 417.02 156.93 A
180 270 6.03 4.02 429.08 156.93 A
270 360 6.03 4.02 429.08 156.93 A
(Group) 424.97 134.08 T
420.62 148.12 419.36 147.7 419.15 152.52 421.88 148.54 4 Y
0 Z
N
420.62 148.12 419.36 147.7 419.15 152.52 421.88 148.54 4 Y
V
423.05 140.84 420.66 148.01 2 L
2 Z
N
(Other) 450.26 134.08 T
438.68 153.36 437.74 152.42 435.4 156.64 439.62 154.3 4 Y
0 Z
N
438.68 153.36 437.74 152.42 435.4 156.64 439.62 154.3 4 Y
V
451.2 140.84 438.76 153.28 2 L
2 Z
N
334.18 65.82 535.83 377.67 C
302.01 33.64 568.01 409.84 C
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-9) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
39.35 458.44 280.65 796.26 R
N
1 10.72 Q
(Security and Access P) 79.17 769.01 T
(ermissions) 187.61 769.01 T
1 6.26 Q
(\245) 59.17 742.49 T
(Some examples) 67.22 742.49 T
5 F
(drwxr-xr-x) 67.22 731.11 T
( 1 horner 512) 104.75 731.11 T
(Jul 16 1992) 157.3 731.11 T
( bin) 198.59 731.11 T
(-rw-rw----  1 horner 1765 Sep 10 10:54 grades) 67.22 722.62 T
(-rwxr-xr-x  1 root) 67.22 714.13 T
(2656 Jul 22  1992 halt) 138.54 714.13 T
(-r--r--r--  1 horner) 67.22 705.63 T
(601 Jul 16 18:33 outline) 142.29 705.63 T
(-r-x--x--x  1 root) 67.22 697.14 T
(7980 Jul 22  1992 timedc) 138.54 697.14 T
1 F
(\245) 59.17 682.6 T
(Directory permissions) 67.22 682.6 T
(Access is similar to regular \336les) 67.22 666.96 T
(, except:) 158.94 666.96 T
(\245) 67.22 654.01 T
(The \336rst c) 75.26 654.01 T
(haracter in the access permission list is set to \322d\323 if a) 104.53 654.01 T
(\336le is a  directory) 75.26 646.41 T
(\245) 67.22 633.45 T
(\322) 75.26 633.45 T
2 F
(ls -ld) 77.69 633.45 T
1 F
(\323 lists a directory\325) 92.28 633.45 T
(s \322long\323 info list \050instead of the contents\051) 142.64 633.45 T
5 F
(% ls -ld newdir) 67.22 622.07 T
-0.09 (drwxr-xr-x  5 horner         512 Sep  7 10:47 newdir) 67.22 613.58 P
1 F
(\245) 67.22 601.72 T
(Read permission means that you can see what \336les are in the) 75.26 601.72 T
(directory) 75.26 594.12 T
(\245) 67.22 581.17 T
(Execute permission in a directory means you \336nd and do an) 75.26 581.17 T
2 F
(ls) 249.86 581.17 T
1 F
(on individual \336les in the directory) 75.26 573.57 T
5 F
(% ls -ld secret) 67.22 562.19 T
(drwx--x--x) 67.22 552.8 T
(  3 gankw) 104.75 552.8 T
( 512 Sep  5  1992 secret) 142.29 552.8 T
(% ls -l secret) 67.22 543.41 T
(secret unreadable) 67.22 534.03 T
(% ls -l secret/news) 67.22 524.64 T
(-rw-r--r--  1 gankw) 67.22 515.26 T
( 29 Sep  7  1992 secret/news) 142.29 515.26 T
1 F
(\245) 67.22 502.96 T
(Try \324more secret/news\325) 75.26 502.96 T
(\245) 67.22 490 T
(Whenever a \336le or directory inside of a directory is added to or) 75.26 490 T
(deleted from the directory) 75.26 482.4 T
(, its modi\336cation time will be updated.) 149.54 482.4 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-10) 427.13 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
314.36 458.44 555.66 796.26 R
N
1 10.72 Q
(Changing F) 368.32 769.01 T
(ile P) 426.61 769.01 T
(ermissions) 448.46 769.01 T
1 6.26 Q
(\245) 334.18 742.49 T
(The \322) 342.22 742.49 T
2 F
(c) 357.52 742.49 T
(hmod) 360.18 742.49 T
1 F
(\323 command is used to modify access permissions) 376.52 742.49 T
(\245) 334.18 726.85 T
2 F
(c) 342.22 726.85 T
(hmod) 344.89 726.85 T
1 F
( can only be used by the owner of a \336le) 361.22 726.85 T
(\245) 334.18 711.21 T
(The arguments are:) 342.22 711.21 T
0 F
(chmod) 342.22 695.57 T
1 F
([) 360.82 695.57 T
0 F
(ugoa) 362.9 695.57 T
1 F
(][) 375.06 695.57 T
0 F
(+-=) 379.23 695.57 T
1 F
(][) 388.37 695.57 T
0 F
(rwx) 392.53 695.57 T
1 F
(][,...]) 402.26 695.57 T
(In other words:) 342.22 679.93 T
(\245) 342.22 666.97 T
(Optionally one of the c) 350.27 666.97 T
(haracters \322u\323, \322g\323, \322o\323 or \322a\323:) 415.22 666.97 T
(\245) 350.27 655.36 T
2 F
(u) 358.31 655.36 T
1 F
( stands for user) 362.13 655.36 T
(, the owner of the \336le) 406.45 655.36 T
(\245) 350.27 643.74 T
2 F
(g) 358.31 643.74 T
1 F
( stands for the group owner of the \336le) 361.67 643.74 T
(\245) 350.27 632.12 T
2 F
(o) 358.31 632.12 T
1 F
( stands for users who are not either of the above) 361.44 632.12 T
(\245) 350.27 620.5 T
2 F
(a) 358.31 620.5 T
1 F
( stands for) 361.9 620.5 T
2 F
(all) 394.22 620.5 T
1 F
(\245) 342.22 607.54 T
(Optionally) 350.27 607.54 T
(, one of the c) 380.08 607.54 T
(haracters:) 416.18 607.54 T
(\245) 350.27 595.92 T
(+ meaning) 358.31 595.92 T
2 F
(add) 390.72 595.92 T
1 F
( the speci\336ed permission to the permissions) 401.96 595.92 T
(already granted) 358.31 588.33 T
(\245) 350.27 576.71 T
(- meaning) 358.31 576.71 T
2 F
(remove) 389.01 576.71 T
1 F
( the speci\336ed permission from the) 409.28 576.71 T
(permissions already granted) 358.31 569.11 T
(\245) 350.27 557.49 T
(= meaning) 358.31 557.49 T
2 F
(set) 390.72 557.49 T
1 F
( the permission as speci\336ed) 398.48 557.49 T
(\245) 342.22 544.54 T
-0.21 (Any combination of the c) 350.27 544.54 P
-0.21 (haracters) 420.98 544.54 P
2 F
-0.21 (r) 450.08 544.54 P
1 F
-0.21 (,) 452.23 544.54 P
2 F
-0.21 (w) 455.5 544.54 P
1 F
-0.21 (, or) 459.59 544.54 P
2 F
-0.21 (x) 470.29 544.54 P
1 F
-0.21 (, meaning) 473.42 544.54 P
2 F
-0.21 (read) 503.36 544.54 P
1 F
-0.21 (,) 516.33 544.54 P
2 F
-0.21 (write) 519.6 544.54 P
1 F
(or) 350.27 536.94 T
2 F
(execute) 357.91 536.94 T
1 F
( permission, respectively) 378.17 536.94 T
(\245) 334.18 521.3 T
(As an example) 342.22 521.3 T
(, to let anybody read or write the \336le \322) 384.52 521.3 T
0 F
(syslog) 494.02 521.3 T
1 F
(\323:) 510.01 521.3 T
0 F
(% chmod a+rw syslog) 342.22 509.58 T
(% ls -l syslog) 342.22 500.37 T
(-rw-rw-rw-  1 horner        471 Sep 22 10:57 syslog) 342.22 491.17 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-11) 152.12 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
39.35 59.96 280.65 397.78 R
N
1 10.72 Q
(Links) 145.8 370.52 T
1 6.26 Q
(\245) 59.17 344.01 T
(A) 67.22 344.01 T
2 F
(link) 73.47 344.01 T
1 F
( is a pointer to a \336le) 84.94 344.01 T
(.) 142.42 344.01 T
(\245) 59.17 328.37 T
-0.24 (In fact,) 67.22 328.37 P
2 F
-0.24 (all) 89.11 328.37 P
1 F
-0.24 ( \336lenames are just links to a \336le) 96.86 328.37 P
-0.24 (. Most \336les only ha) 187.8 328.37 P
-0.24 (ve one) 241.26 328.37 P
(link, hence:) 67.22 320.77 T
5 F
(drwxr-xr-x) 59.17 309.15 T
(1 horner) 100.46 309.15 T
(512) 153.01 309.15 T
(Sep 10 10:54 bin) 171.78 309.15 T
(-rw-rw----  1 horner) 59.17 301.56 T
(1765 Sep 10 10:54 grades) 153.01 301.56 T
(-rwxr-xr-x  1 root) 59.17 293.96 T
( 2656 Jul 22  1992 halt) 149.26 293.96 T
(-r--r--r--  1 horner) 59.17 286.36 T
( 601) 149.26 286.36 T
( Jul 16 18:33 outline) 168.03 286.36 T
(-r-x--x--x  1 root) 59.17 278.77 T
( 7980 Jul 22  1992 timedc) 149.26 278.77 T
1 F
(\245) 59.17 263.13 T
(Additional links to a \336le can be made to:) 67.22 263.13 T
(\245) 67.22 250.17 T
(Provide alternative organization) 75.26 250.17 T
(\245) 67.22 237.21 T
(Aid in sharing of \336les) 75.26 237.21 T
(\245) 59.17 221.57 T
(The \322ln\323 command is used to make new links:) 67.22 221.57 T
5 F
(% ln READ_ME readme) 67.22 210.19 T
(% ls -l) 67.22 201.7 T
(total 3) 67.22 193.2 T
-0.1 (-rw-r--r--  2 horner        136 Sep  7 10:47 READ_ME) 67.22 184.71 P
(drwxr-xr-x 1 horner        512 Jan 18  1994 bin) 67.22 176.22 T
(-rw-r--r--  2 horner        136 Sep  7 10:47 readme) 67.22 167.73 T
1 F
(\245) 67.22 155.87 T
-0.19 (This creates a new) 75.26 155.87 P
2 F
-0.19 (link) 130.23 155.87 P
1 F
-0.19 (, not a new \336le) 141.69 155.87 P
-0.19 (. Both links are equivalent) 183.11 155.87 P
(pointers to the \336le) 75.26 148.28 T
(.) 127.98 148.28 T
(\245) 67.22 135.32 T
(The last argument is the destination of the link and can be:) 75.26 135.32 T
(\245) 75.26 123.7 T
(A pathname of a \050new\051 regular \336le name) 83.31 123.7 T
(, or) 200.1 123.7 T
(\245) 75.26 112.08 T
(A pathname of an existing directory) 83.31 112.08 T
-0.16 (In the latter case) 75.26 100.46 P
-0.16 (, a link with the same) 124.15 100.46 P
2 F
-0.16 (basename) 187.88 100.46 P
1 F
-0.16 ( as the original) 216.26 100.46 P
(\336le is created in the directory) 75.26 92.87 T
(\245) 75.26 81.25 T
-0.01 (Elided \050left off\051 whic) 83.31 81.25 P
-0.01 (h is equivalent to giving a last argument) 141.71 81.25 P
(of \322) 83.31 73.65 T
0 F
(.) 92.69 73.65 T
1 F
(\323) 94.02 73.65 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-12) 427.13 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
314.36 59.96 555.66 397.78 R
N
1 6.26 Q
(\245) 334.18 373.5 T
-0.14 (The diagram in the previous slide is actually a simpli\336cation of the) 342.22 373.5 P
-0.35 (actual implementation. The directory entry doesn\325t directly point to) 342.22 365.9 P
(the physical address of the \336le but instead to a) 342.22 358.31 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(inode) 478.83 358.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( whic) 494.47 358.31 T
(h points) 509.61 358.31 T
(to the actual physical address of the \336le) 342.22 350.71 T
(\245) 334.18 339.09 T
(The link actually has two pieces of information:) 342.22 339.09 T
(\245) 342.22 326.13 T
(A name) 350.27 326.13 T
(\245) 342.22 313.17 T
(An inode number) 350.27 313.17 T
(\245) 334.18 297.54 T
-0.26 (The) 342.22 297.54 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
-0.26 (inode number) 354.83 297.54 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 ( is an index into a system table that has all of the) 394.54 297.54 P
(information about the \336le \050user) 342.22 289.94 T
(, size) 432.08 289.94 T
(, etc) 446.45 289.94 T
(.\051.) 458.16 289.94 T
5 F
(% ln newdir/now here) 342.22 278.22 T
1 F
(\245) 342.22 148.02 T
(Y) 350.27 148.02 T
(ou can use \322) 354.04 148.02 T
2 F
(ls -i) 388.57 148.02 T
1 F
(\323 to see if two links point to the same inode) 399.34 148.02 T
5 5.36 Q
(% ls -li newdir/now here) 342.22 137.2 T
(801983 -rw-r--r--  2 horner 29 Sep  8 13:05 here) 342.22 129.41 T
(801983 -rw-r--r--  2 horner 29 Sep  8 13:05 newdir/now) 342.22 121.62 T
1 6.26 Q
(\245) 334.18 107.22 T
-0.17 (So) 342.22 107.22 P
-0.17 (, using \322) 349.18 107.22 P
2 F
-0.17 (rm) 372.37 107.22 P
1 F
-0.17 (\323 actually only removes a link. When the last link to a) 380.71 107.22 P
(\336le is removed, the operating system actually removed the \336le) 342.22 99.62 T
(.) 521.58 99.62 T
334.18 65.82 535.83 377.67 C
365.11 158.89 504.91 276.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
377.17 164.25 425.43 204.47 R
7 X
0 0 0 1 0 0 0 K
V
0.22 H
2 Z
0 X
N
0 1 1 0 1 0 0 K
445.54 164.25 497.82 204.47 R
7 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
457.61 244.69 457.61 232.62 2 L
0 0 0 1 0 0 0 K
N
429.45 264.35 489.78 252.28 2 L
N
393.26 252.28 417.39 260.33 2 L
N
432.27 260.33 456.4 252.28 2 L
N
7 X
90 450 12.06 6.03 424.22 262.34 G
0 X
90 450 12.06 6.03 424.22 262.34 A
3 6.26 Q
(hor) 415.18 260.03 T
(ner) 424.38 260.03 T
424.22 256.31 424.22 248.26 2 L
N
7 X
90 450 12.06 6.03 456.4 246.25 G
0 X
90 450 12.06 6.03 456.4 246.25 A
(ne) 447.25 243.95 T
(wdir) 454.08 243.95 T
7 X
90 450 12.06 6.03 424.22 246.25 G
0 X
90 450 12.06 6.03 424.22 246.25 A
(lib) 421.1 243.95 T
7 X
90 450 12.06 6.03 391.16 246.25 G
0 X
90 450 12.06 6.03 391.16 246.25 A
(bin) 386.98 243.95 T
7 X
90 450 12.06 6.03 489.78 246.25 G
1.34 H
0 X
90 450 12.06 6.03 489.78 246.25 A
(here) 483.52 243.95 T
7 X
90 450 12.06 6.03 457.61 230.61 G
0 X
90 450 12.06 6.03 457.61 230.61 A
(no) 451.92 228.31 T
(w) 458.78 228.31 T
497.82 220.56 377.17 220.56 2 L
0.22 H
N
1 F
(Logical) 377.17 224.58 T
(Physical) 377.17 213.5 T
449.56 168.28 493.8 200.45 R
7 X
V
0 1 1 0 1 0 0 K
3 F
0 X
0 1 1 0 1 0 0 K
(inode: 1234) 449.56 195.96 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(user) 449.56 189.15 T
(: 5432) 461.92 189.15 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(siz) 449.56 181.55 T
(e: ...) 457.11 181.55 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(address: ....) 449.56 173.96 T
0 0 0 1 0 0 0 K
381.19 168.28 421.41 200.45 R
7 X
0 0 0 1 0 0 0 K
V
1 F
0 X
(Now is the) 381.19 196.28 T
(time for all) 381.19 188.68 T
(good men to) 381.19 181.09 T
(come to the) 381.19 173.49 T
(...) 414.1 173.49 T
463.64 210.41 464.98 210.44 463.76 205.77 462.31 210.38 4 Y
0 Z
N
463.64 210.41 464.98 210.44 463.76 205.77 462.31 210.38 4 Y
V
457.61 224.58 M
 457.97 219.53 463.52 215.5 463.64 210.52 D
2 Z
N
479.48 210.85 480.82 210.83 479.41 206.22 478.15 210.88 4 Y
0 Z
N
479.48 210.85 480.82 210.83 479.41 206.22 478.15 210.88 4 Y
V
489.78 240.67 M
 489.78 226.79 479.64 221.1 479.49 210.97 D
2 Z
N
430.37 199.45 430.11 198.15 425.83 200.37 430.64 200.75 4 Y
0 Z
N
430.37 199.45 430.11 198.15 425.83 200.37 430.64 200.75 4 Y
V
445.54 176.32 M
 435.52 177.06 439.49 197.61 430.48 199.43 D
2 Z
N
334.18 65.82 535.83 377.67 C
302.01 33.64 568.01 409.84 C
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-13) 152.12 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
39.35 458.44 280.65 796.26 R
N
1 10.72 Q
(Symbolic Links) 121.86 769.01 T
1 6.26 Q
(\245) 59.17 742.49 T
-0.02 (A symbolic link is a pointer to a pathname) 67.22 742.49 P
-0.02 (, not a pointer to the \336le) 189.51 742.49 P
(itself) 67.22 734.9 T
(.) 81.47 734.9 T
(\245) 67.22 721.94 T
5 F
(ln -s) 75.26 721.94 T
6 F
(original) 97.78 721.94 T
(target) 131.57 721.94 T
1 F
(  creates a \322symbolic link\323) 154.09 721.94 T
(\245) 67.22 708.98 T
(A symbolic link is not equivalent to a hard link. The symbolic) 75.26 708.98 T
(link has a different inode!) 75.26 701.38 T
(\245) 59.17 685.74 T
(Practical differences between hard and symbolic links:) 67.22 685.74 T
(\245) 67.22 672.78 T
(Y) 75.26 672.78 T
(ou can\325t make a hard link to a directory) 79.04 672.78 T
(, but you can make a) 192.39 672.78 T
(symbolic link to a directory) 75.26 665.19 T
(\245) 67.22 652.23 T
(Y) 75.26 652.23 T
(ou can also make a symbolic link across \336le systems) 79.04 652.23 T
(\245) 67.22 639.27 T
-0.27 (In some shells) 75.26 639.27 P
-0.27 (,) 115.81 639.27 P
2 F
-0.27 (cd) 119.02 639.27 P
1 F
-0.27 ( and) 125.62 639.27 P
2 F
-0.27 (pwd) 139.45 639.27 P
1 F
-0.27 ( only pa) 151.73 639.27 P
-0.27 (y attention to hard links) 173.96 639.27 P
-0.27 (. This) 243.29 639.27 P
(can be confusing\311) 75.26 631.67 T
(\245) 67.22 618.71 T
(There is no w) 75.26 618.71 T
(a) 114.08 618.71 T
(y to tell how many symbolic links there are to a) 117.5 618.71 T
(\336le) 75.26 611.12 T
(\245) 59.17 595.48 T
(Hard link points to the inode of a \336le) 67.22 595.48 T
(, whereas a symbolic link) 173.59 595.48 T
(records the pathname of the source in its directory entry) 67.22 587.88 T
1 1 0 0 0 0 1 K
5 F
1 1 0 0 0 0 1 K
($ ln file.a file.b) 67.22 567.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
($ ln -s file.a file.c) 67.22 558.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
($ ls -li) 67.22 550.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(1234 ... ...) 67.22 541.82 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(file.a) 116.01 541.82 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(1234 ... ...) 67.22 533.32 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(file.b) 113.07 533.32 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(4567 ... ...) 67.22 524.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(file.c -> file.a) 113.07 524.83 T
0 0 0 1 0 0 0 K
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-14) 427.13 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
314.36 458.44 555.66 796.26 R
N
1 10.72 Q
(Symbolic Links) 396.86 769.01 T
1 6.26 Q
(\245) 334.18 742.49 T
(The most important differences between hard and symbolic links) 342.22 742.49 T
(are when a link is) 342.22 734.9 T
2 F
(removed) 395.76 734.9 T
1 F
(. F) 419.85 734.9 T
(or a hard link:) 427.16 734.9 T
5 F
(% echo 1234 > first) 342.22 723.51 T
(% ln first second) 342.22 715.02 T
(% rm first) 342.22 706.53 T
(% cat second) 342.22 698.04 T
(1234) 342.22 689.54 T
(% echo 5678 > first) 342.22 681.05 T
(% cat first) 342.22 672.56 T
(5678) 342.22 664.07 T
(% cat second) 342.22 655.58 T
(1234) 342.22 647.08 T
1 F
(\245) 334.18 623.34 T
(But for a symbolic link:) 342.22 623.34 T
5 F
(% echo 1234 > first) 342.22 611.96 T
(% ln -s first second) 342.22 603.47 T
(% rm first) 342.22 594.98 T
(% cat second) 342.22 586.48 T
(second: No such file or directory) 342.22 577.99 T
(% echo 5678 > first) 342.22 569.5 T
(% cat first) 342.22 561.01 T
(5678) 342.22 552.52 T
(% cat second) 342.22 544.02 T
(5678) 342.22 535.53 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-15) 152.12 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
39.35 59.96 280.65 397.78 R
N
1 10.72 Q
(Odds and Ends) 122.17 370.52 T
1 6.26 Q
(\245) 59.17 344.01 T
(Redirection) 67.22 344.01 T
(Y) 67.22 328.37 T
(ou already know about input redirection \050) 71 328.37 T
2 F
(cat < \336le) 191.26 328.37 T
1 F
(\051 and output) 215.78 328.37 T
(redirection \050) 67.22 320.77 T
2 F
(cat > \336le) 102.55 320.77 T
1 F
(\051. Y) 127.07 320.77 T
(ou can also) 136.41 320.77 T
2 F
(append) 170.13 320.77 T
1 F
( to a \336le using \322>>\323:) 191.32 320.77 T
5 F
(% date > wholist) 75.26 309.15 T
(% who >> wholist) 75.26 301.56 T
1 F
(\245) 59.17 285.92 T
(Simple \336le pattern matc) 67.22 285.92 T
(hing) 137.39 285.92 T
(\245) 67.22 272.96 T
(The pattern \322*\323 matc) 75.26 272.96 T
(hes any number of any c) 135.47 272.96 T
(haracter:) 205.87 272.96 T
5 F
(% ls /etc/pass*) 75.26 261.58 T
1 F
(\336nds all \336les in) 75.26 251.06 T
0 F
(/etc) 121.38 251.06 T
1 F
( that start with \322) 130.41 251.06 T
0 F
(pass) 179.09 251.06 T
1 F
(\323) 189.86 251.06 T
(\245) 67.22 238.1 T
(The pattern \322?\323 matc) 75.26 238.1 T
(hes any single c) 135.12 238.1 T
(haracter) 180.72 238.1 T
(. So:) 204.77 238.1 T
5 F
(% ls -l .??) 75.26 226.72 T
1 F
(lists all of the \336les in the working directory that ha) 75.26 216.2 T
(ve three) 222.81 216.2 T
(c) 75.26 208.61 T
(haracter names and that start with the c) 78 208.61 T
(haracter \322.) 196.02 208.61 T
(\323.) 226.37 208.61 T
FMENDPAGE
%%EndPage: "mini" 4
%%Trailer
%%BoundingBox: 0 0 595.01 841.97
%%PageOrder: Ascend
%%Pages: 4
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Italic
%%+ Helvetica
%%+ Helvetica-Bold
%%+ Courier
%%+ Courier-Oblique
%%EOF
