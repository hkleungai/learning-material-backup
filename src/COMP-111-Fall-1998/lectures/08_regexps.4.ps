%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 14 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 447.97 293.15 792.39 C
0 0 0 1 0 0 0 K
42.66 487.1 277.49 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(1) 159.2 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 502.76 261.83 745.42 R
7 X
V
1 10.44 Q
0 X
(Regular Expressions) 110.21 738.46 T
2 4.35 Q
(\245) 58.31 712.66 T
1 6.09 Q
-0.21 (A) 66.14 712.66 P
3 F
-0.21 (regular expression) 72.02 712.66 P
1 F
-0.21 ( is a pattern description using a \322meta\323 language) 122.97 712.66 P
-0.21 (,) 258.66 712.66 P
(that is) 66.14 705.27 T
(, a language that you use to describe particular patterns of) 84.26 705.27 T
(interest. The basic elements regular expressions are:) 66.14 697.87 T
4 F
(.) 70.06 686.57 T
1 F
(Matc) 89.62 686.57 T
(hes any single c) 103.79 686.57 T
(haracter) 148.17 686.57 T
4 F
(*) 70.06 678.3 T
1 F
-0.14 (Matc) 89.62 678.3 P
-0.14 (hes zero or more occurrences of the preceding expression) 103.79 678.3 P
4 F
(^) 70.06 670.04 T
1 F
(Matc) 89.62 670.04 T
(hes the beginning of the line) 103.79 670.04 T
4 F
($) 70.06 661.78 T
1 F
(Matc) 89.62 661.78 T
(hes the end of the line) 103.79 661.78 T
4 F
([]) 70.06 653.52 T
1 F
(Matc) 89.62 653.52 T
(hes any c) 103.79 653.52 T
(haracter within the brac) 129.79 653.52 T
(kets) 198.52 653.52 T
4 F
([^]) 70.06 645.25 T
1 F
(Matc) 89.62 645.25 T
(hes any c) 103.79 645.25 T
(haracter) 129.79 645.25 T
3 F
(except) 155.49 645.25 T
1 F
( those within the brac) 172.28 645.25 T
(kets) 233.7 645.25 T
4 F
(\134) 70.06 636.99 T
3 F
(c) 73.74 636.99 T
1 F
(Matc) 89.62 636.99 T
(hes the c) 103.79 636.99 T
(haracter) 128.55 636.99 T
3 F
(c) 154.25 636.99 T
1 F
( literally) 156.95 636.99 T
(, even if it\325) 180.33 636.99 T
(s a special) 209.5 636.99 T
(c) 89.62 629.6 T
(haracter) 92.29 629.6 T
(Any non-special c) 66.14 614.38 T
(haracter matc) 115.36 614.38 T
(hes the c) 154.9 614.38 T
(haracter) 179.66 614.38 T
(.) 203.06 614.38 T
2 4.35 Q
(\245) 58.31 599.16 T
1 6.09 Q
(Programs that use regular expressions:) 66.14 599.16 T
3 F
(sed) 70.06 587.85 T
1 F
(Stream editor\321an editor usable in a pipeline) 97.45 587.85 T
3 F
(awk) 70.06 579.59 T
1 F
(P) 97.45 579.59 T
(attern scanning and processing language) 101.29 579.59 T
3 F
(ex) 70.06 571.33 T
1 F
(UCB line\320oriented text editor) 97.45 571.33 T
3 F
(vi) 70.06 563.06 T
1 F
(UCB full\320) 97.45 563.06 T
(screen text editor) 125.87 563.06 T
3 F
(emacs) 70.06 554.8 T
1 F
(GNU full-screen text editor) 97.45 554.8 T
3 F
(lex) 70.06 546.54 T
1 F
(Lexical analysis program) 97.45 546.54 T
3 F
(grep) 70.06 538.28 T
1 F
(Searc) 97.45 538.28 T
(h a \336le for a pattern) 113.08 538.28 T
3 F
(egrep) 70.06 530.01 T
1 F
(Extended grep) 97.45 530.01 T
(and so on\311) 66.14 514.79 T
0 0 0 1 0 0 0 K
302.15 447.97 568.29 792.39 C
0 0 0 1 0 0 0 K
317.81 487.1 552.64 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(2) 434.35 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 502.76 536.98 745.42 R
7 X
V
1 10.44 Q
0 X
(Examples with \322) 361.35 738.46 T
5 F
(.) 440.61 738.46 T
1 F
(\323, \322) 446.49 738.46 T
5 F
(^) 460.41 738.46 T
1 F
(\323 and \322) 466.67 738.46 T
5 F
($) 498.77 738.46 T
1 F
(\323) 505.03 738.46 T
2 4.35 Q
(\245) 333.46 712.66 T
1 6.09 Q
(F) 341.29 712.66 T
(ind the words in) 345.29 712.66 T
0 F
(/usr/dict/w) 392.76 712.66 T
(ords) 418.74 712.66 T
1 F
( that are exactly two letters long \050i.e) 429.23 712.66 T
(.) 530.94 712.66 T
(all of the lines that contain exactly two c) 341.29 705.27 T
(haracters:) 455.14 705.27 T
6 F
($ grep \325^..$\325 /usr/dict/words) 341.29 694.19 T
1 F
(Y) 341.29 680.04 T
(ou can read this pattern as:) 344.97 680.04 T
5 F
(^) 345.2 668.74 T
1 F
(The beginning of the line\311) 364.77 668.74 T
5 F
(.) 345.2 660.47 T
1 F
(followed by any single c) 364.77 660.47 T
(haracter except newline\311) 431.15 660.47 T
5 F
(.) 345.2 652.21 T
1 F
(followed by another single c) 364.77 652.21 T
(haracter except newline\311) 442.76 652.21 T
5 F
($) 345.2 643.95 T
1 F
(followed by the end of the line) 364.77 643.95 T
(.) 448.89 643.95 T
(Note that this is not at all the same as:) 341.29 628.73 T
6 F
($ grep \325..\325 /usr/dict/words) 341.29 617.65 T
1 F
(whic) 341.29 603.5 T
(h would \336nd all of the lines in) 354.32 603.5 T
0 F
(/usr/dict/w) 439.91 603.5 T
(ords) 465.9 603.5 T
1 F
( that contain at least) 476.38 603.5 T
(two c) 341.29 596.11 T
(haracters) 355.79 596.11 T
(.) 382.47 596.11 T
2 4.35 Q
(\245) 333.46 580.89 T
1 6.09 Q
(F) 341.29 580.89 T
(ind all of the words in) 345.29 580.89 T
0 F
(/usr/dict/w) 408.44 580.89 T
(ords) 434.42 580.89 T
1 F
( that are \336ve letters long) 444.9 580.89 T
(, with) 514.44 580.89 T
(the second letter \322a\323 and the last letter \322e\323) 341.29 573.5 T
0 F
(:) 459.8 573.5 T
6 F
($ grep \325^.a..e$\325) 341.29 562.42 T
1 F
-0.06 (or) 341.29 548.27 P
-0.06 (, to \336nd the words that are) 346.43 548.27 P
3 F
-0.06 (at least) 422.76 548.27 P
1 F
-0.06 ( \336ve letters long) 443.1 548.27 P
-0.06 (, with the second) 488.08 548.27 P
(letter an \322a\323 and the \336fth letter an \322e\323:) 341.29 540.88 T
6 F
($ grep \325^.a..e\325) 341.29 529.8 T
0 0 0 1 0 0 0 K
27 49.52 293.15 393.94 C
0 0 0 1 0 0 0 K
42.66 88.66 277.49 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(3) 159.2 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 104.31 261.83 346.97 R
7 X
V
1 10.44 Q
0 X
(Using \322) 107.83 340.01 T
5 F
(*) 143.4 340.01 T
1 F
(\323, \322) 149.66 340.01 T
5 F
(?) 163.58 340.01 T
1 F
(\323 and \322) 169.84 340.01 T
4 F
(+) 201.94 340.01 T
1 F
(\323) 208.26 340.01 T
2 4.35 Q
(\245) 58.31 314.21 T
1 6.09 Q
(The \322) 66.14 314.21 T
5 F
(*) 81.03 314.21 T
1 F
(\323 c) 84.68 314.21 T
(haracter matc) 91.4 314.21 T
(hes zero or more occurrences of the previous) 130.93 314.21 T
(expression. So the following \336nds all of the words that start with an) 66.14 306.82 T
(\322a\323 and end with \322e\323, no matter how long they are:) 66.14 299.43 T
6 F
($ grep \325^a.*e$\325 /usr/dict/words) 66.14 288.35 T
2 4.35 Q
(\245) 58.31 274.2 T
1 6.09 Q
(Y) 66.14 274.2 T
(ou could do something similar to \336nd words that start with an \322a\323,) 69.82 274.2 T
(and ha) 66.14 266.81 T
(ve an \322e\323 in the second to the last position, but that also) 85.48 266.81 T
(contain a \322p\323:) 66.14 259.42 T
6 F
($ grep \325^a.*p.*e.$\325) 66.14 248.34 T
2 4.35 Q
(\245) 58.31 234.19 T
1 6.09 Q
(Or words that ha) 66.14 234.19 T
(ve any number of the letter \322a\323, followed by any) 114.34 234.19 T
(number of the letter \322p\323, followed by at least one more letter) 66.14 226.8 T
(, and) 234.34 226.8 T
(ending with the letter \322e\323:) 66.14 219.41 T
6 F
($ grep \325aa*pp*..*e$) 66.14 208.33 T
1 F
(Note the need to double the \322a\323, \322p\323 and \322.) 66.14 194.18 T
(\323 to sa) 182.86 194.18 T
(y \322one or more) 200.17 194.18 T
(occurrences\323. Several programs \050) 66.14 186.79 T
3 F
(egrep) 158.24 186.79 T
1 F
(,) 173.01 186.79 T
3 F
(awk) 176.39 186.79 T
1 F
(, etc) 188.01 186.79 T
(.\051 provide the) 199.4 186.79 T
(following in addition to \322*\323:) 66.14 179.4 T
4 F
(?) 70.06 168.09 T
1 F
(Matc) 89.62 168.09 T
(hes zero or one occurrences of the preceding expression) 103.79 168.09 T
4 F
(+) 70.06 159.83 T
1 F
(Matc) 89.62 159.83 T
(hes one or more occurrences of the preceding expression) 103.79 159.83 T
(So that you could sa) 66.14 144.61 T
(y:) 122.69 144.61 T
6 F
($ egrep \325^a+p+.+e$\325) 66.14 133.53 T
1 F
(instead.) 66.14 119.38 T
0 0 0 1 0 0 0 K
302.15 49.52 568.29 393.94 C
0 0 0 1 0 0 0 K
317.81 88.66 552.64 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(4) 434.35 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 104.31 536.98 346.97 R
7 X
V
1 10.44 Q
0 X
(Character Classes) 391.25 340.01 T
2 4.35 Q
(\245) 333.46 314.21 T
1 6.09 Q
(Y) 341.29 314.21 T
(ou can matc) 344.97 314.21 T
(h any of a group \050c) 378.75 314.21 T
(lass\051 of c) 430.68 314.21 T
(haracters by enc) 454.77 314.21 T
(losing the) 501.06 314.21 T
(c) 341.29 306.82 T
(haracters in brac) 343.95 306.82 T
(kets) 391.94 306.82 T
(. The following \336nds any word that starts with) 403.63 306.82 T
(a vowel and is exactly \336ve letters long:) 341.29 299.43 T
6 F
($ grep \325^[aeiou]....$\325) 341.29 288.35 T
2 4.35 Q
(\245) 333.46 274.2 T
1 6.09 Q
(This is considered to be \322an expression\323, so you can use the \322*\323, \322?\323) 341.29 274.2 T
(and \322+\323 after it. The following \336nds any word that consists of only) 341.29 266.81 T
(vowels:) 341.29 259.42 T
6 F
($ grep \325^[aeiou]*$\325) 341.29 248.34 T
2 4.35 Q
(\245) 333.46 234.19 T
1 6.09 Q
(Y) 341.29 234.19 T
(ou can matc) 344.97 234.19 T
(h any single c) 378.75 234.19 T
(haracter) 417.27 234.19 T
3 F
(except) 442.98 234.19 T
1 F
( a speci\336ed group by) 459.77 234.19 T
(putting a carat immediately after the left brac) 341.29 226.8 T
(ket. This pattern \336nds) 471.26 226.8 T
-0.21 (any word that starts with anything but a vowel, and then has nothing) 341.29 219.41 P
(but vowels after that:) 341.29 212.01 T
6 F
($ grep \325^[^aeiou][aeiou]*$\325) 341.29 200.93 T
1 F
(Note that the carat) 341.29 186.79 T
3 F
(outside) 397 186.79 T
1 F
( of the brac) 417.06 186.79 T
(kets means something) 448.47 186.79 T
3 F
(completel) 341.29 179.4 T
(y) 367.49 179.4 T
1 F
( different than the carat) 370.53 179.4 T
3 F
(inside) 440.21 179.4 T
1 F
( the brac) 457.11 179.4 T
(kets!) 481.76 179.4 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 447.97 293.15 792.39 C
0 0 0 1 0 0 0 K
42.66 487.1 277.49 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(5) 159.2 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 502.76 261.83 745.42 R
7 X
V
1 10.44 Q
0 X
(Ranges in Character Classes) 90.68 738.46 T
2 4.35 Q
(\245) 58.31 712.66 T
1 6.09 Q
(Y) 66.14 712.66 T
(ou can give a range of c) 69.82 712.66 T
(haracters that ha) 135.29 712.66 T
(ve an implicit order using) 184.39 712.66 T
(the \322) 66.14 705.27 T
4 F
(-) 79.33 705.27 T
1 F
(\323 c) 81.36 705.27 T
(haracter) 88.08 705.27 T
(. This:) 111.49 705.27 T
6 F
($ grep \325[0123456789]\325) 66.14 694.19 T
1 F
(is exactly the same as this:) 66.14 680.04 T
6 F
($ grep \325[0-9]\325) 66.14 668.97 T
2 4.35 Q
(\245) 58.31 654.82 T
1 6.09 Q
(If you w) 66.14 654.82 T
(ant to put either a \322-\323 or a \322]\323 as part of a c) 88.69 654.82 T
(haracter c) 207.28 654.82 T
(lass) 235.64 654.82 T
(, you) 246.43 654.82 T
(can do so by making them the \336rst c) 66.14 647.43 T
(haracter after the left brac) 167.81 647.43 T
(ket.) 242.74 647.43 T
(There\325) 66.14 640.03 T
(s no easy w) 83.8 640.03 T
(a) 115.61 640.03 T
(y to specify a c) 118.93 640.03 T
(haracter c) 159.71 640.03 T
(lass with) 188.07 640.03 T
3 F
(both) 215.14 640.03 T
1 F
(.) 227.43 640.03 T
2 4.35 Q
(\245) 58.31 624.81 T
1 6.09 Q
(Y) 66.14 624.81 T
(ou can mix ranges and lists inside of the brac) 69.82 624.81 T
(kets:) 196.86 624.81 T
6 F
($ grep \325^[^0-9a-z_@/]\325) 66.14 613.73 T
1 F
-0.03 (\336nds lines that start with anything except a lower case letter) 66.14 599.59 P
-0.03 (, a digit,) 237.1 599.59 P
(or the c) 66.14 592.19 T
(haracters \322) 87.07 592.19 T
6 F
(_) 117.96 592.19 T
1 F
(\323, \322) 121.61 592.19 T
6 F
(@) 129.73 592.19 T
1 F
(\323 or \322) 133.39 592.19 T
6 F
(/) 147.26 592.19 T
1 F
(\323.) 150.91 592.19 T
0 0 0 1 0 0 0 K
302.15 447.97 568.29 792.39 C
0 0 0 1 0 0 0 K
317.81 487.1 552.64 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(6) 434.35 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 502.76 536.98 745.42 R
7 X
V
1 10.44 Q
0 X
(Basic) 412.9 738.46 T
3 F
(sed) 441.9 738.46 T
2 4.35 Q
(\245) 333.46 712.66 T
3 6.09 Q
-0.04 (Sed) 341.29 712.66 P
1 F
-0.04 ( is a stream editor) 351.77 712.66 P
-0.04 (. It has lots of commands) 402.18 712.66 P
-0.04 (. The basic idea is that) 471.95 712.66 P
-0.26 (it repeats eac) 341.29 705.27 P
-0.26 (h command on eac) 378.38 705.27 P
-0.26 (h line) 429.42 705.27 P
-0.26 (. Y) 445.05 705.27 P
-0.26 (ou really only need a few) 451.85 705.27 P
-0.26 (, with) 519.69 705.27 P
(some variations) 341.29 697.87 T
(.) 385.68 697.87 T
2 4.35 Q
(\245) 333.46 682.65 T
1 6.09 Q
(How to invoke sed?) 341.29 682.65 T
2 4.35 Q
(\245) 341.29 670.04 T
1 6.09 Q
(% some-command | sed \324s/old/new/\325 | other) 349.12 670.04 T
(-command) 469.59 670.04 T
2 4.35 Q
(\245) 341.29 657.43 T
1 6.09 Q
(% sed \324s/old/new/\325 my\336le) 349.12 657.43 T
2 4.35 Q
(\245) 341.29 644.82 T
1 6.09 Q
(% sed -e \324s/old/new/\325 -e \324/bad/d\325 my\336le) 349.12 644.82 T
2 4.35 Q
(\245) 341.29 632.21 T
1 6.09 Q
(% sed -f script\336le my\336le) 349.12 632.21 T
2 4.35 Q
(\245) 333.46 616.99 T
1 6.09 Q
(Syntax of sed commands:) 341.29 616.99 T
2 4.35 Q
(\245) 341.29 604.38 T
1 6.09 Q
([address][,address][!] command [arguments]) 349.12 604.38 T
2 4.35 Q
(\245) 349.12 593.07 T
1 6.09 Q
(where an address can be eith a line number) 356.94 593.07 T
(, the symbol $ \050for) 479.24 593.07 T
(last line\051, or a regular expression \050/pattern/\051) 356.94 585.68 T
0 0 0 1 0 0 0 K
27 49.52 293.15 393.94 C
0 0 0 1 0 0 0 K
42.66 88.66 277.49 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(7) 159.2 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 104.31 261.83 346.97 R
7 X
V
1 10.44 Q
0 X
(Basic) 137.75 340.01 T
3 F
(sed) 166.75 340.01 T
2 4.35 Q
(\245) 58.31 314.21 T
1 6.09 Q
(Simple examples:) 66.14 314.21 T
6 F
($ cat new) 66.14 303.13 T
(Line one.) 66.14 294.87 T
(The second line.) 66.14 286.61 T
(The third.) 66.14 278.34 T
(This is line four.) 66.14 270.08 T
(Five.) 66.14 261.81 T
(This is the sixth sentence.) 66.14 253.55 T
(This is line seven.) 66.14 245.28 T
(Eighth and last.) 66.14 237.02 T
($ sed \324/line/ p\325 new) 66.14 220.49 T
(Line one.) 66.14 212.23 T
(The second line.) 66.14 203.96 T
(The second line.) 66.14 195.7 T
(The third.) 66.14 187.43 T
(This is line four.) 66.14 179.17 T
(This is line four.) 66.14 170.9 T
(.) 66.14 162.64 T
(.) 66.14 154.38 T
(.) 66.14 146.11 T
0 0 0 1 0 0 0 K
302.15 49.52 568.29 393.94 C
0 0 0 1 0 0 0 K
317.81 88.66 552.64 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(8) 434.35 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 104.31 536.98 346.97 R
7 X
V
1 10.44 Q
0 X
(Basic) 412.9 340.01 T
3 F
(sed) 441.9 340.01 T
6 6.09 Q
($ sed -n \325/line/ p\325 new) 341.29 320.09 T
(The second line.) 341.29 311.83 T
(This is line four.) 341.29 303.56 T
(This is line seven.) 341.29 295.3 T
($ sed -n \3253,6 p\325 new) 341.29 278.77 T
(The third.) 341.29 270.51 T
(This is line four.) 341.29 262.24 T
(Five.) 341.29 253.98 T
(This is the sixth sentence.) 341.29 245.71 T
($ cat append-demo) 341.29 229.18 T
(2 a\134) 341.29 220.92 T
(AFTER.) 341.29 212.66 T
($ sed -f append-demo new) 341.29 204.39 T
(Line one.) 341.29 196.13 T
(The second line.) 341.29 187.86 T
(AFTER.) 341.29 179.6 T
(The third.) 341.29 171.33 T
(This is line four.) 341.29 163.07 T
(.) 341.29 154.81 T
(.) 341.29 146.54 T
(.) 341.29 138.28 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 447.97 293.15 792.39 C
0 0 0 1 0 0 0 K
42.66 487.1 277.49 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(9) 159.2 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 502.76 261.83 745.42 R
7 X
V
1 10.44 Q
0 X
(Basic) 141.67 737.73 T
3 F
(sed) 170.66 737.73 T
6 6.09 Q
($ cat insert-demo) 66.14 717.41 T
(/This/ i\134) 66.14 709.14 T
(BEFORE.) 66.14 700.88 T
($ sed -f insert-demo new) 66.14 692.61 T
(Line one.) 66.14 684.35 T
(The second line.) 66.14 676.08 T
(The third.) 66.14 667.82 T
(BEFORE.) 66.14 659.56 T
(This is line four.) 66.14 651.29 T
(Five.) 66.14 643.03 T
(BEFORE.) 66.14 634.76 T
(This is the sixth sentence.) 66.14 626.5 T
(...) 66.14 618.23 T
($ cat change-demo) 66.14 601.71 T
(2,4 c\134) 66.14 593.44 T
(SED WILL INSERT THESE\134) 66.14 585.18 T
(THREE LINES IN PLACE\134) 66.14 576.91 T
(OF THE SELECTED LINES.) 66.14 568.65 T
($ sed -f change-demo new) 66.14 560.38 T
(Line one.) 66.14 552.12 T
(SED WILL INSERT THESE) 66.14 543.85 T
(THREE LINES IN PLACE) 66.14 535.59 T
(OF THE SELECTED LINES.) 66.14 527.33 T
(Five.) 66.14 519.06 T
1 10.44 Q
(Basic) 141.67 505.2 T
3 F
(sed) 170.66 505.2 T
0 0 0 1 0 0 0 K
302.15 447.97 568.29 792.39 C
0 0 0 1 0 0 0 K
317.81 487.1 552.64 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(10) 433.48 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 502.76 536.98 745.42 R
7 X
V
6 6.09 Q
0 X
($ cat subs-demo) 341.29 733.33 T
(s/line/sentence/p) 341.29 725.06 T
($sed -n -f subs-demo new) 341.29 716.8 T
(The second sentence) 341.29 708.53 T
(This is sentence four.) 341.29 700.27 T
(This is sentence seven.) 341.29 692 T
($ cat write-demo1) 341.29 675.48 T
(s/line/sentence/gw temp) 341.29 667.21 T
($ sed -f write-demo1 new) 341.29 658.95 T
(Line one.) 341.29 650.68 T
(The second sentence) 341.29 642.42 T
(The third.) 341.29 634.15 T
(...) 341.29 625.89 T
($ cat temp) 341.29 617.62 T
(The second sentence.) 341.29 609.36 T
(This is sentence four.) 341.29 601.1 T
(This is sentence seven.) 341.29 592.83 T
0 0 0 1 0 0 0 K
27 49.52 293.15 393.94 C
0 0 0 1 0 0 0 K
42.66 88.66 277.49 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(11) 158.33 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 104.31 261.83 346.97 R
7 X
V
1 10.44 Q
0 X
(Basic) 141.67 339.28 T
3 F
(sed) 170.66 339.28 T
6 6.09 Q
($ cat write-demo3) 66.14 318.96 T
(2,4 !w temp3) 66.14 310.69 T
($ sed -n -f write-demo3 new) 66.14 302.43 T
($ cat temp3) 66.14 294.17 T
(Line one.) 66.14 285.9 T
(Five.) 66.14 277.64 T
(This is the sixth sentence.) 66.14 269.37 T
(This is line seven.) 66.14 261.11 T
(Eighth and last.) 66.14 252.84 T
($ cat compound.in) 66.14 236.32 T
(1. The words on this page...) 66.14 228.05 T
(2. The words on this page...) 66.14 219.79 T
(3. The words on this page...) 66.14 211.52 T
(4. The words on this page...) 66.14 203.26 T
($ cat compound) 66.14 194.99 T
(1,3) 66.14 186.73 T
(s/words/text/) 87.28 186.73 T
(2,4) 66.14 178.46 T
(s/text/TEXT/) 87.28 178.46 T
(3 d) 66.14 170.2 T
($ sed -f compound compound.in) 66.14 161.93 T
(1. The text on this page...) 66.14 153.67 T
(2. The TEXT on this page...) 66.14 145.41 T
(3. The words on this page...) 66.14 137.14 T
0 0 0 1 0 0 0 K
302.15 49.52 568.29 393.94 C
0 0 0 1 0 0 0 K
317.81 88.66 552.64 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(12) 433.48 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 104.31 536.98 346.97 R
7 X
V
1 10.44 Q
0 X
(More) 413.49 340.01 T
3 F
(sed) 441.31 340.01 T
2 4.35 Q
(\245) 333.46 314.21 T
1 6.09 Q
-0.27 (Y) 341.29 314.21 P
-0.27 (ou can combine matc) 344.97 314.21 P
-0.27 (hing with substitution to do some very powerful) 402.85 314.21 P
(things:) 341.29 306.82 T
6 F
($ ypcat passwd | sed -n \325/^cs_/s/:.*//p\325 | sort) 349.12 295.74 T
1 F
(This command would give you a sorted list of all of the login names) 341.29 281.59 T
(that begin with \322) 341.29 274.2 T
6 F
(cs_) 388.65 274.2 T
1 F
(\323.) 399.61 274.2 T
2 4.35 Q
(\245) 333.46 258.98 T
1 6.09 Q
(The other command that\325) 341.29 258.98 T
(s handy is the \322) 412.17 258.98 T
6 F
(q) 455.59 258.98 T
1 F
(\323 command, whic) 459.24 258.98 T
(h is only) 506.89 258.98 T
(really useful when combined with pattern matc) 341.29 251.59 T
(hing:) 474.52 251.59 T
6 F
(/) 349.12 240.28 T
3 F
(re) 352.77 240.28 T
6 F
(/q) 358.18 240.28 T
1 F
-0.23 (Exit sed when you \336nd a line that matc) 384.34 240.28 P
-0.23 (hes the regular) 493.15 240.28 P
(expression) 384.34 232.89 T
3 F
(re) 415.91 232.89 T
1 F
(.) 421.21 232.89 T
(Y) 341.29 217.67 T
(ou can also use \322) 344.97 217.67 T
6 F
(q) 391.43 217.67 T
1 F
(\323 \050or anything else) 395.08 217.67 T
(, for that matter\051 with a line) 446.38 217.67 T
(number) 341.29 210.28 T
(. The following are equivalent:) 362.67 210.28 T
6 F
($ head -3 /usr/lib/eign) 349.12 199.2 T
(the) 349.12 190.93 T
(of) 349.12 182.67 T
(and) 349.12 174.4 T
($ sed 3q /usr/lib/eign) 349.12 166.14 T
(the) 349.12 157.88 T
(of) 349.12 149.61 T
(and) 349.12 141.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 447.97 293.15 792.39 C
0 0 0 1 0 0 0 K
42.66 487.1 277.49 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(13) 158.33 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 502.76 261.83 745.42 R
7 X
V
1 10.44 Q
0 X
(More) 138.34 738.46 T
3 F
(sed) 166.16 738.46 T
2 4.35 Q
(\245) 58.31 712.66 T
1 6.09 Q
-0.05 (The \322) 66.14 712.66 P
6 F
-0.1 (-n) 80.98 712.66 P
1 F
-0.05 (\323 option to) 88.28 712.66 P
3 F
-0.05 (sed) 118.59 712.66 P
1 F
-0.05 (, combined with the \322) 127.71 712.66 P
6 F
-0.1 (p) 186.95 712.66 P
1 F
-0.05 (\323 suf\336x/command, allows) 190.6 712.66 P
(you to do something like what) 66.14 705.27 T
3 F
(grep) 152.3 705.27 T
1 F
( does) 164.47 705.27 T
(, but with a lot more) 178.41 705.27 T
(\337exibility:) 66.14 697.87 T
6 F
($ ypcat passwd |) 73.97 686.8 T
(> sed -n \325/\134/bin\134/csh$/s/:.*//p\325 |) 73.97 678.53 T
(> sort | uniq -c) 73.97 670.27 T
1 F
(The above command tells you how many users use \322/bin/csh\323 as their) 66.14 656.12 T
(login shell. W) 66.14 648.73 T
(e ha) 104.11 648.73 T
(ve to escape the \322) 115.89 648.73 T
6 F
(/) 164.38 648.73 T
1 F
(\323c) 168.03 648.73 T
(haracter with a bac) 173.06 648.73 T
(kslash so) 227.71 648.73 T
(that it\325) 66.14 641.34 T
(s not interpreted as part of the command. W) 85.05 641.34 T
(e could ha) 209.28 641.34 T
(ve also) 237.63 641.34 T
-0.13 (used a \322.) 66.14 633.94 P
-0.13 (\323 instead of a \322/\323 if we\325re sure that the \322/\323 is the only c) 89.56 633.94 P
-0.13 (haracter) 236.26 633.94 P
(that will appear in that position:) 66.14 626.55 T
6 F
($ ypcat passwd |) 73.97 615.47 T
(> sed -n \325/.bin.csh$/s/:.*//p\325 |) 73.97 607.21 T
(> sort | uniq -c) 73.97 598.94 T
1 F
(Or even:) 66.14 584.8 T
6 F
($ ypcat passwd |) 73.97 573.72 T
(> sed -n \325/[/]bin[/]csh$/s/:.*//p\325 |) 73.97 565.45 T
(> sort | uniq -c) 73.97 557.19 T
1 F
-0.15 (But the easiest is probably not to ha) 66.14 543.04 P
-0.15 (ve the \322/\323 as part of the pattern at) 166.87 543.04 P
(all, since we know that the shell name is at the end of the line:) 66.14 535.65 T
6 F
($ ypcat passwd |) 73.97 524.57 T
(> sed -n \325/.*csh$/s/:.*//p\325 |) 73.97 516.31 T
(> sort | uniq -c) 73.97 508.04 T
0 0 0 1 0 0 0 K
302.15 447.97 568.29 792.39 C
0 0 0 1 0 0 0 K
317.81 487.1 552.64 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(14) 433.48 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 502.76 536.98 745.42 R
7 X
V
1 10.44 Q
0 X
(More) 413.49 738.46 T
3 F
(sed) 441.31 738.46 T
2 4.35 Q
(\245) 333.46 712.66 T
1 6.09 Q
-0.07 (W) 341.29 712.66 P
-0.07 (e could extend that, to read a list of shells from the \336le \322/etc/shells\323,) 346.9 712.66 P
(and look at how many use eac) 341.29 705.27 T
(h:) 425.37 705.27 T
6 F
($ cat /etc/shells |) 349.12 694.19 T
(> while read shell) 349.12 685.93 T
(> do) 349.12 677.66 T
(> shell=`basename $shell`) 349.12 669.4 T
(> ypcat passwd |) 349.12 661.13 T
(> sed -n "/$shell\134$/s/:.*/ $shell/p" |) 349.12 652.87 T
(> sort | uniq -c > $shell.count) 349.12 644.6 T
(> echo $shell done) 349.12 636.34 T
(> done) 349.12 628.07 T
(zsh done) 349.12 619.81 T
(csh done) 349.12 611.55 T
(tcsh done) 349.12 603.28 T
(bash done) 349.12 595.02 T
(sh done) 349.12 586.75 T
1 F
(Some things to note:) 341.29 572.6 T
2 4.35 Q
(\245) 341.29 559.99 T
1 6.09 Q
(W) 349.12 559.99 T
(e\325re using double quotes instead of \050the usual\051 single quotes) 354.72 559.99 T
(,) 521.91 559.99 T
(because we w) 349.12 552.6 T
(ant the shell to expand the shell variable \322) 387.01 552.6 T
6 F
($shell) 506.32 552.6 T
1 F
(\323) 528.24 552.6 T
2 4.35 Q
(\245) 341.29 539.99 T
1 6.09 Q
(Similarly) 349.12 539.99 T
(, we need to escape the \322) 374.63 539.99 T
6 F
($) 442.97 539.99 T
1 F
(\323 with a bac) 446.62 539.99 T
(kslash so that the) 479.62 539.99 T
(shell) 349.12 532.6 T
3 F
(won\325t) 364.23 532.6 T
1 F
( interpret it.) 379.11 532.6 T
2 4.35 Q
(\245) 341.29 519.98 T
1 6.09 Q
(Note the use of command substitution with a shell variable to) 349.12 519.98 T
(a) 349.12 512.59 T
(void the problem described on the last slide) 352.44 512.59 T
(.) 474.22 512.59 T
0 0 0 1 0 0 0 K
27 49.52 293.15 393.94 C
0 0 0 1 0 0 0 K
42.66 88.66 277.49 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(15) 158.33 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 154.41 261.83 346.97 R
7 X
V
1 10.44 Q
0 X
(Remembering Matc) 104.54 340.01 T
(hes) 199.18 340.01 T
2 4.35 Q
(\245) 58.31 314.21 T
1 6.09 Q
-0.12 (Several programs \050) 66.14 314.21 P
3 F
-0.12 (ex) 119.35 314.21 P
1 F
-0.12 (,) 125.1 314.21 P
3 F
-0.12 (sed) 128.37 314.21 P
1 F
-0.12 (,) 137.5 314.21 P
3 F
-0.12 (emacs) 140.77 314.21 P
1 F
-0.12 (\311\051 need to refer to parts of what you) 157.79 314.21 P
(matc) 66.14 306.82 T
(h, for example) 79.97 306.82 T
(, for use in a) 120 306.82 T
3 F
(substitute) 156.53 306.82 T
1 F
( command. This is done) 183.92 306.82 T
(with) 66.14 299.43 T
6 F
(\134\050\134\051) 80.58 299.43 T
1 F
(. The following example \336nds lines where the \336rst three) 95.19 299.43 T
(c) 66.14 292.03 T
(haracters are repeated as the fourth through sixth c) 68.8 292.03 T
(haracters) 215.1 292.03 T
(. The) 241.78 292.03 T
(\322) 66.14 284.64 T
6 F
(-n) 68.51 284.64 T
1 F
(\323 option to) 75.82 284.64 T
3 F
(sed) 106.26 284.64 T
1 F
( speci\336es not to print anything unless speci\336cally) 115.39 284.64 T
(requested to) 66.14 277.25 T
(. The \322p\323 following the \322/\323 enc) 100.76 277.25 T
(losed regular expression) 182.24 277.25 T
(speci\336es to print lines that matc) 66.14 269.85 T
(h:) 156.87 269.85 T
6 F
($ sed -n \325/^\134\050...\134\051\1341/p\325) 66.14 258.78 T
1 F
(T) 66.14 244.63 T
(o take this piece by piece:) 69.87 244.63 T
6 F
(/) 70.06 233.32 T
1 F
(F) 89.62 233.32 T
(ind lines that matc) 93.62 233.32 T
(h\311) 146.92 233.32 T
6 F
(^) 70.06 225.06 T
1 F
(The beginning of the line\311) 89.62 225.06 T
6 F
(\134\050) 70.06 216.8 T
1 F
(\050start remembering what you matc) 89.62 216.8 T
(h\311\051) 187.79 216.8 T
6 F
(...) 70.06 208.54 T
1 F
(F) 89.62 208.54 T
(ollowed by three c) 93.35 208.54 T
(haracters\311) 143.82 208.54 T
6 F
(\134\051) 70.06 200.27 T
1 F
(\050stop remembering what you matc) 89.62 200.27 T
(h\311\051) 185.87 200.27 T
6 F
(\1341) 70.06 192.01 T
1 F
-0.28 (F) 89.62 192.01 P
-0.28 (ollowed by whatever matc) 93.35 192.01 P
-0.28 (hed the pattern inside the \336rst set) 165.55 192.01 P
(of escaped parantheses\311) 89.62 184.62 T
6 F
(/p) 70.06 176.35 T
1 F
(And print the line) 89.62 176.35 T
(.) 140.14 176.35 T
(Here\325) 66.14 161.13 T
(s the output of running the above on) 81.09 161.13 T
0 F
(/usr/dict/w) 185.17 161.13 T
(ords) 211.15 161.13 T
1 F
(:) 221.63 161.13 T
58.31 107.44 153.81 149.71 R
7 X
V
6 F
0 X
(alfalfa) 73.97 145.88 T
(assassin) 73.97 137.62 T
(assassinate) 73.97 129.36 T
(barbarian) 73.97 121.09 T
(barbaric) 73.97 112.83 T
156.94 107.44 260.27 149.71 R
7 X
V
0 X
(barbarism) 172.6 145.88 T
(barbarous) 172.6 137.62 T
(murmur) 172.6 129.36 T
(tartar) 172.6 121.09 T
(testes) 172.6 112.83 T
0 0 0 1 0 0 0 K
302.15 49.52 568.29 393.94 C
0 0 0 1 0 0 0 K
317.81 88.66 552.64 362.63 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(16) 433.48 82.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
333.46 104.31 536.98 346.97 R
7 X
V
1 10.44 Q
0 X
(Remembering Matc) 379.69 340.01 T
(hes) 474.32 340.01 T
2 4.35 Q
(\245) 333.46 314.21 T
1 6.09 Q
(T) 341.29 314.21 T
(o take a little more advanced example) 345.02 314.21 T
(, the followed uses) 451.7 314.21 T
3 F
(sed) 504.92 314.21 T
1 F
( to \336nd) 514.05 314.21 T
(all of the lines that contain \322) 341.29 306.82 T
3 F
(string_string) 421.36 306.82 T
1 F
(\323 for some string:) 457.53 306.82 T
6 F
($ sed -n \325/^\134\050[^_]*\134\051_\1341/p\325) 341.29 295.74 T
1 F
(T) 341.29 281.59 T
(o take this piece by piece:) 345.02 281.59 T
6 F
(/) 345.2 270.29 T
1 F
(F) 368.69 270.29 T
(ind lines that matc) 372.69 270.29 T
(h\311) 425.98 270.29 T
6 F
(^) 345.2 262.03 T
1 F
(The beginning of the line\311) 368.69 262.03 T
6 F
(\134\050) 345.2 253.76 T
1 F
(\050start remembering what you matc) 368.69 253.76 T
(h\311\051) 466.85 253.76 T
6 F
([^_]*) 345.2 245.5 T
1 F
(F) 368.69 245.5 T
(ollowed by zero or more of anything except \322_\323\311) 372.41 245.5 T
6 F
(\134\051) 345.2 237.24 T
1 F
(\050stop remembering\311\051) 368.69 237.24 T
6 F
(\321) 345.2 228.97 T
1 F
(F) 368.69 228.97 T
(ollowed by a \322_\323\311) 372.41 228.97 T
(\1341) 345.2 220.71 T
(F) 368.69 220.71 T
(ollowed by whatever matc) 372.41 220.71 T
(hed the pattern inside the \336rst) 445.44 220.71 T
(set of parentheses\311) 368.69 213.32 T
6 F
(/p) 345.2 205.06 T
1 F
(And print the line) 368.69 205.06 T
(.) 419.2 205.06 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 447.97 293.15 792.39 C
0 0 0 1 0 0 0 K
42.66 487.1 277.49 761.08 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.48 Q
(17) 158.33 480.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 562.25 261.83 745.42 R
7 X
V
1 10.44 Q
0 X
(Remembering Matc) 104.54 738.46 T
(hes) 199.18 738.46 T
2 4.35 Q
(\245) 58.31 712.66 T
1 6.09 Q
(Here\325) 66.14 712.66 T
(s the \336rst few lines of the result of running the above on the) 81.09 712.66 T
(output of \322) 66.14 705.27 T
6 F
(ypcat passwd) 95.68 705.27 T
1 F
(\323) 139.52 705.27 T
6 F
(:) 141.88 705.27 T
($ ypcat passwd | sed -n '/^\134\050[^_]*\134\051_\1341/p') 66.14 694.19 T
6 3.48 Q
(ch_chiu:MBcCnyhWHkfRo:11405:10005:Chan Chiu Chung:/student/ch/ch_chiu:/bin/csh) 73.97 685.83 T
(mk_mkh:LGQGDY3DrR6vc:10932:10014:feel so sad!:/student/mk/mk_mkh:/bin/csh) 73.97 679.61 T
(mn_mnkkk:XIeuUitrRcYYo:10905:10012:Kit:/student/mn/mn_mnkkk:/bin/csh) 73.97 673.4 T
(cs_csk:NGQYawxYfDSfI:11170:10001:<Dinosaur Garfield>:/student/cs/cs_csk:/bin/tcsh) 73.97 667.19 T
(ee_eeeee:UO/MS8qKexPH2:11223:10002:SLAM DUNK:/student/ee/ee_eeeee:/bin/tcsh) 73.97 660.97 T
(mn_mnmn:BC6Do7P.PUkA2:11767:10012: ~MINNA NO TABO~:/student/mn/mn_mnmn:/bin/csh) 73.97 654.76 T
(ma_man:QHOtEkwqgwkZc:10188:10003:Who am I?:/student/ma/ma_man:/bin/tcsh) 73.97 648.55 T
1 6.09 Q
(\050printed tiny so that you can see the whole line\051.) 66.14 634.81 T
2 4.35 Q
(\245) 58.31 619.59 T
1 6.09 Q
(If you w) 66.14 619.59 T
(anted to see only the logins) 88.69 619.59 T
(, that\325) 165.1 619.59 T
(s easy) 181.42 619.59 T
(. J) 197.69 619.59 T
(ust pipe the output) 204.31 619.59 T
(through) 66.14 612.2 T
3 F
(sed) 90.38 612.2 T
1 F
( again, and then through) 99.5 612.2 T
3 F
(sort) 171.33 612.2 T
1 F
( to sort it:) 181.93 612.2 T
6 F
($ ypcat passwd |) 66.14 601.12 T
(> sed -n '/^\134\050[^_]*\134\051_\1341/p' |) 66.14 592.85 T
(> sed \325s/:.*//\325 | sort) 66.14 584.59 T
1 F
(Whic) 66.14 570.44 T
(h gives the following output:) 80.41 570.44 T
81.8 515.29 131.89 560.69 R
7 X
V
6 5.22 Q
0 X
(ac_aclch) 81.8 557.21 T
(bo_bobby) 81.8 550.68 T
(bo_bobo) 81.8 544.16 T
(bo_boyiu) 81.8 537.64 T
(ch_chiu) 81.8 531.11 T
(ch_chx) 81.8 524.59 T
(cs_csk) 81.8 518.07 T
131.89 513.72 188.25 560.69 R
7 X
V
0 X
(cs_csl) 131.89 557.21 T
(ee_eeeee) 131.89 550.68 T
(ke_keith) 131.89 544.16 T
(ke_ken) 131.89 537.64 T
(ma_man) 131.89 531.11 T
(ma_mandy) 131.89 524.59 T
(ma_mat) 131.89 518.07 T
188.25 509.02 244.61 560.69 R
7 X
V
0 X
(ma_maxch) 188.25 557.21 T
(mk_mkh) 188.25 550.68 T
(mk_mkp) 188.25 544.16 T
(mn_mnkkk) 188.25 537.64 T
(mn_mnmn) 188.25 531.11 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 5
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier-Bold
%%+ Courier
%%EOF
