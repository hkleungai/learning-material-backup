%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.01 841.97 0 1 8 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(1) 154.8 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(A) 146.97 768.25 T
(WK) 154.17 768.25 T
2 4.47 Q
(\245) 59.17 743.11 T
1 6.26 Q
-0.09 (A) 67.22 743.11 P
76.45 742.57 71.58 742.57 2 L
V
0.14 H
N
-0.09 (w) 71.58 743.11 P
-0.09 (k is a pattern scanning and processing language written at Bell) 76.45 743.11 P
(Labs as part of UNIX in the 70\325) 67.22 735.52 T
(s by Al) 157.69 735.52 T
183.64 734.98 179.12 734.98 2 L
V
N
(A) 179.12 735.52 T
(ho) 183.64 735.52 T
(, P) 190.48 735.52 T
(eter) 197.9 735.52 T
217.24 734.98 211.1 734.98 2 L
V
N
(W) 211.1 735.52 T
(einburger and) 216.87 735.52 T
(Brian) 67.22 727.92 T
90.39 727.38 85.52 727.38 2 L
V
N
(K) 85.52 727.92 T
(ernighan) 90.45 727.92 T
2 4.47 Q
(\245) 59.17 712.28 T
1 6.26 Q
(It is most useful for producing reports and \336ltering text.) 67.22 712.28 T
2 4.47 Q
(\245) 59.17 696.64 T
1 6.26 Q
(It takes many of its constructs from C) 67.22 696.64 T
(, and has historical roots in) 176.35 696.64 T
(SNOBOL) 67.22 689.04 T
2 4.47 Q
(\245) 59.17 673.4 T
1 6.26 Q
(A) 67.22 673.4 T
(wk is an interpreted language\321it\325) 71.58 673.4 T
(s very highly level, and not too) 170.26 673.4 T
(fast.) 67.22 665.81 T
2 4.47 Q
(\245) 59.17 650.17 T
1 6.26 Q
(It can take input from \336les or from standard input) 67.22 650.17 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(2) 429.81 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Basics in a) 400.89 768.25 T
(wk) 454.42 768.25 T
2 4.47 Q
(\245) 334.18 743.11 T
1 6.26 Q
(An a) 342.22 743.11 T
(wk program can be given to the a) 355.72 743.11 T
(wk interpreter in one of two) 451.83 743.11 T
(w) 342.22 735.52 T
(a) 346.98 735.52 T
(ys:) 350.39 735.52 T
2 4.47 Q
(\245) 342.22 722.56 T
1 6.26 Q
(As a command line argument \050!\051) 350.27 722.56 T
2 4.47 Q
(\245) 342.22 709.6 T
1 6.26 Q
(In a \336le) 350.27 709.6 T
(, using the \322) 372.4 709.6 T
3 F
(-f) 407.05 709.6 T
4 F
(\336le) 416.29 709.6 T
1 F
(\323 command line argument) 424.97 709.6 T
2 4.47 Q
(\245) 334.18 693.96 T
1 6.26 Q
(An a) 342.22 693.96 T
(wk program consists of statements of the form:) 355.72 693.96 T
4 F
(pattern) 342.22 678.32 T
1 F
( {) 363.19 678.32 T
4 F
(action) 368.75 678.32 T
1 F
( }) 386.35 678.32 T
2 4.47 Q
(\245) 342.22 665.36 T
1 6.26 Q
(The) 350.27 665.36 T
4 F
(pattern) 363.13 665.36 T
1 F
( selects lines from the input \336le\050s\051) 384.09 665.36 T
2 4.47 Q
(\245) 342.22 652.4 T
1 6.26 Q
-0.21 (A) 350.27 652.4 P
-0.21 (wk performs the) 354.63 652.4 P
4 F
-0.21 (action) 403.12 652.4 P
1 F
-0.21 ( \050whic) 420.72 652.4 P
-0.21 (h ma) 437.73 652.4 P
-0.21 (y be many lines\051 on eac) 452.06 652.4 P
-0.21 (h line) 518.06 652.4 P
(that the pattern selection) 350.27 644.81 T
2 4.47 Q
(\245) 342.22 631.85 T
1 6.26 Q
(If a statement has a pattern, but no action, then the lines that) 350.27 631.85 T
(matc) 350.27 624.25 T
(h the pattern are printed) 364.47 624.25 T
2 4.47 Q
(\245) 342.22 611.29 T
1 6.26 Q
(If a statement has an action, but no pattern, then the action is) 350.27 611.29 T
(performed once for every line of input\321i.e) 350.27 603.7 T
(. all lines are selected) 471.79 603.7 T
2 4.47 Q
(\245) 334.18 588.06 T
1 6.26 Q
(The following are all equivalent:) 342.22 588.06 T
0 F
(% ypcat passwd | grep \325^cs_\325) 342.22 576.34 T
(% ypcat passwd | sed -n \325/^cs_/p\325) 342.22 567.13 T
(% ypcat passwd | a) 342.22 557.93 T
(wk \325/^cs_/\325) 389.59 557.93 T
(% ypcat passwd | a) 342.22 548.72 T
(wk \325/^cs_/ {print}\325) 389.59 548.72 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(3) 154.8 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(BEGIN and END) 116.8 369.77 T
2 4.47 Q
(\245) 59.17 344.63 T
1 6.26 Q
-0.2 (Actions associated with the special patterns \322) 67.22 344.63 P
3 F
-0.43 (BEGIN) 197.07 344.63 P
1 F
-0.2 (\323 and \322) 215.83 344.63 P
3 F
-0.43 (END) 234.67 344.63 P
1 F
-0.2 (\323 are) 245.93 344.63 P
(executed before the \336rst line and after the last line of input,) 67.22 337.03 T
(respectively) 67.22 329.44 T
(. F) 100.96 329.44 T
(or example:) 108.26 329.44 T
0 F
($ls -ld * | a) 67.22 317.72 T
(wk ') 94.79 317.72 T
(BEGIN {) 67.22 308.51 T
(print "Size\134tFile") 113.07 299.31 T
(print "----\134t----") 113.07 290.1 T
(}) 88.93 280.9 T
({) 88.93 271.69 T
(print $4 "\134t" $8) 113.07 262.49 T
(}') 88.93 253.28 T
(Size    File) 67.22 244.08 T
(----    ----) 67.22 234.87 T
(14487   csh.not) 67.22 225.66 T
(512     lecture_notes) 67.22 216.46 T
(512     prob2) 67.22 207.25 T
(512     prob3) 67.22 198.05 T
(512     prob5) 67.22 188.84 T
(286     sysreport.t) 67.22 179.64 T
(1928    template.l) 67.22 170.43 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(4) 429.81 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(BEGIN and END) 391.81 369.77 T
2 4.47 Q
(\245) 334.18 344.63 T
1 6.26 Q
(The \322) 342.22 344.63 T
3 F
(END) 357.52 344.63 T
1 F
(\323 pattern can be used to print a report after processing a) 368.78 344.63 T
(\336le:) 342.22 337.03 T
0 F
($ypcat -d ust.hk passwd | a) 342.22 325.31 T
(wk ') 409.4 325.31 T
(> /^cs_/) 342.22 316.11 T
({cs++}) 388.07 316.11 T
(> END) 342.22 306.9 T
({print cs "/" NR, "logins are cs"}') 388.07 306.9 T
(433/4605 logins are cs) 342.22 297.7 T
2 4.47 Q
(\245) 334.18 282.79 T
1 6.26 Q
(Y) 342.22 282.79 T
(ou can also process the last section of a \336le in \322control break) 346 282.79 T
(processing\323:) 342.22 275.19 T
0 F
($ls -l /usr/bin/* | sort +2 |) 342.22 263.47 T
(> a) 342.22 254.26 T
(wk \325) 350 254.26 T
(> k) 342.22 245.06 T
(e) 350.38 245.06 T
(y != $3 {) 353.06 245.06 T
(>) 342.22 235.85 T
(if \050NR > 1\051 print k) 388.07 235.85 T
(e) 434.11 235.85 T
(y) 436.79 235.85 T
(, count, bytes) 439.51 235.85 T
(>) 342.22 226.65 T
(count = 0) 388.07 226.65 T
(>) 342.22 217.44 T
(bytes = 0) 388.07 217.44 T
(>) 342.22 208.24 T
(k) 388.07 208.24 T
(e) 391.14 208.24 T
(y = $3) 393.82 208.24 T
(>) 342.22 199.03 T
(}) 363.94 199.03 T
(>) 342.22 189.83 T
({) 363.94 189.83 T
(>) 342.22 180.62 T
(count++) 388.07 180.62 T
(>) 342.22 171.42 T
(bytes += $4) 388.07 171.42 T
(>) 342.22 162.21 T
(}) 363.94 162.21 T
(> END {) 342.22 153.01 T
(>) 342.22 143.8 T
(print k) 388.07 143.8 T
(e) 404.52 143.8 T
(y) 407.2 143.8 T
(, count, bytes) 409.92 143.8 T
(>) 342.22 134.6 T
(}\325) 363.94 134.6 T
(bin 6 98304) 342.22 125.39 T
(root 313 8378716) 342.22 116.19 T
(uucp 9 374428) 342.22 106.98 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(5) 154.8 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Actions) 141.53 768.25 T
2 4.47 Q
(\245) 59.17 743.11 T
1 6.26 Q
(Actions are expressed using a C\320like syntax. A) 67.22 743.11 T
(wk has all of the) 202.39 743.11 T
(following:) 67.22 735.52 T
0 F
(if \050 conditional \051 statement [ else statement ]) 67.22 723.8 T
(while \050 conditional \051 statement) 67.22 714.59 T
(for \050 e) 67.22 705.39 T
(xpression ; conditional ; e) 82.41 705.39 T
(xpression \051) 146.96 705.39 T
(statement) 88.93 696.18 T
(for \050 v) 67.22 686.98 T
(ar in array \051) 82.7 686.98 T
(statement) 88.93 677.77 T
(break) 67.22 668.57 T
(continue) 67.22 659.36 T
({ [ statement ] ...}) 67.22 650.16 T
(v) 67.22 640.95 T
(ariable = e) 70.19 640.95 T
(xpression) 96.55 640.95 T
(print [ e) 67.22 631.75 T
(xpression-list ] [ > e) 86.93 631.75 T
(xpression ]) 137.28 631.75 T
(printf format [ , e) 67.22 622.54 T
(xpression-list ] [ > e) 110.38 622.54 T
(xpression ]) 160.73 622.54 T
(ne) 67.22 613.33 T
(xt) 73.03 613.33 T
(e) 67.22 604.13 T
(xit) 69.9 604.13 T
2 4.47 Q
(\245) 59.17 589.22 T
1 6.26 Q
(Here\325) 67.22 589.22 T
(s a silly example that produces the factorial of every number) 82.58 589.22 T
(input:) 67.22 581.62 T
0 F
({) 67.22 569.9 T
(f) 88.93 560.7 T
(act = 1) 90.96 560.7 T
(for \050i = 2; i <= $1; i++\051) 88.93 551.49 T
(f) 113.07 542.29 T
(act = f) 115.09 542.29 T
(act * i) 131.06 542.29 T
(print f) 88.93 533.08 T
(act) 104.34 533.08 T
(}) 67.22 523.88 T
1 F
(The \322) 67.22 508.96 T
3 F
($1) 82.51 508.96 T
1 F
(\323 means the \336rst \322\336eld\323 of the input, and is discussed later) 90.02 508.96 T
(.) 257.63 508.96 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(6) 429.81 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Conditionals) 403.52 768.25 T
2 4.47 Q
(\245) 334.18 743.11 T
1 6.26 Q
(Conditionals in a) 342.22 743.11 T
(wk are muc) 391.64 743.11 T
(h like conditionals in C) 425.2 743.11 T
(. Like C) 491.82 743.11 T
(, a) 514.3 743.11 T
(wk) 521.2 743.11 T
(has:) 342.22 735.52 T
2 4.47 Q
(\245) 342.22 722.56 T
1 6.26 Q
(The standard relational operators: \322) 350.27 722.56 T
3 F
(>) 454.08 722.56 T
1 F
(\323, \322) 457.84 722.56 T
3 F
(<) 466.18 722.56 T
1 F
(\323, \322) 469.94 722.56 T
3 F
(>=) 478.28 722.56 T
1 F
(\323, \322) 485.79 722.56 T
3 F
(<) 494.13 722.56 T
1 F
(\323, \322) 497.89 722.56 T
3 F
(==) 506.23 722.56 T
1 F
(\323, \322) 513.74 722.56 T
3 F
(!=) 522.09 722.56 T
1 F
(\323) 529.59 722.56 T
2 4.47 Q
(\245) 342.22 709.6 T
1 6.26 Q
(Boolean operations: \322) 350.27 709.6 T
3 F
(&&) 411.44 709.6 T
1 F
(\323, \322) 418.95 709.6 T
3 F
(||) 427.3 709.6 T
1 F
(\323, \322) 434.8 709.6 T
3 F
(!) 443.15 709.6 T
1 F
(\323) 446.9 709.6 T
2 4.47 Q
(\245) 334.18 693.96 T
1 6.26 Q
(Unlike C) 342.22 693.96 T
(,) 367.95 693.96 T
2 4.47 Q
(\245) 342.22 681 T
1 6.26 Q
-0.22 (a) 350.27 681 P
-0.22 (wk has regular expressions) 353.68 681 P
-0.22 (. \322/) 431.76 681 P
4 F
-0.22 (re) 439.18 681 P
1 F
-0.22 (/\323 is true if the line matc) 444.74 681 P
-0.22 (hes the) 513.57 681 P
(regular expression. F) 350.27 673.4 T
(or example:) 411.32 673.4 T
3 F
(% awk \325length <= 10 && /ing$/\325 /usr/dict/words) 350.27 662.02 T
1 F
(\336nds all of the words in /usr/dict/words that are ten letters or) 350.27 651.51 T
(less long) 350.27 643.91 T
(, and that end with \322ing\323.) 375.02 643.91 T
2 4.47 Q
(\245) 342.22 630.95 T
1 6.26 Q
(A regular expression can be preceded with \322) 350.27 630.95 T
4 F
(string) 476.89 630.95 T
3 F
(~) 495.65 630.95 T
1 F
(\323, in whic) 499.41 630.95 T
(h) 526.24 630.95 T
(case the conditional is true if the string matc) 350.27 623.36 T
(hes the regular) 479.87 623.36 T
(expression. F) 350.27 615.76 T
(or example:) 388.27 615.76 T
3 F
($rsh ustsu5 who | awk ') 350.27 604.38 T
(> {) 350.27 595.88 T
(>       if \050$6 ~ /csl[23]su/\051 csl++) 350.27 587.39 T
(> }) 350.27 578.9 T
(> END {print csl "/" NR, "csl logins"}') 350.27 570.41 T
(9/44 csl logins) 350.27 561.92 T
1 F
(reports on the number of people logged in from the CS labs on) 350.27 551.4 T
(ustsu5.) 350.27 543.8 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(7) 154.8 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Conditionals) 128.52 369.77 T
2 4.47 Q
(\245) 59.17 344.63 T
1 6.26 Q
(Other things that are different from C:) 67.22 344.63 T
2 4.47 Q
(\245) 67.22 331.67 T
1 6.26 Q
(The relational operators work with strings as well as with) 75.26 331.67 T
(numbers) 75.26 324.07 T
(. W) 100.59 324.07 T
(ith strings) 110.1 324.07 T
(, they do) 140.06 324.07 T
4 F
(lexical) 166.48 324.07 T
1 F
( comparison:) 185 324.07 T
3 F
("cat" < "dog") 75.26 312.35 T
5 F
(\256) 127.81 312.35 T
0 F
(true) 137.74 312.35 T
3 F
("apple" > "banana") 75.26 302.42 T
5 F
(\256) 146.58 302.42 T
0 F
(f) 156.51 302.42 T
(alse) 158.53 302.42 T
2 4.47 Q
(\245) 67.22 289.47 T
1 6.26 Q
(Y) 75.26 289.47 T
(ou can mix lexical, numerical or regular expression) 79.04 289.47 T
(conditionals within a single conditional expression) 75.26 281.87 T
2 4.47 Q
(\245) 67.22 268.91 T
1 6.26 Q
(In patterns) 75.26 268.91 T
(, two regular expressions separated by commas are) 107.77 268.91 T
(interpreted as meaning all of the lines between a matc) 75.26 261.31 T
(h of the) 232.69 261.31 T
(\336rst pattern and the next line that matc) 75.26 253.72 T
(hes the second pattern.) 191.32 253.72 T
(F) 75.26 246.12 T
(or example:) 79.09 246.12 T
3 F
(% awk \325/^\134.RS/,/^\134.RE/\325 /usr/man/man1/csh.1) 75.26 234.74 T
1 F
(\336nds all of the indented sections of the csh man page) 75.26 224.22 T
(.) 227.74 224.22 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(8) 429.81 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(V) 411.72 369.77 T
(ariables) 418.55 369.77 T
2 4.47 Q
(\245) 334.18 344.63 T
1 6.26 Q
(There are three sorts of variables in a) 342.22 344.63 T
(wk:) 451.19 344.63 T
2 4.47 Q
(\245) 342.22 331.67 T
1 6.26 Q
(User variables:) 350.27 331.67 T
2 4.47 Q
(\245) 350.27 320.05 T
1 6.26 Q
(These do no need to be dec) 358.31 320.05 T
(lared before use) 434.85 320.05 T
(.) 480.73 320.05 T
2 4.47 Q
(\245) 350.27 308.43 T
1 6.26 Q
(A) 358.31 308.43 T
(wk \336gures out whether they need to be numbers or strings) 362.67 308.43 T
(from context.) 358.31 300.84 T
2 4.47 Q
(\245) 350.27 289.22 T
1 6.26 Q
(The default value for a string is the null string) 358.31 289.22 T
(.) 493.02 289.22 T
2 4.47 Q
(\245) 350.27 277.6 T
1 6.26 Q
(The default value for numbers is 0.) 358.31 277.6 T
2 4.47 Q
(\245) 342.22 264.64 T
1 6.26 Q
(F) 350.27 264.64 T
(ield variables:) 354.38 264.64 T
3 F
($1) 350.27 253.02 T
1 F
(\320) 357.77 253.02 T
3 F
($n) 361.25 253.02 T
1 F
(\336eld number n, starting with 1) 390.48 253.02 T
3 F
($0) 350.27 244.09 T
1 F
(the entire record) 390.48 244.09 T
-0.04 (A reference to \322) 350.27 232.47 P
3 F
-0.08 ($) 394.63 232.47 P
4 F
-0.04 (var) 398.38 232.47 P
1 F
-0.04 (\323 refers to the) 408 232.47 P
4 F
-0.04 (k) 448.97 232.47 P
1 F
-0.04 (th \336eld, where) 452.45 232.47 P
4 F
-0.04 (k) 495.78 232.47 P
1 F
-0.04 ( is the) 499.26 232.47 P
4 F
-0.04 (value) 518.61 232.47 P
1 F
(of variable) 350.27 224.87 T
4 F
(var) 382.6 224.87 T
1 F
(:) 392.21 224.87 T
(\322) 350.27 213.26 T
3 F
({var = 1; print $var}) 352.7 213.26 T
1 F
(\323 is the same as \322) 431.52 213.26 T
3 F
({print $1}) 480.78 213.26 T
1 F
(\323) 518.31 213.26 T
2 4.47 Q
(\245) 342.22 200.3 T
1 6.26 Q
(Program variables:) 350.27 200.3 T
3 F
(NR) 350.27 188.68 T
1 F
(record number of the current record) 390.48 188.68 T
3 F
(NF) 350.27 179.74 T
1 F
(number of \336elds in the current record) 390.48 179.74 T
3 F
(FS) 350.27 170.8 T
1 F
(input \336eld separator \050default space or tab\051) 390.48 170.8 T
3 F
(OFS) 350.27 161.87 T
1 F
(output \336eld separator \050default space\051) 390.48 161.87 T
3 F
(RS) 350.27 152.93 T
1 F
(input record separator \050default newline\051) 390.48 152.93 T
3 F
(ORS) 350.27 143.99 T
1 F
(output record separator \050default newline\051) 390.48 143.99 T
3 F
(FILENAME) 350.27 135.06 T
1 F
(name of the current input \336le) 390.48 135.06 T
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(9) 154.8 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Program variables) 114.12 768.25 T
2 4.47 Q
(\245) 59.17 743.11 T
1 6.26 Q
(The \322) 67.22 743.11 T
3 F
(NR) 82.51 743.11 T
1 F
(\323 variable tells you how many records you\325ve seen so far) 90.02 743.11 T
(.) 250.1 743.11 T
0 F
($who | a) 67.22 731.39 T
(wk ') 88.18 731.39 T
(> {) 67.22 722.19 T
(>       if \050$6 ~ /csl[23]/\051 csl++) 67.22 712.98 T
(> }) 67.22 703.78 T
(> END {print csl "/" NR, "CS lab logins"}') 67.22 694.57 T
(9/44 CS lab logins) 67.22 685.37 T
1 F
-0.17 (This example tells you how many of the people logged in are logged) 67.22 670.46 P
(in from a CS lab mac) 67.22 662.86 T
(hine) 127.89 662.86 T
(, by examining the output of) 140.52 662.86 T
4 F
(who) 223.84 662.86 T
1 F
(.) 235.54 662.86 T
2 4.47 Q
(\245) 59.17 647.22 T
1 6.26 Q
(\322) 67.22 647.22 T
3 F
(NF) 69.65 647.22 T
1 F
(\323 tells you how many \336elds there are in the current record:) 77.16 647.22 T
0 F
($a) 67.22 635.5 T
(wk \325) 73.03 635.5 T
(>) 67.22 626.29 T
({) 88.93 626.29 T
(>) 67.22 617.09 T
(for \050i = 1; i <= NF; i++\051) 113.07 617.09 T
(>) 67.22 607.88 T
(print length\050$i\051) 137.2 607.88 T
(>) 67.22 598.68 T
(}\325 csh.not | sort | uniq -c |) 88.93 598.68 T
(> sort +1n) 67.22 589.47 T
1 F
(tells you how many words there are of various lengths:) 67.22 574.56 T
72.04 501.07 121.91 557.38 R
7 X
V
0 F
0 X
( 133 1) 80.09 553.1 T
( 395 2) 80.09 543.9 T
( 453 3) 80.09 534.69 T
( 476 4) 80.09 525.49 T
( 271 5) 80.09 516.28 T
( 234 6) 80.09 507.08 T
133.17 497.85 236.13 557.38 R
7 X
V
0 X
( 153 7) 141.22 553.1 T
(  87 8) 141.22 543.9 T
(  76 9) 141.22 534.69 T
(  68 10) 141.22 525.49 T
(  29 11) 141.22 516.28 T
(  23 12) 141.22 507.08 T
(   9 13) 197.52 553.1 T
(   7 14) 197.52 543.9 T
(   3 15) 197.52 534.69 T
(   3 16) 197.52 525.49 T
(   1 17) 197.52 516.28 T
(   1 18) 197.52 507.08 T
(   2 25) 197.52 497.87 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(10) 428.91 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Program variables) 389.12 768.25 T
2 4.47 Q
(\245) 334.18 743.11 T
1 6.26 Q
(W) 342.22 743.11 T
(e could extend the last example) 347.98 743.11 T
(, using gnuplot, to produce a) 438.83 743.11 T
(graph with the following output:) 342.22 735.52 T
0 F
($a) 342.22 723.8 T
(wk \325) 348.03 723.8 T
(>) 342.22 714.59 T
({) 363.94 714.59 T
(>) 342.22 705.39 T
(for \050i = 1; i <= NF; i++\051) 388.07 705.39 T
(>) 342.22 696.18 T
(print length\050$i\051) 412.2 696.18 T
(>) 342.22 686.98 T
(}\325 csh.not | sort | uniq -c |) 363.94 686.98 T
(> sort +1n | a) 342.22 677.77 T
(wk \325{print $2, $1}\325 > lengths.dat) 375.11 677.77 T
($gnuplot) 342.22 668.57 T
(gnuplot> set term postscript eps) 342.22 659.36 T
(gnuplot> set output "lengths.eps") 342.22 650.16 T
(gnuplot> plot "lengths.dat" with lines) 342.22 640.95 T
334.18 464.3 535.83 776.15 C
351.89 521.62 518.12 639.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 50 50 410 302 160.87 112.61 354.57 524.3 FMBEGINEPSF
%%BeginDocument: /homes/dlee/courses/comp111/gankw/lecture/lengths.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: gnuplot
%%DocumentFonts: Helvetica
%%BoundingBox: 50 50 410 302
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
672 211 M
6297 0 V
672 211 M
0 4758 V
LTb
672 211 M
63 0 V
6234 0 R
-63 0 V
588 211 M
(0) Rshow
672 687 M
63 0 V
6234 0 R
-63 0 V
588 687 M
(50) Rshow
672 1163 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(100) Rshow
672 1638 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(150) Rshow
672 2114 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(200) Rshow
672 2590 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(250) Rshow
672 3066 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(300) Rshow
672 3542 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(350) Rshow
672 4017 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(400) Rshow
672 4493 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(450) Rshow
672 4969 M
63 0 V
6234 0 R
-63 0 V
-6318 0 R
(500) Rshow
672 211 M
0 63 V
0 4695 R
0 -63 V
672 71 M
(0) Cshow
1459 211 M
0 63 V
0 4695 R
0 -63 V
1459 71 M
(5) Cshow
2246 211 M
0 63 V
0 4695 R
0 -63 V
2246 71 M
(10) Cshow
3033 211 M
0 63 V
0 4695 R
0 -63 V
3033 71 M
(15) Cshow
3821 211 M
0 63 V
0 4695 R
0 -63 V
3821 71 M
(20) Cshow
4608 211 M
0 63 V
0 4695 R
0 -63 V
4608 71 M
(25) Cshow
5395 211 M
0 63 V
0 4695 R
0 -63 V
5395 71 M
(30) Cshow
6182 211 M
0 63 V
0 4695 R
0 -63 V
6182 71 M
(35) Cshow
6969 211 M
0 63 V
0 4695 R
0 -63 V
6969 71 M
(40) Cshow
672 211 M
6297 0 V
0 4758 V
-6297 0 V
672 211 L
LT0
6486 4766 M
("lengths.dat") Rshow
6570 4766 M
252 0 V
829 1477 M
987 3970 L
157 552 V
158 219 V
1459 2790 L
158 -352 V
157 -771 V
157 -628 V
2089 934 L
157 -76 V
2404 487 L
157 -57 V
2719 297 L
157 -19 V
157 -38 V
158 0 V
157 -19 V
158 0 V
1102 9 V
944 -9 V
1260 0 V
stroke
grestore
end
showpage
%%Trailer

%%EndDocument
FMENDEPSF
334.18 464.3 535.83 776.15 C
302.01 432.13 568.01 808.33 C
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(11) 153.91 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Program variables) 114.12 369.77 T
2 4.47 Q
(\245) 59.17 344.63 T
1 6.26 Q
(The \322) 67.22 344.63 T
3 F
(FS) 82.51 344.63 T
1 F
(\323 variable c) 90.02 344.63 T
(hanges a) 122.31 344.63 T
(wk\325) 147.97 344.63 T
(s notion of what a \336eld is) 157.67 344.63 T
(. The) 229.82 344.63 T
-0.28 (following would print out the sixth \336eld of the password \336le \050should) 67.22 337.03 P
(you happen to \336nd a use for doing that\311\051) 67.22 329.44 T
0 F
(% ypcat passwd | a) 67.22 317.72 T
(wk \325BEGIN {FS = ":"}) 114.59 317.72 T
(> {print $6}\325) 67.22 308.51 T
2 4.47 Q
(\245) 59.17 293.6 T
1 6.26 Q
(The \322) 67.22 293.6 T
3 F
(FILENAME) 82.51 293.6 T
1 F
(\323 variable is useful either for printing out feedbac) 112.54 293.6 T
(k) 255.12 293.6 T
-0.27 (to the user) 67.22 286 P
-0.27 (, or for processing more than one \336le) 97.1 286 P
-0.27 (, and knowing whic) 200.42 286 P
-0.27 (h) 255.54 286 P
(one you\325re on) 67.22 278.41 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(12) 428.91 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Associative arra) 336.15 369.77 T
(ys and builtin functions) 416.28 369.77 T
2 4.47 Q
(\245) 334.18 344.63 T
1 6.26 Q
(A) 342.22 344.63 T
(wk does not ha) 346.58 344.63 T
(ve regular arra) 389.74 344.63 T
(ys) 433.47 344.63 T
(. It) 439.57 344.63 T
4 F
(onl) 449.77 344.63 T
(y) 458.74 344.63 T
1 F
( has associative arra) 461.87 344.63 T
(ys) 521.25 344.63 T
(.) 527.35 344.63 T
(This makes it very easy to do things like:) 342.22 337.03 T
0 F
($ypcat passwd | a) 342.22 325.31 T
(wk \325BEGIN {FS=":"}) 385.95 325.31 T
(> {count[$7]++}) 342.22 316.11 T
(> END {) 342.22 306.9 T
(>) 342.22 297.7 T
(for \050shell in count\051) 363.94 297.7 T
(>) 342.22 288.49 T
(print shell, count[shell]) 388.07 288.49 T
(> }\325 | sort) 342.22 279.29 T
(/bin/csh 3784) 342.22 270.08 T
(/bin/tcsh 783) 342.22 260.88 T
(/bin/true 28) 342.22 251.67 T
(/bin/zsh 4) 342.22 242.47 T
1 F
(See the examples section in the text for more examples of) 342.22 227.55 T
(associative arra) 342.22 219.96 T
(ys) 387.93 219.96 T
(.) 394.03 219.96 T
2 4.47 Q
(\245) 334.18 204.32 T
1 6.26 Q
(A) 342.22 204.32 T
(wk provides the following functions) 346.58 204.32 T
(, usable anywhere:) 448.84 204.32 T
(length \050) 342.22 192.7 T
4 F
(str) 364.58 192.7 T
1 F
(\051) 372.34 192.7 T
(returns the length of the string) 406.57 192.7 T
(. If you don\325t) 496.54 192.7 T
(give it a string) 406.57 185.1 T
(, it returns the length of the) 448.59 185.1 T
(current record.) 406.57 177.51 T
(int \050) 342.22 165.89 T
4 F
(num) 354.27 165.89 T
1 F
(\051) 367.48 165.89 T
(returns the integer portion of the number) 406.57 165.89 T
(index \050) 342.22 154.27 T
4 F
(str1) 361.92 154.27 T
1 F
(,) 373.15 154.27 T
4 F
(str2) 376.63 154.27 T
1 F
(\051) 387.87 154.27 T
(returns the position number of) 406.57 154.27 T
4 F
(str1) 497.05 154.27 T
1 F
( in) 508.29 154.27 T
4 F
(str2) 517.56 154.27 T
1 F
(,) 528.79 154.27 T
(or 0 if) 406.57 146.67 T
4 F
(str1) 425.22 146.67 T
1 F
( does not occur in) 436.46 146.67 T
4 F
(str2) 488.36 146.67 T
1 F
(split \050) 342.22 135.06 T
4 F
(str) 358.91 135.06 T
1 F
(,) 366.04 135.06 T
4 F
(arr) 369.52 135.06 T
1 F
(,) 378.04 135.06 T
4 F
(del) 381.52 135.06 T
1 F
(\051) 390.2 135.06 T
(places elements of) 406.57 135.06 T
4 F
(str) 460.91 135.06 T
1 F
(, delimited by) 468.04 135.06 T
4 F
(del) 509.18 135.06 T
1 F
(, in) 517.86 135.06 T
(arra) 406.57 127.46 T
(y) 419.02 127.46 T
4 F
(arr) 424.12 127.46 T
1 F
([1]\311) 433.26 127.46 T
4 F
(arr) 447.16 127.46 T
1 F
([) 456.31 127.46 T
4 F
(n) 458.39 127.46 T
1 F
(]; returns the number of) 462.22 127.46 T
(elements in the arra) 406.57 119.86 T
(y \050) 465.48 119.86 T
4 F
(n) 472.66 119.86 T
1 F
(\051) 476.49 119.86 T
(sprintf \050) 342.22 108.24 T
4 F
(fmt) 365.62 108.24 T
1 F
(,) 375.47 108.24 T
4 F
(args) 378.95 108.24 T
1 F
(\051) 391.45 108.24 T
(formats) 406.57 108.24 T
4 F
(args) 430.67 108.24 T
1 F
( according to) 443.17 108.24 T
4 F
(fmt) 481.63 108.24 T
1 F
( and returns) 491.48 108.24 T
(the formatted string; mimics the C) 406.57 100.65 T
-0.08 (programming language function of the same) 406.57 93.05 P
(name) 406.57 85.45 T
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(13) 153.91 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 6.26 Q
(substr \050) 67.22 771.98 T
4 F
(str) 89.35 771.98 T
1 F
(,) 96.48 771.98 T
4 F
(pos) 99.96 771.98 T
1 F
(,) 109.3 771.98 T
4 F
(l) 112.77 771.98 T
1 F
(\051) 114.86 771.98 T
(returns a substring of) 131.57 771.98 T
4 F
(str) 196.33 771.98 T
1 F
( that begins at) 204.08 771.98 T
4 F
(pos) 247.78 771.98 T
1 F
(and is) 131.57 764.39 T
4 F
(l) 150.8 764.39 T
1 F
( c) 152.88 764.39 T
(haracters long) 157.36 764.39 T
FMENDPAGE
%%EndPage: "mini" 4
%%Trailer
%%BoundingBox: 0 0 595.01 841.97
%%PageOrder: Ascend
%%Pages: 4
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%+ Symbol
%%EOF
