%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 8 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(1) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Command substitution) 170.08 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Running a pipeline surrounded by bac) 81.65 635.01 T
(kquotes causes the shell to:) 328.64 635.01 T
2 10 Q
(\245) 81.65 606.01 T
1 14 Q
(Run the pipeline) 99.65 606.01 T
2 10 Q
(\245) 81.65 577.01 T
1 14 Q
(Substitute the) 99.65 577.01 T
3 F
(output) 196.37 577.01 T
1 F
( of the pipeline for everything inside the) 238.37 577.01 T
(quotes) 99.65 560.01 T
2 10 Q
(\245) 63.65 525.01 T
1 14 Q
(The following uses the) 81.65 525.01 T
3 F
(expr) 230.48 525.01 T
1 F
( command to reset the value of a shell) 257.95 525.01 T
(variable:) 81.65 508.01 T
4 F
($ i=1) 99.65 482.54 T
($ expr $i + 1) 99.65 463.53 T
(2) 99.65 444.53 T
($ echo $i) 99.65 425.53 T
(1) 99.65 406.52 T
($ i=\324expr $1 + 1\324) 99.65 387.52 T
($ echo $i) 99.65 368.51 T
(2) 99.65 349.51 T
2 10 Q
(\245) 63.65 316.98 T
1 14 Q
(Y) 81.65 316.98 T
(ou can use bac) 90.1 316.98 T
(kquotes anywhere:) 183.61 316.98 T
4 F
(ls -l ${srcdir=\324pwd\324}/*.o) 99.65 291.51 T
1 F
(This sa) 81.65 258.98 T
(ys:) 128.45 258.98 T
2 10 Q
(\245) 81.65 229.98 T
1 14 Q
(if the variable) 99.65 229.98 T
3 F
(srcdir) 194.3 229.98 T
1 F
( is set, use its value) 232.38 229.98 T
2 10 Q
(\245) 81.65 200.98 T
1 14 Q
(if not, run) 99.65 200.98 T
3 F
(pwd) 168.61 200.98 T
1 F
(, set) 196.09 200.98 T
3 F
(srcdir) 226.7 200.98 T
1 F
( to whatever) 264.78 200.98 T
3 F
(pwd) 349.31 200.98 T
1 F
( returns) 376.79 200.98 T
(, and the use) 428.8 200.98 T
(this as the value) 99.65 183.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(2) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Flow Control) 225.42 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(These commands c) 81.65 635.01 T
(hange the order in whic) 202.89 635.01 T
(h commands are executed.) 356.27 635.01 T
(The scripts you\325ve seen so far ha) 81.65 600.01 T
(ve \322sequential\323 execution of the) 291 600.01 T
(commands: one command after another or in sequence) 81.65 583.01 T
(.) 432.96 583.01 T
2 10 Q
(\245) 63.65 548.01 T
1 14 Q
(There are several \337ow control constructs a) 81.65 548.01 T
(vailable:) 356.06 548.01 T
2 10 Q
(\245) 81.65 519.01 T
4 14 Q
(if then else) 99.65 519.01 T
2 10 Q
(\245) 81.65 490.01 T
1 14 Q
(multiple branc) 99.65 490.01 T
(h) 194.71 490.01 T
4 F
(case) 207.15 490.01 T
1 F
( statements) 240.75 490.01 T
2 10 Q
(\245) 81.65 461.01 T
4 14 Q
(for) 99.65 461.01 T
2 10 Q
(\245) 81.65 432.01 T
4 14 Q
(while) 99.65 432.01 T
2 10 Q
(\245) 81.65 403.01 T
4 14 Q
(until) 99.65 403.01 T
2 10 Q
(\245) 63.65 368.01 T
1 14 Q
(All run a single pipeline) 81.65 368.01 T
(, and examine its exit value for success:) 237.23 368.01 T
4 F
($ if who | grep -s -w scott) 99.65 342.54 T
(> then) 99.65 323.53 T
(> echo Scott is logged in.) 99.65 304.53 T
(> fi) 99.65 285.53 T
(Scott is logged in.) 99.65 266.52 T
($ if who | grep -s -w santa) 99.65 247.52 T
(> then) 99.65 228.51 T
(> echo Santa is logged in.) 99.65 209.51 T
(> fi) 99.65 190.51 T
($) 99.65 171.5 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(3) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Conditions) 237.65 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Conditions can be negated using the \322) 81.65 635.01 T
4 F
(!) 325.64 635.01 T
1 F
(\323 c) 334.04 635.01 T
(haracter:) 349.5 635.01 T
4 F
($ if ! who | grep -s -w santa) 99.65 609.54 T
(> then) 99.65 590.53 T
(> echo Santa is not logged in.) 99.65 571.53 T
(> fi) 99.65 552.53 T
(Santa is not logged in.) 99.65 533.52 T
2 10 Q
(\245) 63.65 500.99 T
1 14 Q
-0.49 (The) 81.65 500.99 P
3 F
-0.49 (test) 109.94 500.99 P
1 F
-0.49 ( command exists to) 132.23 500.99 P
3 F
-0.49 (onl) 258.12 500.99 P
-0.49 (y) 278.2 500.99 P
1 F
-0.49 ( return an exit status for conditionals) 285.2 500.99 P
-0.49 (.) 524.35 500.99 P
(\322[\323 is an alias for test, and test ignores a \336nal \322]\323, so that instead of:) 81.65 483.99 T
4 F
($ if test $i -eq 5) 81.65 458.52 T
1 F
(you can type:) 81.65 425.99 T
4 F
($ if [ $i -eq 5 ]) 81.65 400.51 T
1 F
(Thus) 81.65 367.98 T
(, the spaces around the brac) 114.23 367.98 T
(kets are syntactically important.) 295.62 367.98 T
2 10 Q
(\245) 63.65 332.98 T
1 14 Q
(It has the following Boolean expressions:) 81.65 332.98 T
2 10 Q
(\245) 81.65 303.98 T
1 14 Q
(Relational operators) 99.65 303.98 T
2 10 Q
(\245) 81.65 274.98 T
1 14 Q
(Unary \336le operators) 99.65 274.98 T
2 10 Q
(\245) 81.65 245.98 T
1 14 Q
(String comparison) 99.65 245.98 T
2 10 Q
(\245) 81.65 216.98 T
3 14 Q
(And) 99.65 216.98 T
1 F
(,) 126.61 216.98 T
3 F
(or) 134.4 216.98 T
1 F
( and) 147.61 216.98 T
3 F
(not) 179.77 216.98 T
2 10 Q
(\245) 81.65 187.98 T
1 14 Q
(P) 99.65 187.98 T
(arentheses for grouping) 108.47 187.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(4) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Boolean Expressions in T) 141.41 691.26 T
(est) 421.44 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Relational operators:) 81.65 635.01 T
4 F
(-eq) 99.65 609.01 T
1 F
(,) 124.85 609.01 T
4 F
(-ne) 132.63 609.01 T
1 F
(,) 157.58 609.01 T
4 F
(-gt) 165.36 609.01 T
1 F
(,) 190.56 609.01 T
4 F
(-ge) 198.35 609.01 T
1 F
(,) 223.3 609.01 T
4 F
(-lt) 231.08 609.01 T
1 F
(,) 256.28 609.01 T
4 F
(-le) 264.06 609.01 T
1 F
(These do) 81.65 574.01 T
3 F
(algebraic) 142.84 574.01 T
1 F
( comparisons over integers:) 202.19 574.01 T
4 F
($ if [ \324who | wc -l\324 -gt 5 ]) 99.65 548.54 T
(> then) 99.65 529.53 T
(> echo High system load.) 99.65 510.53 T
(> fi) 99.65 491.53 T
2 10 Q
(\245) 63.65 459 T
1 14 Q
(F) 81.65 459 T
(ile operators:) 90.85 459 T
4 F
(-f) 99.65 433 T
3 F
(\336le) 120.34 433 T
1 F
(True if) 171.65 433 T
3 F
(\336le) 219.61 433 T
1 F
( exists and is not a directory) 239.04 433 T
(.) 420.09 433 T
4 F
(-d) 99.65 411 T
3 F
(\336le) 120.34 411 T
1 F
(True if) 171.65 411 T
3 F
(\336le) 219.61 411 T
1 F
( exists and) 239.04 411 T
3 F
(is) 312.43 411 T
1 F
( a directory) 323.31 411 T
(.) 395.19 411 T
4 F
(-s) 99.65 389 T
3 F
(\336le) 120.34 389 T
1 F
(True if) 171.65 389 T
3 F
(\336le) 219.61 389 T
1 F
( exists and has a size other than zero) 239.04 389 T
(.) 478.37 389 T
(See the man page for others) 81.65 354 T
(.) 262.28 354 T
2 10 Q
(\245) 63.65 318.99 T
1 14 Q
(String operators:) 81.65 318.99 T
4 F
(-z) 99.65 292.99 T
3 F
(string) 120.34 292.99 T
1 F
(True if the length of) 171.65 292.99 T
3 F
(string) 305.43 292.99 T
1 F
( is zero) 343.53 292.99 T
(.) 388.9 292.99 T
4 F
(-n) 99.65 270.99 T
3 F
(string) 120.34 270.99 T
1 F
(True if the length of) 171.65 270.99 T
3 F
(string) 305.43 270.99 T
1 F
( is nonzero) 343.53 270.99 T
(.) 413.01 270.99 T
3 F
(s1) 99.65 248.99 T
4 F
(=) 117.54 248.99 T
3 F
(s2) 129.83 248.99 T
1 F
(True if) 171.65 248.99 T
3 F
(s1) 219.61 248.99 T
1 F
( and) 233.61 248.99 T
3 F
(s2) 265.77 248.99 T
1 F
( are the same) 279.77 248.99 T
(.) 366.91 248.99 T
3 F
(s1) 99.65 226.99 T
4 F
(!=) 117.54 226.99 T
3 F
(s2) 138.23 226.99 T
1 F
(True if) 171.65 226.99 T
3 F
(s1) 219.61 226.99 T
1 F
( and) 233.61 226.99 T
3 F
(s2) 265.77 226.99 T
1 F
( are different.) 279.77 226.99 T
3 F
(s1) 99.65 204.99 T
1 F
(True if) 171.65 204.99 T
3 F
(s1) 219.61 204.99 T
1 F
( is not the null string) 233.61 204.99 T
(.) 370.17 204.99 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(5) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Boolean Expressions in T) 141.41 691.26 T
(est) 421.44 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Expressions can be combined with the usual Boolean operators:) 81.65 635.01 T
4 F
($ if [ -f $HOME/.mailrc -a -f $MAIL ]) 81.65 609.54 T
(> then ...) 81.65 590.53 T
2 10 Q
(\245) 63.65 558 T
1 14 Q
(Some examples:) 81.65 558 T
2 10 Q
(\245) 81.65 529 T
1 14 Q
(F) 99.65 529 T
(rom my .zshrc \336le:) 108.85 529 T
4 F
(if [ -f /usr/bin/less ]) 81.65 503.53 T
(then) 81.65 484.53 T
(PAGER=/usr/bin/less) 130.25 465.52 T
(export PAGER) 130.25 446.52 T
(fi) 81.65 427.51 T
2 10 Q
(\245) 81.65 400.98 T
1 14 Q
(F) 99.65 400.98 T
(rom) 108.85 400.98 T
0 F
(/usr/ucb/vgrind) 138.4 400.98 T
1 F
( \050translated into Bourne shell\051:) 223.95 400.98 T
4 F
(if [ $f = 'filter' ]) 81.65 375.51 T
(then) 81.65 356.51 T
(if [ "$head" != "" ]) 130.25 337.5 T
(then ...) 130.25 318.5 T
2 10 Q
(\245) 81.65 291.97 T
1 14 Q
(One w) 99.65 291.97 T
(a) 140.63 291.97 T
(y to test if a variable is set:) 148.27 291.97 T
4 F
(if [ "$var"x = x ]) 81.65 266.49 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(6) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 136.55 531.65 708.95 R
7 X
V
1 24 Q
0 X
(A Little More on Shell V) 118.86 691.26 T
(ariables) 387.52 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Y) 81.65 635.01 T
(ou can use a default value if a variable is not already set by using) 90.1 635.01 T
(\322) 81.65 618.01 T
4 F
(${var-value}) 87.09 618.01 T
1 F
(\323:) 187.89 618.01 T
4 F
(#!/bin/sh) 81.65 592.54 T
(set -- \324ls -l ${1-.}\324) 81.65 573.53 T
(echo File $8 is $4 bytes long.) 81.65 554.53 T
2 10 Q
(\245) 63.65 522 T
1 14 Q
-0.35 (Y) 81.65 522 P
-0.35 (ou can do the same) 90.1 522 P
-0.35 (, but also set the variable) 211.85 522 P
-0.35 (, using \322) 373.47 522 P
4 F
-0.77 (${var=value}) 425.4 522 P
1 F
-0.35 (\323) 526.2 522 P
4 F
($ echo $color) 81.65 496.53 T
($ echo ${color-red}) 81.65 458.52 T
(red) 81.65 439.51 T
($ echo $color) 81.65 420.51 T
($ echo ${color=red}) 81.65 382.5 T
(red) 81.65 363.5 T
($ echo $color) 81.65 344.49 T
(red) 81.65 325.49 T
($ echo ${color=green}) 81.65 306.49 T
(red) 81.65 287.48 T
($ echo $color) 81.65 268.48 T
(red) 81.65 249.47 T
2 10 Q
(\245) 63.65 216.94 T
1 14 Q
(There are several other similar constructs) 81.65 216.94 T
(. See sh\0501\051.) 353.26 216.94 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(7) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 136.55 531.65 708.95 R
7 X
V
1 24 Q
0 X
(If then else) 235.43 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(The \322) 81.65 635.01 T
4 F
(if) 115.88 635.01 T
1 F
(\323 \337ow control statement selects between alternatives:) 134.08 635.01 T
4 F
(if [ $USER = scott ]) 81.65 609.54 T
(then) 81.65 590.53 T
-0.26 (echo "Hi, Scott! Thanks for running my program!") 130.25 571.53 P
(fi) 81.65 552.53 T
2 10 Q
(\245) 63.65 519.99 T
1 14 Q
(An \322) 81.65 519.99 T
4 F
(else) 109.65 519.99 T
1 F
(\323 c) 143.25 519.99 T
(lause can also be given:) 158.7 519.99 T
4 F
(if [ $# -eq 0 ]) 81.65 494.52 T
(then) 81.65 475.52 T
(echo "Usage: $0 filename [filename]") 130.25 456.51 T
(else) 81.65 437.51 T
(file=$1) 130.25 418.51 T
(fi) 81.65 399.5 T
2 10 Q
(\245) 63.65 366.97 T
1 14 Q
(Y) 81.65 366.97 T
(ou can nest consecutive \322) 90.1 366.97 T
4 F
(if) 251.1 366.97 T
1 F
(\323 statements with \322) 269.3 366.97 T
4 F
(elif) 393.26 366.97 T
1 F
(\323:) 428.26 366.97 T
4 F
(if [ $# -eq 1 ]) 81.65 341.5 T
(then) 81.65 322.49 T
(machine=$1) 130.25 303.49 T
(user=) 130.25 284.49 T
(elif [ $# -eq 2 ]) 81.65 265.48 T
(then) 81.65 246.48 T
(machine=$2) 130.25 227.47 T
(user=$1) 130.25 208.47 T
(else) 81.65 189.47 T
(echo "Usage: $0 [user] machine") 130.25 170.46 T
(fi) 81.65 151.46 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(8) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 136.55 531.65 708.95 R
7 X
V
1 24 Q
0 X
(F) 221.87 691.26 T
(or) 236.56 691.26 T
3 F
(var) 265.88 691.26 T
1 F
( in) 302.77 691.26 T
3 F
(list) 338.34 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(The \322for\323 statement evaluates a set of commands once for eac) 81.65 635.01 T
(h of a) 476.7 635.01 T
(list of possibilities:) 81.65 618.01 T
4 F
($ for f in *.ps) 81.65 592.54 T
(> do) 81.65 573.53 T
(>) 81.65 554.53 T
(echo -n "Print $f? [n] ") 130.25 554.53 T
(>) 81.65 535.53 T
(read yesno) 130.25 535.53 T
(>) 81.65 516.52 T
(if [ ${yesno-n} = "y" ]) 130.25 516.52 T
(>) 81.65 497.52 T
(then) 130.25 497.52 T
(>) 81.65 478.51 T
(lpr -P$PRINTER $f) 184.25 478.51 T
(>) 81.65 459.51 T
(fi) 130.25 459.51 T
(> done) 81.65 440.51 T
(Print hw1.ps? [n] y) 81.65 421.5 T
(Print test1.ps? [n]) 81.65 402.5 T
($) 81.65 383.49 T
2 10 Q
(\245) 63.65 350.96 T
1 14 Q
(If the \322) 81.65 350.96 T
4 F
(in) 126.24 350.96 T
3 F
(list) 146.93 350.96 T
1 F
(\323 part is omitted, it defaults to) 167.4 350.96 T
4 F
("$*":) 366.81 350.96 T
(#!/bin/sh) 81.65 325.49 T
(for f) 81.65 306.49 T
(do) 81.65 287.48 T
(if [ -f $f ]) 130.25 268.48 T
(then) 130.25 249.47 T
(echo $f exists) 184.25 230.47 T
(fi) 130.25 211.47 T
(done) 81.65 192.46 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(9) 295.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(While) 264.98 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
-0.37 (The \322) 81.65 635.01 P
4 F
-0.79 (while) 115.51 635.01 P
1 F
-0.37 (\323 statement loops inde\336nitely) 157.51 635.01 P
-0.37 (, until the condition becomes) 344.2 635.01 P
(true:) 81.65 618.01 T
4 F
($ find . -name core -print > clist&) 81.65 592.54 T
(2884) 81.65 573.53 T
($ while ps | grep -v grep | grep -s 2884) 81.65 554.53 T
(> do) 81.65 535.53 T
(>) 81.65 516.52 T
(ls -l clist) 130.25 516.52 T
(>) 81.65 497.52 T
(sleep 15) 130.25 497.52 T
(> done) 81.65 478.51 T
(-rw-r--r--  1 scott          0 Oct 19 12:51 clist) 81.65 459.51 T
(-rw-r--r--  1 scott          0 Oct 19 12:51 clist) 81.65 440.51 T
(-rw-r--r--  1 scott          0 Oct 19 12:51 clist) 81.65 421.5 T
(-rw-r--r--  1 scott       4493 Oct 19 12:52 clist) 81.65 402.5 T
($) 81.65 383.49 T
2 10 Q
(\245) 63.65 350.96 T
1 14 Q
(Y) 81.65 350.96 T
(ou can also do something like a C \050or P) 90.1 350.96 T
(ASC) 339.82 350.96 T
(AL\051) 368.61 350.96 T
3 F
(while) 396.61 350.96 T
1 F
(loop:) 435.48 350.96 T
4 F
($ i=1) 81.65 325.49 T
($ while [ $i -le 3 ]) 81.65 306.49 T
(> do) 81.65 287.48 T
(>) 81.65 268.48 T
(echo $i) 130.25 268.48 T
(>) 81.65 249.47 T
(i=\324expr $i + 1\324) 130.25 249.47 T
(> done) 81.65 230.47 T
(1) 81.65 211.47 T
(2) 81.65 192.46 T
(3) 81.65 173.46 T
($) 81.65 154.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(10) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(While) 264.98 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(Note that it is your responsibility to make sure that the loop) 81.65 635.01 T
(eventually exits:) 81.65 618.01 T
4 F
($ i=1) 99.65 592.54 T
($ while [ $i -lt 3 ]) 99.65 573.53 T
(> do) 99.65 554.53 T
(>) 99.65 535.53 T
(echo $i) 144.65 535.53 T
(> done) 99.65 516.52 T
(1) 99.65 497.52 T
(1) 99.65 478.51 T
(1) 99.65 459.51 T
(...) 99.65 440.51 T
2 10 Q
(\245) 63.65 407.98 T
1 14 Q
(The) 81.65 407.98 T
3 F
(expr) 110.43 407.98 T
1 F
( command comes in handy for while) 137.9 407.98 T
(. It evaluates simple) 369.18 407.98 T
(arithmetic expressions:) 81.65 390.98 T
4 F
($ expr 1 + 4) 99.65 365.5 T
(5) 99.65 346.5 T
($ expr 5 + \325\050\325 3 \325*\325 2 \325\051\325) 99.65 327.49 T
(11) 99.65 308.49 T
1 F
(Note that \322) 81.65 256.96 T
4 F
(expr 5 + \0503 * 2\051) 152.96 256.96 T
1 F
(\323) 287.36 256.96 T
3 F
(de\336nitel) 296.7 256.96 T
(y) 348.91 256.96 T
1 F
( won\325t do what is intended!) 355.91 256.96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(11) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Until) 268.31 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(The \322) 81.65 635.01 T
4 F
(until) 115.88 635.01 T
1 F
(\323 statement is like the \322) 157.88 635.01 T
4 F
(while) 309.85 635.01 T
1 F
(\323 statement, but with the) 351.85 635.01 T
(sense of the condition reversed. Whic) 81.65 618.01 T
(h you use is entirely a matter of) 321.09 618.01 T
(convenience and personal preference:) 81.65 601.01 T
4 F
($ i=1) 99.65 575.54 T
($ until [ $i -gt 3 ]) 99.65 556.53 T
(> do) 99.65 537.53 T
(>) 99.65 518.53 T
(echo $i) 144.65 518.53 T
(>) 99.65 499.52 T
(i=\324expr $1 + 1\324) 144.65 499.52 T
(> done) 99.65 480.52 T
(1) 99.65 461.51 T
(2) 99.65 442.51 T
(3) 99.65 423.51 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(12) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Break and continue) 188.53 691.26 T
1 14 Q
(These are \337ow control constructs to interrupt the normal \337ow) 63.65 635.01 T
(, in) 460.38 635.01 T
3 F
(while) 485.02 635.01 T
1 F
(,) 519.75 635.01 T
3 F
(until) 63.65 618.01 T
1 F
( and) 95.01 618.01 T
3 F
(f) 127.17 618.01 T
(or) 131.69 618.01 T
1 F
( loops) 144.9 618.01 T
(.) 181.37 618.01 T
2 10 Q
(\245) 63.65 583.01 T
1 14 Q
(\322) 81.65 583.01 T
4 F
(Break) 87.09 583.01 T
1 F
(\323 transfers program control to the next script command after) 129.09 583.01 T
(the \322done\323 line of the current loop) 81.65 566.01 T
4 F
(while read cmd) 81.65 540.54 T
(do) 81.65 521.53 T
(if [ ${cmd=null} = exit ]) 130.25 502.53 T
(then) 130.25 483.53 T
(break) 184.25 464.52 T
(fi) 130.25 445.52 T
(echo $cmd) 130.25 426.51 T
(done) 81.65 407.51 T
2 10 Q
(\245) 63.65 355.98 T
1 14 Q
(\322) 81.65 355.98 T
4 F
(Continue) 87.09 355.98 T
1 F
(\323 skips to done statement of current loop whic) 154.29 355.98 T
(h then) 449.51 355.98 T
(continues execution of the loop) 81.65 338.98 T
(.) 279.99 338.98 T
4 F
(while read cmd) 81.65 313.5 T
(do) 81.65 294.5 T
(if [ ${cmd=null} = exit ]) 130.25 275.49 T
(then) 130.25 256.49 T
(continue) 184.25 237.49 T
(fi) 130.25 218.48 T
(echo $cmd) 130.25 199.48 T
(done) 81.65 180.47 T
78.05 384.94 268.85 474.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
96.5 392.76 96.67 389.8 86.15 392.19 96.34 395.73 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
96.5 392.76 96.67 389.8 86.15 392.19 96.34 395.73 4 Y
V
232.61 467.74 M
 272.45 459.54 247.65 434.88 227.24 423.75 D
 193.32 405.25 143.72 395.39 96.75 392.78 D
2 Z
N
-8.35 24.95 603.65 816.95 C
78.05 157.9 315.65 247.9 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
96.51 192.05 96.57 189.08 86.15 191.86 96.46 195.02 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
96.51 192.05 96.57 189.08 86.15 191.86 96.46 195.02 4 Y
V
261.88 237.1 M
 283.25 219.69 268.11 208.95 243.65 202.29 D
 202.47 191.07 152.32 193.09 96.76 192.06 D
2 Z
N
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(13) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Case) 270.76 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(The \322) 81.65 635.01 T
4 F
(case) 115.88 635.01 T
1 F
(\323 statement selects one of a number of speci\336ed) 149.48 635.01 T
(possibilities\320with pattern matc) 81.65 618.01 T
(hing) 283.56 618.01 T
(. It\325) 312.24 618.01 T
(s basically like a set of nested) 333.68 618.01 T
3 F
(if) 81.65 601.01 T
1 F
( statements) 90.97 601.01 T
(.) 166.6 601.01 T
2 10 Q
(\245) 63.65 566.01 T
1 14 Q
(Eac) 81.65 566.01 T
(h c) 105.66 566.01 T
(lause has:) 124.22 566.01 T
2 10 Q
(\245) 81.65 537.01 T
1 14 Q
(A pattern, terminated by a right parenthesis) 99.65 537.01 T
2 10 Q
(\245) 81.65 508.01 T
1 14 Q
(The pattern can ha) 99.65 508.01 T
(ve \336lename expansion style special c) 223.45 508.01 T
(haracters) 459.83 508.01 T
(,) 521.17 508.01 T
(plus \322) 99.65 491.01 T
4 F
(|) 136.47 491.01 T
1 F
(\323 to list alternatives) 144.87 491.01 T
2 10 Q
(\245) 81.65 462.01 T
1 14 Q
(Any number of shell commands) 99.65 462.01 T
(, on as many lines as you like) 303.08 462.01 T
2 10 Q
(\245) 81.65 433.01 T
1 14 Q
(The last one must be terminated with \322) 99.65 433.01 T
4 F
(;;) 353.26 433.01 T
1 F
(\323) 370.06 433.01 T
2 10 Q
(\245) 63.65 398.01 T
1 14 Q
(The entire case statement is ended by the word \322) 81.65 398.01 T
4 F
(esac) 396.69 398.01 T
1 F
(\323 \050case spelled) 430.29 398.01 T
(bac) 81.65 381.01 T
(kw) 103.33 381.01 T
(ards\051 on a separate line) 122.28 381.01 T
4 F
(case $# in) 99.65 355.54 T
(1\051) 99.65 336.53 T
(machine=$1) 144.65 336.53 T
(user=) 144.65 317.53 T
(;;) 144.65 298.53 T
(2\051) 99.65 279.52 T
(machine=$2) 144.65 279.52 T
(user=$1) 144.65 260.52 T
(;;) 144.65 241.51 T
(*\051) 99.65 222.51 T
(echo "Usage: $0 [user] machine") 144.65 222.51 T
(exit 1;;) 144.65 203.51 T
(esac) 99.65 184.5 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(14) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Case) 270.76 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(A \322) 81.65 635.01 T
4 F
(case) 101.09 635.01 T
1 F
(\323 statement is often used to handle user input:) 134.69 635.01 T
4 F
(prompt=":-> ") 99.65 609.54 T
(echo -n "$prompt") 99.65 590.53 T
(while true) 99.65 571.53 T
(do) 99.65 552.53 T
(read cmd args) 144.65 533.52 T
(case "$cmd" in) 144.65 514.52 T
(telnet\051) 144.65 495.51 T
(telnet ustsu5;;) 252.65 495.51 T
(ftp\051) 144.65 476.51 T
(ftp prep.ai.mit.edu;;) 252.65 476.51 T
(exit\051) 144.65 457.51 T
(exit 0;;) 252.65 457.51 T
(*\051) 144.65 438.5 T
(echo "$USAGE";;) 252.65 438.5 T
(esac) 144.65 419.5 T
(echo -n "$prompt") 144.65 400.49 T
(done) 99.65 381.49 T
1 F
(or:) 81.65 348.96 T
4 F
(echo -n "Print a copy? [n] ") 99.65 323.49 T
(read yesno) 99.65 304.48 T
(case $yesno in) 99.65 285.48 T
(y|yes\051) 99.65 266.47 T
(lpr -P$PRINTER $file;;) 198.65 266.47 T
(*\051) 99.65 247.47 T
(;;) 198.65 247.47 T
(esac) 99.65 228.47 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(15) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Here documents) 207.22 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(A here document is a w) 81.65 635.01 T
(a) 232.55 635.01 T
(y to give a particular input to a command as) 240.2 635.01 T
(its stdin.) 81.65 618.01 T
2 10 Q
(\245) 63.65 583.01 T
1 14 Q
(The here document is given as part of the script) 81.65 583.01 T
2 10 Q
(\245) 63.65 548.01 T
1 14 Q
(Given with \322) 81.65 548.01 T
4 F
(<<) 162.55 548.01 T
3 F
(word) 183.25 548.01 T
1 F
(\323 and ends with a line containing only) 215.91 548.01 T
3 F
(word) 464.32 548.01 T
1 F
(.) 496.99 548.01 T
2 10 Q
(\245) 63.65 513.01 T
1 14 Q
(F) 81.65 513.01 T
(or example) 90.22 513.01 T
(, the following are equivalent \050but the second is more) 161.27 513.01 T
(ef\336cient\051:) 81.65 496.01 T
4 F
(echo "This is a README file for my wonderful") 99.65 470.54 T
(echo "command. Thank you ever so much for") 99.65 451.53 T
(echo "being willing to read my immortal words") 99.65 432.53 T
(echo "of prose.") 99.65 413.53 T
(echo "") 99.65 394.52 T
(echo "- Guillaume Chequespierre") 99.65 375.52 T
1 F
(and) 81.65 342.99 T
4 F
(cat <<EOF) 99.65 317.51 T
(This is a README file for my wonderful) 99.65 298.51 T
(command. Thank you ever so much for) 99.65 279.51 T
(being willing to read my immortal words") 99.65 260.5 T
(of prose.) 99.65 241.5 T
(- Guillaume Chequespierre) 99.65 203.49 T
(EOF) 99.65 184.49 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
27.65 114.95 567.65 744.95 R
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(16) 293.65 100.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 150.95 531.65 708.95 R
7 X
V
1 24 Q
0 X
(Here documents) 207.22 691.26 T
2 10 Q
(\245) 63.65 635.01 T
1 14 Q
(In effect, the programmer can create a tiny database this w) 81.65 635.01 T
(a) 465.14 635.01 T
(y:) 472.78 635.01 T
4 F
(#!/bin/sh) 99.65 609.54 T
(#) 99.65 590.53 T
(#) 99.65 571.53 T
(birthday -- look up my friends\325 birthdays) 144.65 571.53 T
(#) 99.65 552.53 T
(# Usage: birthday person [person]) 99.65 533.52 T
(#) 99.65 514.52 T
(if [ $# -eq 0 ]) 99.65 495.51 T
(then) 99.65 476.51 T
(echo "Usage: $0 person [person]") 144.65 457.51 T
(exit 1) 144.65 438.5 T
(fi) 99.65 419.5 T
(for arg) 99.65 381.49 T
(do) 99.65 362.49 T
(grep -w -i "^$arg" << EODB) 144.65 343.48 T
(Alex) 99.65 324.48 T
(June 22) 198.65 324.48 T
(Barbara) 99.65 305.47 T
(Feb 3) 198.65 305.47 T
(Darlene) 99.65 286.47 T
(May 8) 198.65 286.47 T
(Helen) 99.65 267.47 T
(March 13) 198.65 267.47 T
(Jenny) 99.65 248.46 T
(January 23) 198.65 248.46 T
(Nancy) 99.65 229.46 T
(June 26) 198.65 229.46 T
(EODB) 99.65 210.45 T
(done) 99.65 191.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 16
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%EOF
