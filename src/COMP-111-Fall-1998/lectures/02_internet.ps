%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.01 841.97 1 1 10 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-1) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Basic Internet) 124.46 768.25 T
1 8.04 Q
(Networks) 141.98 741.92 T
1 6.26 Q
(\245) 59.17 716.3 T
(What\325) 67.22 716.3 T
(s a network?) 84.21 716.3 T
(\245) 67.22 703.34 T
(A network connects computers together using hardw) 75.26 703.34 T
(are and) 227.49 703.34 T
(softw) 75.26 695.75 T
(are) 90.56 695.75 T
(\245) 67.22 682.79 T
0 7.15 Q
(The computers in a netw) 75.26 682.79 T
(ork can v) 145.88 682.79 T
(ary from a single-user PC to) 172.3 682.79 T
(the lar) 75.26 675.19 T
(gest supercomputer) 93.2 675.19 T
1 6.26 Q
(\245) 67.22 662.23 T
0 7.15 Q
(A netw) 75.26 662.23 T
(ork can contain as fe) 96.04 662.23 T
(w as tw) 155.02 662.23 T
(o computers) 176.79 662.23 T
1 6.26 Q
(\245) 67.22 649.27 T
0 7.15 Q
(Netw) 75.26 649.27 T
(orks are usually classi\336ed by the distance between the) 90.68 649.27 T
(systems in netw) 75.26 641.68 T
(ork:) 120.87 641.68 T
1 6.26 Q
(\245) 75.26 630.06 T
0 7.15 Q
(A Local Area Netw) 83.31 630.06 T
(ork \050LAN\051 connects systems that are) 139.42 630.06 T
(usually in a single b) 83.31 622.46 T
(uilding or a short distance from one) 140.36 622.46 T
(another) 83.31 614.87 T
(. \050hardw) 104.35 614.87 T
(are includes v) 128.1 614.87 T
(arious cable technologies\051) 167.63 614.87 T
1 6.26 Q
(\245) 75.26 603.25 T
0 7.15 Q
(A Metropolitan Area Netw) 83.31 603.25 T
(ork \050MAN\051 connects systems) 160.47 603.25 T
(usually within a city or campus. \050hardw) 83.31 595.65 T
(are includes cables,) 196.62 595.65 T
(land micro) 83.31 588.06 T
(w) 113.91 588.06 T
(a) 119 588.06 T
(v) 122.03 588.06 T
(e\051) 125.5 588.06 T
1 6.26 Q
(\245) 75.26 576.44 T
0 7.15 Q
(A W) 83.31 576.44 T
(ide Area Netw) 96.72 576.44 T
(ork \050W) 138.34 576.44 T
(AN\051 connects systems that can be) 157.93 576.44 T
(across the w) 83.31 568.84 T
(orld from each other) 118.57 568.84 T
(. \050hardw) 176.75 568.84 T
(are includes cables,) 200.5 568.84 T
(satellite\051) 83.31 561.24 T
1 6.26 Q
(\245) 59.17 545.6 T
0 7.15 Q
(If you connect tw) 67.22 545.6 T
(o netw) 117.38 545.6 T
(orks together with another netw) 136.57 545.6 T
(ork, you) 227.44 545.6 T
(ha) 67.22 538.01 T
(v) 73.82 538.01 T
(e formed an) 77.29 538.01 T
2 F
(inter) 113.23 538.01 T
(net.) 127.81 538.01 T
59.17 464.3 260.83 776.15 C
59.17 478.46 260.83 535.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.13 496.78 114.17 502.81 R
0 X
0 0 0 1 0 0 0 K
V
0.22 H
2 Z
N
77.98 514.88 82 517.9 R
V
N
82 498.59 86.02 501.61 R
V
N
106.93 518.9 110.96 520.91 R
V
N
109.35 501.61 109.35 519.7 2 L
N
106.13 500.4 85.22 500.4 2 L
N
106.13 502.81 80.39 517.29 2 L
N
198.63 514.43 206.67 520.91 R
V
N
230.8 498.23 234.82 501.47 R
V
N
226.78 515.73 230.8 518.97 R
V
N
201.85 494.99 205.87 497.15 R
V
N
203.46 515.73 203.46 496.29 2 L
N
206.67 517.02 227.59 517.02 2 L
N
206.67 514.43 232.41 498.88 2 L
N
90 450 4.02 4.02 122.22 516.89 G
90 450 4.02 4.02 122.22 516.89 A
109.54 501.43 122.22 516.89 2 L
N
82 516.89 110.15 520.91 2 L
N
114.17 500.8 202.65 516.89 2 L
N
61.89 480.69 147.15 528.95 R
N
173.89 480.69 259.15 528.95 R
N
0 7.15 Q
(Netw) 71.75 486.1 T
(ork 1) 87.16 486.1 T
(Netw) 214.72 486.1 T
(ork 2) 230.13 486.1 T
59.17 464.3 260.83 776.15 C
27 432.13 293 808.33 C
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-2) 428.02 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(The Internet) 403.33 768.25 T
1 6.26 Q
(\245) 334.18 743.11 T
(The Internet is an internet, and one of the very biggest W) 342.22 743.11 T
(ANs) 508.63 743.11 T
(.) 520.99 743.11 T
(\245) 334.18 727.47 T
(How it\325) 342.22 727.47 T
(s different from other nets:) 362.69 727.47 T
(\245) 342.22 714.52 T
(It is not private) 350.27 714.52 T
(. Anyone can connect.) 395.34 714.52 T
(\245) 342.22 701.56 T
(Nobody is in c) 350.27 701.56 T
(harge) 390.66 701.56 T
(. It works anyw) 407.11 701.56 T
(a) 451.84 701.56 T
(y) 455.26 701.56 T
(.) 457.84 701.56 T
(\245) 342.22 688.6 T
0 7.15 Q
-0.09 (It pro) 350.27 688.6 P
-0.09 (vides it\325) 365.75 688.6 P
-0.09 (s users po) 388.5 688.6 P
-0.09 (wer and functions that is incomparable to) 416.34 688.6 P
(an) 350.27 681 T
(y other netw) 356.91 681 T
(ork for a v) 392.58 681 T
(ery) 422.45 681 T
(, v) 431.11 681 T
(ery lo) 438.16 681 T
(w cost) 454.46 681 T
1 6.26 Q
(:) 472.92 681 T
(\245) 334.18 665.36 T
(Basic features) 342.22 665.36 T
(\245) 342.22 652.4 T
(All sites on the Internet use TCP/IP) 350.27 652.4 T
(.) 453.3 652.4 T
(\245) 342.22 639.44 T
(Allows split-second, world-wide access to many information) 350.27 639.44 T
(sources) 350.27 631.85 T
(\245) 342.22 618.89 T
(Any computer can \322talk\323 to any other computer) 350.27 618.89 T
(\245) 342.22 605.93 T
(Seamless connectivity; no borders to cross) 350.27 605.93 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-3) 153.02 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Domains and naming) 106.77 369.77 T
1 6.26 Q
(\245) 59.17 344.63 T
0 7.15 Q
(General form of a name is: \322) 67.22 344.63 T
0 6.26 Q
(machine.domain) 149.02 344.63 T
0 7.15 Q
(\323) 190.54 344.63 T
1 6.26 Q
(\245) 59.17 328.99 T
(Domain) 67.22 328.99 T
0 7.15 Q
(usually indicates what type of or) 91.79 328.99 T
(g) 184.79 328.99 T
(anization o) 188.33 328.99 T
(wns the) 219.72 328.99 T
(machine. Le) 67.22 321.39 T
(g) 102.45 321.39 T
(al domain names include:) 105.99 321.39 T
1 6.26 Q
(com) 83.31 309.78 T
(Usually a company or commercial entity) 123.52 309.78 T
(edu) 83.31 301.29 T
(An educational institution) 123.52 301.29 T
(gov) 83.31 292.79 T
(governmental sites) 123.52 292.79 T
(mil) 83.31 284.3 T
(military sites) 123.52 284.3 T
(net) 83.31 275.81 T
(usually a gatew) 123.52 275.81 T
(a) 168.95 275.81 T
(y to a network) 172.37 275.81 T
(org) 83.31 267.32 T
(private organizations that don\325t \336t into other) 123.52 267.32 T
(categories) 127.54 259.73 T
(\245) 59.17 244.09 T
(Eac) 67.22 244.09 T
(h domain also has a top level country code:) 77.95 244.09 T
(hk) 83.31 232.47 T
(Hong K) 123.52 232.47 T
(ong) 145.71 232.47 T
(au) 83.31 223.98 T
(Australia) 123.52 223.98 T
(ca) 83.31 215.49 T
(Canada) 123.52 215.49 T
(fr) 83.31 207 T
(F) 123.52 207 T
(rance) 127.63 207 T
(\245) 59.17 191.36 T
(Examples of mac) 67.22 191.36 T
(hine names:) 116.18 191.36 T
0 F
(csnt1.cs.ust.hk) 83.31 179.74 T
(prep.ai.mit.edu) 83.31 171.25 T
(ftp.uu.net) 83.31 162.76 T
(whitehouse.go) 83.31 154.27 T
(v) 119.53 154.27 T
1 F
(\245) 59.17 138.63 T
-0.04 (W) 67.22 138.63 P
-0.04 (ithin the same subnet, you can usually lea) 73.24 138.63 P
-0.04 (ve off everything after) 195.17 138.63 P
(the \336rst period.) 67.22 131.03 T
(\245) 59.17 115.39 T
(Every name is mapped to an Internet address) 67.22 115.39 T
(\245) 67.22 102.44 T
(An Internet address is four one byte integers) 75.26 102.44 T
(\245) 67.22 89.48 T
(Usually written like this: 143.89.14.254) 75.26 89.48 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-4) 428.02 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Programs for the Internet) 370.86 369.77 T
1 6.26 Q
(\245) 334.18 344.63 T
(Transferring \336les:) 342.22 344.63 T
(\245) 342.22 331.67 T
(FTP \050\336le transfer protocol\051) 350.27 331.67 T
(\245) 342.22 318.71 T
0 F
(archie) 350.27 318.71 T
1 F
(\245) 334.18 303.07 T
(Odds and ends:) 342.22 303.07 T
(\245) 342.22 290.11 T
0 F
(\336nger) 350.27 290.11 T
1 F
( for \336nding people) 364.86 290.11 T
(\245) 342.22 277.16 T
0 F
(ping) 350.27 277.16 T
1 F
(\245) 342.22 264.2 T
0 F
(talk) 350.27 264.2 T
1 F
(\245) 342.22 251.24 T
(IRC) 350.27 251.24 T
(\245) 342.22 238.28 T
(Email) 350.27 238.28 T
(\245) 334.18 222.64 T
(Connecting:) 342.22 222.64 T
(\245) 342.22 209.68 T
0 F
(telnet) 350.27 209.68 T
1 F
(\245) 342.22 196.72 T
0 F
(rlogin) 350.27 196.72 T
1 F
(\245) 342.22 183.76 T
0 F
(rsh) 350.27 183.76 T
1 F
(\245) 334.18 168.12 T
(Usenet) 342.22 168.12 T
(\245) 334.18 152.48 T
(W) 342.22 152.48 T
(orld W) 347.98 152.48 T
(ide W) 367.21 152.48 T
(eb) 383.4 152.48 T
(\245) 334.18 136.84 T
(Gopher) 342.22 136.84 T
(\245) 334.18 121.2 T
(W) 342.22 121.2 T
(AIS) 348.05 121.2 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-5) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(FTP) 149.27 768.25 T
1 6.26 Q
(\245) 59.17 743.11 T
(Basics) 67.22 743.11 T
(\245) 67.22 730.16 T
-0.14 (FTP is a F) 75.26 730.16 P
-0.14 (ile Transfer Protocol widely a) 105.03 730.16 P
-0.14 (vailable on the Internet.) 189.44 730.16 P
(\245) 67.22 717.2 T
(Using ftp) 75.26 717.2 T
(, you can copy \336les between mac) 102.14 717.2 T
(hines all over the) 195.14 717.2 T
(world.) 75.26 709.6 T
(\245) 67.22 696.64 T
(T) 75.26 696.64 T
(o use ftp) 79.09 696.64 T
(, you either ha) 103.54 696.64 T
(ve to ha) 145.3 696.64 T
(ve a login on the remote) 168.07 696.64 T
(mac) 75.26 689.04 T
(hine or you can use \322anonymous ftp\323) 87.04 689.04 T
(\245) 59.17 673.4 T
(Anonymous ftp) 67.22 673.4 T
(\245) 67.22 660.45 T
(A w) 75.26 660.45 T
(a) 86.27 660.45 T
(y that sites can provide worldwide access to a restricted) 89.69 660.45 T
(part of their disk) 75.26 652.85 T
(\245) 67.22 639.89 T
-0.24 (The usual venue for sharing information or softw) 75.26 639.89 P
-0.24 (are with others) 215.65 639.89 P
(who do not ha) 75.26 632.29 T
(ve a login on your mac) 115.64 632.29 T
(hine or if you w) 180.36 632.29 T
(ant to put) 225.09 632.29 T
(the information in the \322public domain\323) 75.26 624.7 T
(\245) 59.17 609.06 T
(An example:) 67.22 609.06 T
0 F
(% ftp ftp.cs.cuhk.hk) 67.22 597.34 T
(Name \050ftp.cs.cuhk.hk:g) 67.22 588.13 T
(ankw\051: anon) 125.91 588.13 T
(ymous) 156.92 588.13 T
(P) 67.22 578.59 T
(assw) 70.6 578.59 T
(ord:) 82.7 578.59 T
3 F
(P) 193.42 578.59 T
(assword does not ec) 197.25 578.59 T
(ho) 253.31 578.59 T
0 F
(230 Guest login ok, access restrictions apply) 67.22 569.39 T
(.) 178.54 569.39 T
(ftp> cd /pub/Linux) 67.22 560.18 T
(250 CWD command successful.) 67.22 550.97 T
3 F
(etc) 67.22 541.43 T
(.) 74.66 541.43 T
1 F
(\245) 59.17 517.13 T
(Note: FTP refers to a protocol, but softw) 67.22 517.13 T
(are implementing the) 182.97 517.13 T
(protocol typically use \322ftp\323 as the name of the softw) 67.22 509.53 T
(are:) 215.18 509.53 T
0 F
(ftp, ncftp, xftp, ftptool, etc) 67.22 497.81 T
1 F
(\245) 59.17 482.9 T
(Y) 67.22 482.9 T
(ou can also do ftp using netscape) 71 482.9 T
(.) 165.77 482.9 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-6) 428.02 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(FTP) 424.28 768.25 T
1 6.26 Q
(\245) 334.18 743.11 T
(Commands:) 342.22 743.11 T
(dir) 358.31 731.5 T
(Like \322ls\323 on UNIX, lists contents of current) 398.53 731.5 T
(directory) 402.55 723.9 T
(cd) 358.31 715.41 T
(Changes current directory) 398.53 715.41 T
(pwd) 358.31 706.92 T
(Prints current directory name) 398.53 706.92 T
(get) 358.31 698.43 T
(Transfers a \336le from the remote mac) 398.53 698.43 T
(hine to) 504.26 698.43 T
(your mac) 402.55 690.83 T
(hine) 429.15 690.83 T
(put) 358.31 682.34 T
(Transfers a \336le from the other direction) 398.53 682.34 T
(mget) 358.31 673.85 T
(Get multiple \336les) 398.53 673.85 T
(mput) 358.31 665.36 T
(Put multiple \336les) 398.53 665.36 T
(\245) 334.18 649.72 T
(Transfer modes) 342.22 649.72 T
(\245) 342.22 636.76 T
-0.18 (ASCII mode makes sure that everything that gets transferred is) 350.27 636.76 P
(\050or becomes!\051 a c) 350.27 629.17 T
(haracter) 397.72 629.17 T
(.) 421.77 629.17 T
(\245) 342.22 616.21 T
(BINARY transfer mode does no processing on the \336les that are) 350.27 616.21 T
(transferred.) 350.27 608.61 T
(\245) 342.22 595.65 T
(FTP is in ASCII mode by default. Type \322) 350.27 595.65 T
0 F
(binary) 466.6 595.65 T
1 F
(\323 to switc) 482.58 595.65 T
(h to) 508.96 595.65 T
(binary) 350.27 588.06 T
(. Y) 368.37 588.06 T
(ou) 375.63 588.06 T
3 F
(must) 384.32 588.06 T
1 F
( be in binary mode to transfer images) 398.68 588.06 T
(, sound,) 506.75 588.06 T
(etc) 350.27 580.46 T
(.) 358.49 580.46 T
(\245) 334.18 564.82 T
(Transferring \336les) 342.22 564.82 T
(\245) 342.22 551.86 T
(W) 350.27 551.86 T
(ildcard c) 356.29 551.86 T
(haracters work:) 380.92 551.86 T
4 F
(ftp> mget *.ps) 350.27 540.48 T
1 F
(\245) 342.22 528.62 T
-0.23 (By default,) 350.27 528.62 P
0 F
-0.21 (mget) 383.4 528.62 P
1 F
-0.23 ( asks you to con\336rm eac) 395.92 528.62 P
-0.23 (h \336le) 463.53 528.62 P
-0.23 (. Turn this off using) 477.67 528.62 P
(the \322) 350.27 521.03 T
0 F
(prompt) 363.82 521.03 T
1 F
(\323 command.) 381.9 521.03 T
(\245) 334.18 505.39 T
(A few great sites:) 342.22 505.39 T
0 F
(ftp.uu.net) 342.22 493.77 T
1 F
(Everything) 422.66 493.77 T
(. They\325ve got) 455.05 493.77 T
3 F
(everything) 493.17 493.77 T
1 F
(.) 523.01 493.77 T
0 F
(wuarchi) 342.22 485.28 T
(v) 362.22 485.28 T
(e.wustl.edu) 365.25 485.28 T
1 F
(Almost as muc) 422.66 485.28 T
(h as the above) 465.13 485.28 T
(.) 506.39 485.28 T
0 F
(sunsite.unc.edu) 342.22 476.79 T
1 F
(Lots of SUN related stuff) 422.66 476.79 T
(.) 495.19 476.79 T
0 F
(sunsite.ust.hk) 342.22 468.3 T
1 F
(Asia\325) 422.66 468.3 T
(s answer to sunsite) 436.64 468.3 T
(.unc) 492.14 468.3 T
(.edu!) 504.19 468.3 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-7) 153.02 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Connecting) 131.9 369.77 T
1 6.26 Q
(\245) 59.17 344.63 T
-0.15 (T) 67.22 344.63 P
-0.15 (elnet is the most common protocol for gaining an interactive login) 71.05 344.63 P
(session with a remote site) 67.22 337.03 T
(.) 141.96 337.03 T
(\245) 67.22 324.07 T
(Usage:) 75.26 324.07 T
0 F
(telnet) 96.7 324.07 T
3 F
(mac) 112.34 324.07 T
(hine) 124.16 324.07 T
4 F
(% telnet cslx5.ust.hk) 75.26 312.69 T
(Trying 143.89.85.74...) 75.26 304.2 T
(Connected to cslx5.ust.hk.) 75.26 295.71 T
(Escape character is '^]'.) 75.26 287.22 T
(Linux v1.1.5 \050wisdom\051 \050ttyp2\051) 75.26 261.74 T
(login:) 75.26 244.76 T
(Password:) 75.26 236.26 T
1 F
(\245) 59.17 221.73 T
(Rlogin works between UNIX mac) 67.22 221.73 T
(hines) 163.23 221.73 T
(, when you ha) 178.71 221.73 T
(ve a login on) 218.86 221.73 T
(both.) 67.22 214.13 T
4 F
(csnt1% rlogin cslx5) 75.26 202.75 T
(Password:) 75.26 194.26 T
(cslx5%) 75.26 185.76 T
1 F
(\245) 59.17 171.23 T
-0.25 (Rsh works like rlogin, except that, if you ha) 67.22 171.23 P
-0.25 (ve it set up) 191.21 171.23 P
-0.25 (, you can run) 222.33 171.23 P
(commands on a remote mac) 67.22 163.63 T
(hine without logging in.) 147.35 163.63 T
4 F
(csnt1% rsh cslx5 who) 75.26 152.25 T
(jeff     console Oct 29 09:52) 75.26 143.76 T
(jeff     ttyp1   Oct 29 09:55) 75.26 135.26 T
1 F
(\245) 67.22 123.41 T
(This requires setting up a \336le called \322) 75.26 123.41 T
0 F
(.rhosts) 183.48 123.41 T
1 F
(\323 in your home) 199.99 123.41 T
(directory) 75.26 115.81 T
(. See rsh\0501\051 for more information. And be careful\311) 100.42 115.81 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-8) 428.02 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Usenet) 417.43 369.77 T
1 6.26 Q
(\245) 334.18 344.63 T
(What is usenet?) 342.22 344.63 T
(\245) 342.22 331.67 T
(A set of mac) 350.27 331.67 T
(hines that exc) 385.44 331.67 T
(hange artic) 425.95 331.67 T
(les tagged with one or) 458.69 331.67 T
-0.13 (more universally \050on earth\051 recognized labels called newsgroups) 350.27 324.07 P
(or groups for short.) 350.27 316.48 T
(\245) 342.22 303.52 T
(A newsgroup is a collection of \322artic) 350.27 303.52 T
(les\323 written by users; its) 453.1 303.52 T
(somewhat like a public address system.) 350.27 295.92 T
(\245) 342.22 282.96 T
(Eac) 350.27 282.96 T
(h site determines what newsgroups shall be maintained;) 360.99 282.96 T
(ultimately the system\325) 350.27 275.37 T
(s administrators \050or owners of the) 414.65 275.37 T
-0.2 (mac) 350.27 267.77 P
-0.2 (hines\051 at the local sites ha) 362.04 267.77 P
-0.2 (ve the \336nal sa) 436.64 267.77 P
-0.2 (y on what news is to) 476.54 267.77 P
(be distributed.) 350.27 260.17 T
(\245) 334.18 244.53 T
(Newsgroups are organized according to their topic) 342.22 244.53 T
(. Common) 487.04 244.53 T
(categories inc) 342.22 236.94 T
(lude:) 381.57 236.94 T
0 F
(comp) 342.22 225.32 T
1 F
-0.31 (of interest to computer professionals and hobbyists suc) 374.4 225.32 P
-0.31 (h) 530.58 225.32 P
(as a) 378.42 217.72 T
(vailable softw) 389.95 217.72 T
(are) 429.82 217.72 T
(, computer science) 439.09 217.72 T
(, etc) 491.91 217.72 T
(.) 503.62 217.72 T
0 F
(sci) 342.22 209.23 T
1 F
(topics regard special knowledge about researc) 374.4 209.23 T
(h or) 506.78 209.23 T
(applications of scienti\336c \336elds \050) 378.42 201.64 T
3 F
(sci.lang) 468.79 201.64 T
1 F
(\051) 491.02 201.64 T
0 F
(soc) 342.22 193.15 T
1 F
(social groups and issues \050soc) 374.4 193.15 T
(.culture) 456.42 193.15 T
(.hongkong\051) 478.78 193.15 T
0 F
(talk) 342.22 184.66 T
1 F
(often lengthy debates about misc topics) 374.4 184.66 T
0 F
(ne) 342.22 176.17 T
(ws) 347.97 176.17 T
1 F
(information about usenet itself \050) 374.4 176.17 T
3 F
(news) 467.67 176.17 T
(.groups) 481.6 176.17 T
1 F
(\051) 502.79 176.17 T
0 F
(rec) 342.22 167.68 T
1 F
(devoted to recreational topics) 374.4 167.68 T
0 F
(alt) 342.22 159.19 T
1 F
(all kinds of things \050can be offensive to some\051) 374.4 159.19 T
0 F
(misc) 342.22 150.7 T
1 F
(whatever doesn\325t \336t anywhere else \050) 374.4 150.7 T
3 F
(misc) 478.21 150.7 T
(.jobs) 491.09 150.7 T
1 F
(\051) 504.19 150.7 T
0 F
(gnu) 342.22 142.21 T
1 F
(inc) 374.4 142.21 T
(ludes information about the F) 382.92 142.21 T
(ree Softw) 469.3 142.21 T
(are) 496.41 142.21 T
(F) 378.42 134.61 T
(oundation and GNU softw) 382.25 134.61 T
(are \050) 457.91 134.61 T
3 F
(gnu.emacs) 471.12 134.61 T
1 F
(\051) 501.35 134.61 T
0 F
(biz) 342.22 126.12 T
1 F
(business topics) 374.4 126.12 T
0 F
(clari) 342.22 117.63 T
1 F
-0.23 (stands for Clarinet news \321 a commercial news provider) 374.4 117.63 P
(provides newsfeeds up to 3 hours old, refreshed every) 378.42 110.03 T
(week) 378.42 102.44 T
0 F
(hkust) 342.22 93.95 T
1 F
(local groups) 374.4 93.95 T
(. P) 408.88 93.95 T
(eople use) 416.3 93.95 T
3 F
(hkust.voices) 444.57 93.95 T
1 F
( as a place to c) 479.2 93.95 T
(hat) 520.99 93.95 T
(about things) 378.42 86.35 T
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-9) 153.02 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Usenet) 142.43 768.25 T
1 6.26 Q
(\245) 59.17 743.11 T
(Newsgroups) 67.22 743.11 T
(\245) 67.22 730.16 T
(Some newsgroups are \322moderated\323, and sometimes even) 75.26 730.16 T
(censored.) 75.26 722.56 T
(\245) 67.22 709.6 T
-0.03 (The newsgroups are listed in a \336le called \322.newsrc\323; it is created) 75.26 709.6 P
(for you by your news reader) 75.26 702 T
(, and records whic) 155.15 702 T
(h groups you) 207.47 702 T
(\322subscribe\323 to and whic) 75.26 694.41 T
(h artic) 142.42 694.41 T
(les you\325ve already read) 161.38 694.41 T
(\245) 67.22 681.45 T
-0.01 (There are some 6,000 newsgroups) 75.26 681.45 P
-0.01 (, and several hundred Mbytes) 173.08 681.45 P
(of information exc) 75.26 673.85 T
(hanged) 127.35 673.85 T
3 F
(dail) 150.29 673.85 T
(y) 161.81 673.85 T
1 F
(.) 164.15 673.85 T
3 F
(Nobody) 167.63 673.85 T
1 F
( reads everything) 189.41 673.85 T
(.) 239.77 673.85 T
(\245) 59.17 658.21 T
(News readers are softw) 67.22 658.21 T
(are programs that present Usenet news) 134.88 658.21 T
(groups in different w) 67.22 650.62 T
(a) 127.58 650.62 T
(ys \321 some are easier to use than others) 130.99 650.62 T
(\245) 67.22 637.66 T
(Some news readers are:) 75.26 637.66 T
0 F
(rn) 83.31 626.04 T
1 F
(A simple news reader) 123.52 626.04 T
(. Type \322h\323 for help) 185.34 626.04 T
(.) 237.37 626.04 T
0 F
(trn) 83.31 617.55 T
1 F
(Threaded news reader) 123.52 617.55 T
(. A little friendlier than) 187.66 617.55 T
-0.01 (rn because responses on the same subject can) 127.54 609.95 P
(be \322threaded together\323 by reply order) 127.54 602.36 T
(. This) 234.31 602.36 T
(makes it easier to follow a \322conversation\323.) 127.54 594.76 T
0 F
(tin) 83.31 586.27 T
1 F
(Even a little more friendly with several levels) 123.52 586.27 T
(of abstraction in the interface \050groups) 127.54 578.67 T
(,) 236.4 578.67 T
(threads) 127.54 571.08 T
(, etc) 149.51 571.08 T
(.\051) 161.22 571.08 T
0 F
(xrn) 83.31 562.59 T
1 F
(An X W) 123.52 562.59 T
(indows based newsreader) 145.77 562.59 T
0 F
(gnus) 83.31 554.1 T
1 F
(A news reader internal to GNU emacs) 123.52 554.1 T
(\245) 67.22 541.14 T
(Most news readers work by opening an NNTP \050) 75.26 541.14 T
217.2 540.6 212.1 540.6 2 L
V
0.14 H
N
(N) 212.1 541.14 T
(et) 217.2 541.14 T
229.6 540.6 224.5 540.6 2 L
V
N
(N) 224.5 541.14 T
(ews) 229.6 541.14 T
79.43 533 75.26 533 2 L
V
N
(T) 75.26 533.54 T
(ransfer) 79.43 533.54 T
106.31 533 102.14 533 2 L
V
N
(P) 102.14 533.54 T
(rotocol\051 connection to another mac) 106.31 533.54 T
(hine that actually) 205.43 533.54 T
(has the news artic) 75.26 525.94 T
(les) 128.17 525.94 T
(. Some news readers expect the artic) 136.01 525.94 T
(les to) 241.63 525.94 T
(ha) 75.26 518.35 T
(ve been copied into \336les on a local disk.) 82.5 518.35 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-10) 427.13 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Usenet) 417.43 768.25 T
1 6.26 Q
(\245) 334.18 743.11 T
(Y) 342.22 743.11 T
(ou post things on the net either from your newsreader or with a) 346 743.11 T
(separate program \050e) 342.22 735.52 T
(.g) 400.38 735.52 T
(. postnews\051.) 405.33 735.52 T
(\245) 334.18 719.88 T
(Usenet has its own culture) 342.22 719.88 T
(.) 419.62 719.88 T
(\245) 342.22 706.92 T
(Read the artic) 350.27 706.92 T
(les in \322) 391.24 706.92 T
0 F
(ne) 410.94 706.92 T
(ws.announce.ne) 416.68 706.92 T
(wusers) 456.48 706.92 T
1 F
(\323 before you post an) 473.86 706.92 T
(artic) 350.27 699.32 T
(le) 363.66 699.32 T
(. When you \336rst start using usenet, you\325re a \322newbie\323.) 368.65 699.32 T
(Sometimes the net is not gentle with newbies) 350.27 691.73 T
(.) 481.28 691.73 T
(\245) 342.22 678.77 T
(W) 350.27 678.77 T
(atc) 355.93 678.77 T
(h out for \322\337ames\323 \050strongly worded critical artic) 364.58 678.77 T
(les\051) 502.17 678.77 T
(directed against you!) 350.27 671.17 T
(\245) 342.22 658.21 T
(And whatever you do) 350.27 658.21 T
(,) 411.32 658.21 T
3 F
(never) 414.8 658.21 T
1 F
( spam a newsgroup! T) 430.2 658.21 T
(o spam is to) 493.24 658.21 T
-0.09 (\337ood a newsgroup or newsgroups with a lot of artic) 350.27 650.62 P
-0.09 (les) 496.51 650.62 P
-0.09 (, just to be) 504.35 650.62 P
(nasty) 350.27 643.02 T
(.) 365.47 643.02 T
(\245) 342.22 630.06 T
(Excessive cross-posting is also frowned upon. This means) 350.27 630.06 T
(posting one artic) 350.27 622.46 T
(le to a lot of newsgroups) 398.42 622.46 T
(.) 468.13 622.46 T
(\245) 342.22 609.51 T
(Never) 350.27 609.51 T
(, ever post an artic) 367.13 609.51 T
(le entitled \322MAKE MONEY F) 420.96 609.51 T
(AST\323.) 506.39 609.51 T
(There ha) 350.27 601.91 T
(ve been a few famous \050!\051 people who posted a c) 376.27 601.91 T
(hain) 509.59 601.91 T
(letter) 350.27 594.31 T
(. Y) 365.51 594.31 T
(ou will be \337amed mercilessly if you do this) 372.77 594.31 T
(.) 495.08 594.31 T
(\245) 342.22 581.35 T
(Don\325t forget, usenet is a) 350.27 581.35 T
3 F
(community) 420.71 581.35 T
1 F
( of students and) 452.8 581.35 T
(professionals spread all over the world. When you post an) 350.27 573.76 T
(artic) 350.27 566.16 T
(le) 363.66 566.16 T
(, it ma) 368.65 566.16 T
(y end up being read by tens of thousands of people) 387.24 566.16 T
(.) 532.54 566.16 T
(\245) 342.22 553.2 T
(Many people use a \322) 350.27 553.2 T
0 F
(.signature) 408.08 553.2 T
1 F
(\323 \336le) 432.58 553.2 T
(, whic) 445.56 553.2 T
(h many newsreaders) 462.43 553.2 T
-0.17 (automatically append to the artic) 350.27 545.6 P
-0.17 (les that you post. It\325) 445.96 545.6 P
-0.17 (s not polite) 502.61 545.6 P
(to ha) 350.27 538.01 T
(ve a very long \322) 364.8 538.01 T
0 F
(.signature) 409.07 538.01 T
1 F
(\323.) 433.56 538.01 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-11) 152.12 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(W) 80.66 369.77 T
(ide Area Information Services) 90.99 369.77 T
1 6.26 Q
(\245) 59.17 344.63 T
(The main wide area information services \050this year) 67.22 344.63 T
(, at least\051 are:) 214.2 344.63 T
(\245) 67.22 331.67 T
(W) 75.26 331.67 T
(orld W) 81.02 331.67 T
(ide W) 100.25 331.67 T
(eb) 116.44 331.67 T
(\245) 67.22 318.71 T
(Gopher) 75.26 318.71 T
(\245) 67.22 305.75 T
(W) 75.26 305.75 T
(AIS) 81.09 305.75 T
(\245) 59.17 290.11 T
(Eac) 67.22 290.11 T
(h depends on:) 77.95 290.11 T
(\245) 67.22 277.16 T
(A) 75.26 277.16 T
3 F
(server) 81.52 277.16 T
1 F
( that runs on some set of mac) 98.65 277.16 T
(hines on the net, and) 183.42 277.16 T
(manages access to one or more collections of information.) 75.26 269.56 T
(\245) 67.22 256.6 T
(One or more) 75.26 256.6 T
3 F
(clients) 112.8 256.6 T
1 F
( that run on user\325) 131.32 256.6 T
(s mac) 181.56 256.6 T
(hines and serve as) 197.97 256.6 T
(user interfaces to the information service) 75.26 249 T
(.) 194.12 249 T
(\245) 67.22 236.04 T
(A) 75.26 236.04 T
3 F
(protocol) 81.52 236.04 T
1 F
( used by the c) 104.33 236.04 T
(lient and server to make and process) 143.68 236.04 T
(requests for information.) 75.26 228.45 T
(\245) 59.17 212.81 T
(Some c) 67.22 212.81 T
(lients \050like Netscape Na) 87.45 212.81 T
(vigator) 156.8 212.81 T
(, Internet Explorer\051 know) 176.68 212.81 T
-0.25 (more than one protocol. Na) 67.22 205.21 P
-0.25 (vigator \322speaks\323 Gopher protocol, HTTP) 144.59 205.21 P
(\050W) 67.22 197.62 T
(orld W) 75.06 197.62 T
(ide W) 94.29 197.62 T
(eb\325) 110.48 197.62 T
(s protocol\051, FTP \050F) 118.21 197.62 T
(ile Transfer Protocol\311) 171.79 197.62 T
(remember?\051 and several others) 67.22 190.02 T
(.) 156.5 190.02 T
(\245) 59.17 174.38 T
(Most of the c) 67.22 174.38 T
(lients present the user with a menu of c) 104.13 174.38 T
(hoices) 218.9 174.38 T
(. When) 236.47 174.38 T
(you select one \050by c) 67.22 166.78 T
(lic) 122.55 166.78 T
(king on it with a mouse) 129.23 166.78 T
(, for example\051, the) 197.14 166.78 T
(c) 67.22 159.19 T
(lient:) 69.95 159.19 T
(\245) 67.22 146.23 T
(Looks at its record of the item to see where it \322really\323 is) 75.26 146.23 T
(.) 235.35 146.23 T
(\245) 67.22 133.27 T
(Sends a request to the server program using the proper protocol) 75.26 133.27 T
(\245) 67.22 120.31 T
(W) 75.26 120.31 T
(aits for the server to respond) 80.93 120.31 T
(\245) 67.22 107.35 T
(Receives the information from the server) 75.26 107.35 T
(\245) 67.22 94.39 T
(Displa) 75.26 94.39 T
(ys \050perhaps after formatting\051 the information it receives) 93.97 94.39 T
(\245) 59.17 78.75 T
(The net \050sorry) 67.22 78.75 T
0 F
(:-) 109.96 78.75 T
1 F
(\051 result is that the user can access information all) 113.79 78.75 T
(over the net just as if it were on his or her own computer) 67.22 71.16 T
(.) 230.41 71.16 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-12) 427.13 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(W) 394.04 369.77 T
(orld W) 403.92 369.77 T
(ide W) 436.89 369.77 T
(eb) 464.64 369.77 T
1 6.26 Q
(\245) 334.18 344.63 T
(History:) 342.22 344.63 T
(1970\325) 342.22 333.01 T
(s) 357.26 333.01 T
(The concept of hypertext w) 374.4 333.01 T
(as invented in the 70\325) 452.13 333.01 T
(s by) 513.97 333.01 T
(T) 378.42 325.42 T
(ed Nelson.) 382.25 325.42 T
(1980\325) 342.22 316.92 T
(s) 357.26 316.92 T
(V) 374.4 316.92 T
(arious \050not very successful\051 hypertext systems were) 378.38 316.92 T
(written 80\325) 378.42 309.33 T
(s \050e) 409.67 309.33 T
(.g) 419.4 309.33 T
(. Mac Hypercard\051) 424.34 309.33 T
(8/1989) 342.22 300.84 T
(Planning began at CERN for net-wide hypertext) 374.4 300.84 T
(1/1991) 342.22 292.35 T
(F) 374.4 292.35 T
(irst WWW c) 378.51 292.35 T
(lient released to the net) 413.21 292.35 T
(2/1993) 342.22 283.86 T
(F) 374.4 283.86 T
(irst release of NCSA Mosaic \050~50 known servers\051) 378.51 283.86 T
(3/1993) 342.22 275.37 T
(WWW accounts for 1% of NSFNet traf\336c) 374.4 275.37 T
(6/1994) 342.22 266.88 T
(Over 1,500 registered servers) 374.4 266.88 T
(\245) 334.18 251.24 T
(F) 342.22 251.24 T
(eatures:) 346.05 251.24 T
(\245) 342.22 238.28 T
(W) 350.27 238.28 T
(orld W) 356.03 238.28 T
(ide W) 375.26 238.28 T
(eb \050WWW\051 works because of three things:) 391.45 238.28 T
(\245) 350.27 226.66 T
(Servers are free and effective) 358.31 226.66 T
(. It\325) 442.64 226.66 T
(s) 452.22 226.66 T
3 F
(easy) 456.86 226.66 T
1 F
( to make your) 469.13 226.66 T
(information a) 358.31 219.06 T
(vailable to the net!) 397.64 219.06 T
(\245) 350.27 207.45 T
(Good c) 358.31 207.45 T
(lients exist for most platforms) 377.5 207.45 T
(. The new program) 464.23 207.45 T
(Netscape is a quantum improvement over its predecessor) 358.31 199.85 T
(,) 523.13 199.85 T
(Mosaic) 358.31 192.25 T
(.) 378.35 192.25 T
(\245) 350.27 180.63 T
(All you ha) 358.31 180.63 T
(ve to do to make something useful for Netscape is) 387.79 180.63 T
(to write a document in HTML.) 358.31 173.04 T
(\245) 334.18 157.4 T
(HTML has features for) 342.22 157.4 T
(\245) 342.22 144.44 T
(T) 350.27 144.44 T
(ext markup \050headings) 354.09 144.44 T
(, c) 417.43 144.44 T
(haracter formatting) 423.64 144.44 T
(, etc\051) 480.95 144.44 T
(\245) 342.22 131.48 T
(Inline images and more exotic things like sounds and movies) 350.27 131.48 T
(\245) 342.22 118.52 T
(Hypertext links to other HTML pages) 350.27 118.52 T
(, images) 459.36 118.52 T
(, etc) 483.08 118.52 T
(.:) 494.78 118.52 T
0 F
(<HTML>) 342.22 106.8 T
(<TITLE>This is an e) 342.22 97.6 T
(xample</TITLE>) 395.23 97.6 T
(Hi! I\325m Ralph Schmidt!) 342.22 88.39 T
(<A HREF="http://zot.glorp.edu/icons/ralph.gif">Here) 342.22 79.19 T
(is my picture!</A></HTML>) 342.22 69.98 T
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(II-13) 152.12 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(W) 119.04 768.25 T
(orld W) 128.92 768.25 T
(ide W) 161.88 768.25 T
(eb) 189.64 768.25 T
1 6.26 Q
(\245) 59.17 743.11 T
(The basic operations performed by Netscape are:) 67.22 743.11 T
(\245) 67.22 730.16 T
(Accept a request to open a URL \050Uniform Resource Locator\051) 75.26 730.16 T
(from a user) 75.26 722.56 T
(.) 107.77 722.56 T
(\245) 67.22 709.6 T
(P) 75.26 709.6 T
(ass the request to the appropriate computer on the Internet.) 79.2 709.6 T
(\245) 67.22 696.64 T
(Receive data from the remote server) 75.26 696.64 T
(.) 179.48 696.64 T
(\245) 67.22 683.68 T
-0.16 (If the data is in HTML, format it and put it on the screen. If not,) 75.26 683.68 P
(invoke an external browser \050e) 75.26 676.09 T
(.g) 160.89 676.09 T
(.) 165.83 676.09 T
3 F
(xview) 169.31 676.09 T
1 F
( for images or) 185.41 676.09 T
3 F
(mpeg_play) 226.66 676.09 T
1 F
(for movies\051.) 75.26 668.49 T
(\245) 59.17 652.85 T
(An HTML document is called a \322W) 67.22 652.85 T
(eb page\323.) 167.18 652.85 T
(\245) 67.22 639.89 T
-0.12 (The page that Netscape puts on the screen when \336rst invoked is) 75.26 639.89 P
(called your \322home page\323.) 75.26 632.29 T
(\245) 67.22 619.34 T
(By default, it\325) 75.26 619.34 T
(s the Netscape homepage) 114.39 619.34 T
(.) 187.5 619.34 T
(\245) 67.22 606.38 T
(But you can make any page \322on the W) 75.26 606.38 T
(eb\323 your home page \321) 184.96 606.38 T
(even a page that you write yourself!) 75.26 598.78 T
(\245) 67.22 585.82 T
(See \322) 75.26 585.82 T
(A Beginner\325) 89.17 585.82 T
(s Guide to HTML) 123.07 585.82 T
(\323 for more information.) 172.96 585.82 T
(\245) 59.17 570.18 T
-0.28 (Y) 67.22 570.18 P
-0.28 (ou can spend a lot of time \322W) 71 570.18 P
-0.28 (eb sur\336ng\323. If you \336nd something you) 152.75 570.18 P
-0.26 (like) 67.22 562.59 P
-0.26 (, you can put it into your \322bookmark\323, whic) 77.89 562.59 P
-0.26 (h lets you get bac) 199.51 562.59 P
-0.26 (k to) 248.6 562.59 P
(the page without na) 67.22 554.99 T
(vigating your w) 125.09 554.99 T
(a) 170.17 554.99 T
(y there through the W) 173.58 554.99 T
(eb) 237.5 554.99 T
(.) 243.99 554.99 T
(\245) 59.17 539.35 T
(Here are a few nice W) 67.22 539.35 T
(eb pages for you to try:) 130.56 539.35 T
(Y) 67.22 527.73 T
(ahoo!) 71 527.73 T
0 4.91 Q
(http://www) 111.46 527.73 T
(.yahoo.com/) 133.53 527.73 T
1 6.26 Q
(Xerox map) 67.22 518.35 T
0 4.91 Q
(http://pubweb) 111.46 518.35 T
(.parc.x) 138.57 518.35 T
(erox.com/map) 151.87 518.35 T
1 6.26 Q
(server) 71.24 510.75 T
(L) 67.22 501.37 T
(ycos) 71.24 501.37 T
0 4.91 Q
(http://www) 111.46 501.37 T
(.lycos.com/) 133.53 501.37 T
1 6.26 Q
(UST Sunsite) 67.22 491.98 T
0 4.91 Q
(http://sunsite.ust.hk/) 111.46 491.98 T
FMENDPAGE
%%EndPage: "mini" 4
%%Trailer
%%BoundingBox: 0 0 595.01 841.97
%%PageOrder: Ascend
%%Pages: 4
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ Times-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%EOF
