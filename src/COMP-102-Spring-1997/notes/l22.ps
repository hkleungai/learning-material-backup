%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 27 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /Palatino-Roman FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
7 0 /NewCenturySchlbk-Bold FMFONTDEFINE
8 0 /NewCenturySchlbk-Roman FMFONTDEFINE
9 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
10 0 /NewCenturySchlbk-Italic FMFONTDEFINE
11 0 /Times-Italic FMFONTDEFINE
12 1 /Symbol FMFONTDEFINE
13 0 /Courier-BoldOblique FMFONTDEFINE
14 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 1) 383.04 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Selection Sort Algorithm) 142.01 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(*) 72.82 708.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Order an array in descending order) 88.85 708.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11.45 Q
(\245) 88.85 676.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336nd the lar) 100.31 676.61 T
(gest element  in array [0 .. size-1] and) 155.9 676.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exchange it with element 0;) 100.31 663.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 88.85 646.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336nd the lar) 100.31 646.07 T
(gest element  in array [1 .. size-1] and) 155.9 646.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exchange it with element 1;) 100.31 632.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 25.45 Q
(...) 100.31 619.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11.45 Q
(\245) 88.85 602.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336nd the lar) 100.31 602.16 T
(gest element  in array [size-2 .. size-1] and) 155.9 602.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exchange it with element size-2;) 100.31 588.8 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10.18 Q
(1.) 72.82 558.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(for Index = 0 to size-2 do) 91.14 558.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(2.) 93.78 545.74 T
5 F
( Find the position of the largest) 106 545.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     element in subarray [Index..size-1].) 81.56 533.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(3.) 93.78 520.28 T
5 F
( if Index is not the position of the) 106 520.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     largest element then) 81.56 507.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(4.) 112.11 494.83 T
5 F
( Switch the largest element with) 124.33 494.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(        the one at position Index.) 81.56 482.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(Re\336nement f) 72.82 457.92 T
(or step 2:) 128.27 457.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(2.1) 81.56 433.1 T
5 F
( Initialize the position of the largest) 99.89 433.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      element to Index.) 81.56 420.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(2.2) 81.56 407.65 T
5 F
( for Next = Index+1 to size-1 do) 99.89 407.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(2.3) 106 394.92 T
5 F
( if the element at Next > the largest) 124.33 394.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           element so far then) 81.56 382.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(2.4) 130.44 369.47 T
5 F
( set the position of the largest) 148.76 369.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            element found so far to Next.) 81.56 356.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 2) 781.49 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Selection Sort) 575.65 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
0 0 0 1 0 0 0 K
471.27 446.89 769.08 705.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
459.49 446.89 780.85 705.89 R
7 X
0 0 0 1 0 0 0 K
V
476.03 679.66 498.94 700.16 R
V
1.27 H
2 Z
0 X
N
0 11.45 Q
(18) 481.75 684.51 T
498.94 679.66 521.85 700.16 R
7 X
V
0 X
N
(35) 504.66 684.51 T
521.84 679.66 544.75 700.16 R
7 X
V
0 X
N
(22) 527.57 684.51 T
544.75 679.66 567.66 700.16 R
7 X
V
0 X
N
(97) 550.48 684.51 T
567.66 679.66 590.57 700.16 R
7 X
V
0 X
N
(84) 573.39 684.51 T
590.57 679.66 613.48 700.16 R
7 X
V
0 X
N
(55) 596.3 684.51 T
613.48 679.66 636.39 700.16 R
7 X
V
0 X
N
(61) 619.21 684.51 T
636.39 679.66 659.3 700.16 R
7 X
V
0 X
N
(10) 642.11 684.51 T
659.3 679.66 682.21 700.16 R
7 X
V
0 X
N
(47) 665.02 684.51 T
476.03 654.04 498.94 674.54 R
5 X
V
0 X
N
(97) 481.75 658.88 T
498.94 654.04 521.85 674.54 R
7 X
V
0 X
N
(35) 504.66 658.88 T
521.84 654.04 544.75 674.54 R
7 X
V
0 X
N
(22) 527.57 658.88 T
544.75 654.04 567.66 674.54 R
7 X
V
0 X
N
(18) 550.48 658.88 T
567.66 654.04 590.57 674.54 R
7 X
V
0 X
N
(84) 573.39 658.88 T
590.57 654.04 613.48 674.54 R
7 X
V
0 X
N
(55) 596.3 658.88 T
613.48 654.04 636.39 674.54 R
7 X
V
0 X
N
(61) 619.21 658.88 T
636.39 654.04 659.3 674.54 R
7 X
V
0 X
N
(10) 642.11 658.88 T
659.3 654.04 682.21 674.54 R
7 X
V
0 X
N
(47) 665.02 658.88 T
476.03 628.42 498.94 648.92 R
5 X
V
0 X
N
(97) 481.75 633.26 T
498.94 628.42 521.85 648.92 R
5 X
V
0 X
N
(84) 504.66 633.26 T
521.84 628.42 544.75 648.92 R
7 X
V
0 X
N
(22) 527.57 633.26 T
544.75 628.42 567.66 648.92 R
7 X
V
0 X
N
(18) 550.48 633.26 T
567.66 628.42 590.57 648.92 R
7 X
V
0 X
N
(35) 573.39 633.26 T
590.57 628.42 613.48 648.92 R
7 X
V
0 X
N
(55) 596.3 633.26 T
613.48 628.42 636.39 648.92 R
7 X
V
0 X
N
(61) 619.21 633.26 T
636.39 628.42 659.3 648.92 R
7 X
V
0 X
N
(10) 642.11 633.26 T
659.3 628.42 682.21 648.92 R
7 X
V
0 X
N
(47) 665.02 633.26 T
476.03 602.8 498.94 623.29 R
5 X
V
0 X
N
(97) 481.75 607.64 T
498.94 602.8 521.85 623.29 R
5 X
V
0 X
N
(84) 504.66 607.64 T
521.84 602.8 544.75 623.29 R
5 X
V
0 X
N
(61) 527.57 607.64 T
544.75 602.8 567.66 623.29 R
7 X
V
0 X
N
(18) 550.48 607.64 T
567.66 602.8 590.57 623.29 R
7 X
V
0 X
N
(35) 573.39 607.64 T
590.57 602.8 613.48 623.29 R
7 X
V
0 X
N
(55) 596.3 607.64 T
613.48 602.8 636.39 623.29 R
7 X
V
0 X
N
(22) 619.21 607.64 T
636.39 602.8 659.3 623.29 R
7 X
V
0 X
N
(10) 642.11 607.64 T
659.3 602.8 682.21 623.29 R
7 X
V
0 X
N
(47) 665.02 607.64 T
476.03 574.16 498.94 594.66 R
5 X
V
0 X
N
(97) 481.75 579.01 T
498.94 574.16 521.85 594.66 R
5 X
V
0 X
N
(84) 504.66 579.01 T
521.84 574.16 544.75 594.66 R
5 X
V
0 X
N
(61) 527.57 579.01 T
544.75 574.16 567.66 594.66 R
5 X
V
0 X
N
(55) 550.48 579.01 T
567.66 574.16 590.57 594.66 R
7 X
V
0 X
N
(35) 573.39 579.01 T
590.57 574.16 613.48 594.66 R
7 X
V
0 X
N
(18) 596.3 579.01 T
613.48 574.16 636.39 594.66 R
7 X
V
0 X
N
(22) 619.21 579.01 T
636.39 574.16 659.3 594.66 R
7 X
V
0 X
N
(10) 642.11 579.01 T
659.3 574.16 682.21 594.66 R
7 X
V
0 X
N
(47) 665.02 579.01 T
476.03 542.21 498.94 562.71 R
5 X
V
0 X
N
(97) 481.75 547.05 T
498.94 542.21 521.85 562.71 R
5 X
V
0 X
N
(84) 504.66 547.05 T
521.84 542.21 544.75 562.71 R
5 X
V
0 X
N
(61) 527.57 547.05 T
544.75 542.21 567.66 562.71 R
5 X
V
0 X
N
(55) 550.48 547.05 T
567.66 542.21 590.57 562.71 R
5 X
V
0 X
N
(47) 573.39 547.05 T
590.57 542.21 613.48 562.71 R
7 X
V
0 X
N
(18) 596.3 547.05 T
613.48 542.21 636.39 562.71 R
7 X
V
0 X
N
(22) 619.21 547.05 T
636.39 542.21 659.3 562.71 R
7 X
V
0 X
N
(10) 642.11 547.05 T
659.3 542.21 682.21 562.71 R
7 X
V
0 X
N
(35) 665.02 547.05 T
476.03 516.89 498.94 537.39 R
5 X
V
0 X
N
(97) 481.75 521.73 T
498.94 516.89 521.85 537.39 R
5 X
V
0 X
N
(84) 504.66 521.73 T
521.84 516.89 544.75 537.39 R
5 X
V
0 X
N
(61) 527.57 521.73 T
544.75 516.89 567.66 537.39 R
5 X
V
0 X
N
(55) 550.48 521.73 T
567.66 516.89 590.57 537.39 R
5 X
V
0 X
N
(47) 573.39 521.73 T
590.57 516.89 613.48 537.39 R
5 X
V
0 X
N
(35) 596.3 521.73 T
613.48 516.89 636.39 537.39 R
7 X
V
0 X
N
(22) 619.21 521.73 T
636.39 516.89 659.3 537.39 R
7 X
V
0 X
N
(10) 642.11 521.73 T
659.3 516.89 682.21 537.39 R
7 X
V
0 X
N
(18) 665.02 521.73 T
476.03 488.25 498.94 508.75 R
5 X
V
0 X
N
(97) 481.75 493.1 T
498.94 488.25 521.85 508.75 R
5 X
V
0 X
N
(84) 504.66 493.1 T
521.84 488.25 544.75 508.75 R
5 X
V
0 X
N
(61) 527.57 493.1 T
544.75 488.25 567.66 508.75 R
5 X
V
0 X
N
(55) 550.48 493.1 T
567.66 488.25 590.57 508.75 R
5 X
V
0 X
N
(47) 573.39 493.1 T
590.57 488.25 613.48 508.75 R
5 X
V
0 X
N
(35) 596.3 493.1 T
613.48 488.25 636.39 508.75 R
5 X
V
0 X
N
(22) 619.21 493.1 T
636.39 488.25 659.3 508.75 R
7 X
V
0 X
N
(10) 642.11 493.1 T
659.3 488.25 682.21 508.75 R
7 X
V
0 X
N
(18) 665.02 493.1 T
476.03 459.62 498.94 480.12 R
5 X
V
0 X
N
(97) 481.75 464.46 T
498.94 459.62 521.85 480.12 R
5 X
V
0 X
N
(84) 504.66 464.46 T
521.84 459.62 544.75 480.12 R
5 X
V
0 X
N
(61) 527.57 464.46 T
544.75 459.62 567.66 480.12 R
5 X
V
0 X
N
(55) 550.48 464.46 T
567.66 459.62 590.57 480.12 R
5 X
V
0 X
N
(47) 573.39 464.46 T
590.57 459.62 613.48 480.12 R
5 X
V
0 X
N
(35) 596.3 464.46 T
613.48 459.62 636.39 480.12 R
5 X
V
0 X
N
(22) 619.21 464.46 T
636.39 459.62 659.3 480.12 R
5 X
V
0 X
N
(18) 642.11 464.46 T
659.3 459.62 682.21 480.12 R
5 X
V
0 X
N
(10) 665.02 464.46 T
3 F
(unsorted array) 687.93 686.15 T
(sorted array) 686.12 466.29 T
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 3) 383.04 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 8.91 Q
(// Sort an array of integers in descending order) 72.82 744.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#include <iostream.h>) 72.82 734.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#include <iomanip.h>) 72.82 724.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(void selectsort\050int data[], // input/output: array) 72.82 703.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                int size\051   // input: array size) 72.82 693.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 72.82 683.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( int smallest_idx, // smallest element position) 84.27 683.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(       tmp;         // for exchange) 72.82 673.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   for \050int idx=0; idx<size-1; idx++\051 {) 72.82 652.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      // for each subarray [idx..size-1]) 72.82 642.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      // find index of smallest element) 72.82 632.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      smallest_idx = idx;) 72.82 622.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      for \050int subidx=idx+1; subidx<size; subidx++\051) 72.82 612.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         if \050data[subidx] > data[smallest_idx]\051) 72.82 601.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            smallest_idx = subidx;) 72.82 591.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      if \050smallest_idx > idx\051 {) 72.82 571.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         // exchange with smallest element) 72.82 561.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         tmp = data[idx];) 72.82 551.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         data[idx] = data[smallest_idx];) 72.82 540.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         data[smallest_idx] = tmp;) 72.82 530.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      }) 72.82 520.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   }) 72.82 510.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // selectsort) 72.82 500.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(void main\050\051 {) 72.82 479.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   int A[10] = { 5,2,4,6,9,2,25,5,18,3 };) 72.82 469.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   for \050int i=0; i<10; i++\051) 72.82 449.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      cout << setw\0505\051 << A[i];) 72.82 439.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   selectsort\050A, 10\051;) 72.82 418.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   cout << endl;) 72.82 398.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   for \050int i=0; i<10; i++\051) 72.82 388.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      cout << setw\0505\051 << A[i];) 72.82 377.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   return;) 72.82 357.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 72.82 347.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 4) 781.49 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Insertion Sort Algorithm) 540.84 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12.73 Q
(The array is di) 471.27 682.13 T
(vided into tw) 544.82 682.13 T
(o parts. The left part of it is) 611.86 682.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted while the right part is not.) 471.27 668.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initially) 471.27 642.04 T
(, the left part consists of one element.) 510.74 642.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (F) 471.27 615.31 P
-0.17 (or each \324\336rst\325 component of the unsorted part of the array) 478.15 615.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 11.45 Q
(1.) 471.27 589.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(temporarily remove it;) 485.01 589.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.) 471.27 558.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(find its proper place in the sorted part) 485.01 558.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the array;) 480.01 545.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.) 471.27 514.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.65 (slide smaller values one component to the) 485.01 514.34 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(right;) 480.01 501.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.) 471.27 470.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.65 (insert the \324first\325 component into its new) 485.01 470.44 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(position;) 480.01 457.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 5) 383.04 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.87 738.86 173.58 738.86 2 L
V
0.49 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 15.27 Q
(Insertion Sort) 173.58 740.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(// Sort an array of integers in descending order) 72.82 690.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (void insertsort\050int data[], //input/output: array) 72.82 678.74 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                int size\051  //input: array size) 72.82 667.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 72.82 644.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   int current_item, // item under consideration) 72.82 632.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(       insert_point; // insertion point) 72.82 621.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (   for \050int current=1; current<size; current++\051 {) 72.82 598.55 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      current_item = data[current];) 72.82 575.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      // find insertion point) 72.82 564.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      insert_point = current;) 72.82 552.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      while \050\050insert_point != 0\051 &&) 72.82 541.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.59 (             \050data[insert_point-1]<current_item\051\051{) 72.82 529.83 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         // shift item right to make room) 72.82 518.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (         data[insert_point]=data[insert_point-1];) 72.82 506.92 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         insert_point--;) 72.82 495.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      }) 72.82 484.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      // insert item) 72.82 461.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      data[insert_point] = current_item;) 72.82 449.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   }) 72.82 438.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // insertsort) 72.82 426.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 6) 781.49 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
668.32 738.86 572.03 738.86 2 L
V
0.49 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 15.27 Q
(Insertion Sort) 572.03 740.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
0 0 0 1 0 0 0 K
471.27 435.44 769.08 695.7 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
468.04 435.44 772.3 695.7 R
7 X
0 0 0 1 0 0 0 K
V
500.26 558.25 523.17 578.75 R
5 X
V
1.27 H
2 Z
0 X
N
0 11.45 Q
(84) 505.99 563.1 T
477.35 669.48 500.26 689.98 R
5 X
V
0 X
N
(18) 483.08 674.32 T
500.26 669.48 523.17 689.98 R
7 X
V
0 X
N
(35) 505.99 674.32 T
523.17 669.48 546.08 689.98 R
7 X
V
0 X
N
(22) 528.9 674.32 T
546.08 669.48 568.99 689.98 R
7 X
V
0 X
N
(97) 551.8 674.32 T
568.99 669.48 591.9 689.98 R
7 X
V
0 X
N
(84) 574.71 674.32 T
591.9 669.48 614.8 689.98 R
7 X
V
0 X
N
(55) 597.62 674.32 T
614.8 669.48 637.71 689.98 R
7 X
V
0 X
N
(61) 620.53 674.32 T
637.71 669.48 660.62 689.98 R
7 X
V
0 X
N
(10) 643.44 674.32 T
660.62 669.48 683.53 689.98 R
7 X
V
0 X
N
(47) 666.35 674.32 T
477.35 643.86 500.26 664.36 R
5 X
V
0 X
N
(35) 483.08 648.7 T
500.26 643.86 523.17 664.36 R
5 X
V
0 X
N
(18) 505.99 648.7 T
523.17 643.86 546.08 664.36 R
7 X
V
0 X
N
(22) 528.9 648.7 T
546.08 643.86 568.99 664.36 R
7 X
V
0 X
N
(97) 551.8 648.7 T
568.99 643.86 591.9 664.36 R
7 X
V
0 X
N
(84) 574.71 648.7 T
591.9 643.86 614.8 664.36 R
7 X
V
0 X
N
(55) 597.62 648.7 T
614.8 643.86 637.71 664.36 R
7 X
V
0 X
N
(61) 620.53 648.7 T
637.71 643.86 660.62 664.36 R
7 X
V
0 X
N
(10) 643.44 648.7 T
660.62 643.86 683.53 664.36 R
7 X
V
0 X
N
(47) 666.35 648.7 T
477.35 615.52 500.26 636.02 R
5 X
V
0 X
N
(35) 483.08 620.37 T
500.26 615.52 523.17 636.02 R
5 X
V
0 X
N
(22) 505.99 620.37 T
523.17 615.52 546.08 636.02 R
5 X
V
0 X
N
(18) 528.9 620.37 T
546.08 615.52 568.99 636.02 R
7 X
V
0 X
N
(97) 551.8 620.37 T
568.99 615.52 591.9 636.02 R
7 X
V
0 X
N
(84) 574.71 620.37 T
591.9 615.52 614.8 636.02 R
7 X
V
0 X
N
(55) 597.62 620.37 T
614.8 615.52 637.71 636.02 R
7 X
V
0 X
N
(61) 620.53 620.37 T
637.71 615.52 660.62 636.02 R
7 X
V
0 X
N
(10) 643.44 620.37 T
660.62 615.52 683.53 636.02 R
7 X
V
0 X
N
(47) 666.35 620.37 T
500.26 587.01 523.17 607.51 R
5 X
V
0 X
N
(35) 505.99 591.85 T
523.17 587.01 546.08 607.51 R
5 X
V
0 X
N
(22) 528.9 591.85 T
546.08 587.01 568.99 607.51 R
5 X
V
0 X
N
(18) 551.8 591.85 T
568.99 586.89 591.9 607.39 R
7 X
V
0 X
N
(84) 574.71 591.73 T
591.9 586.89 614.8 607.39 R
7 X
V
0 X
N
(55) 597.62 591.73 T
614.8 586.89 637.71 607.39 R
7 X
V
0 X
N
(61) 620.53 591.73 T
637.71 586.89 660.62 607.39 R
7 X
V
0 X
N
(10) 643.44 591.73 T
660.62 586.89 683.53 607.39 R
7 X
V
0 X
N
(47) 666.35 591.73 T
477.35 587.01 500.26 607.51 R
5 X
V
0 X
N
(97) 483.08 591.85 T
523.17 558.37 546.08 578.87 R
5 X
V
0 X
N
(35) 528.9 564.17 T
546.08 558.25 568.99 578.75 R
5 X
V
0 X
N
(22) 551.8 563.1 T
568.99 558.25 591.9 578.75 R
5 X
V
0 X
N
(18) 574.71 563.1 T
591.9 558.25 614.8 578.75 R
7 X
V
0 X
N
(55) 597.62 563.1 T
614.8 558.25 637.71 578.75 R
7 X
V
0 X
N
(61) 620.53 563.1 T
637.71 558.25 660.62 578.75 R
7 X
V
0 X
N
(10) 643.44 563.1 T
660.62 558.25 683.53 578.75 R
7 X
V
0 X
N
(47) 666.35 563.1 T
477.35 558.37 500.26 578.87 R
5 X
V
0 X
N
(97) 483.08 563.22 T
500.26 529.62 523.17 550.11 R
5 X
V
0 X
N
(84) 505.99 534.46 T
523.17 529.74 546.08 550.23 R
5 X
V
0 X
N
546.08 529.62 568.99 550.11 R
5 X
V
0 X
N
568.99 529.62 591.9 550.11 R
5 X
V
0 X
N
591.9 529.62 614.8 550.11 R
5 X
V
0 X
N
(55) 528.9 536.45 T
614.8 529.62 637.71 550.11 R
7 X
V
0 X
N
(61) 620.53 534.46 T
637.71 529.62 660.62 550.11 R
7 X
V
0 X
N
(10) 643.44 534.46 T
660.62 529.62 683.53 550.11 R
7 X
V
0 X
N
(47) 666.35 534.46 T
477.35 529.74 500.26 550.23 R
5 X
V
0 X
N
(97) 483.08 534.58 T
(35) 551.8 536.93 T
(22) 574.71 535.64 T
(18) 597.62 536.54 T
500.26 500.98 523.17 521.48 R
5 X
V
0 X
N
(84) 505.99 505.82 T
546.08 501.1 568.99 521.6 R
5 X
V
0 X
N
568.99 500.98 591.9 521.48 R
5 X
V
0 X
N
591.9 500.98 614.8 521.48 R
5 X
V
0 X
N
614.8 500.98 637.71 521.48 R
5 X
V
0 X
N
(55) 551.8 507.82 T
523.17 501.1 546.08 521.6 R
5 X
V
0 X
N
(61) 528.9 505.95 T
637.71 500.98 660.62 521.48 R
7 X
V
0 X
N
(10) 643.44 505.82 T
660.62 500.98 683.53 521.48 R
7 X
V
0 X
N
(47) 666.35 505.82 T
477.35 501.1 500.26 521.6 R
5 X
V
0 X
N
(97) 483.08 505.95 T
(35) 574.71 508.29 T
(22) 597.62 507 T
(18) 620.53 507.9 T
500.26 443.71 523.17 464.21 R
5 X
V
0 X
N
(84) 505.99 448.55 T
546.08 443.83 568.99 464.33 R
5 X
V
0 X
N
568.99 443.71 591.9 464.21 R
5 X
V
0 X
N
591.9 443.71 614.8 464.21 R
5 X
V
0 X
N
614.8 443.71 637.71 464.21 R
5 X
V
0 X
N
(55) 551.8 450.55 T
523.17 443.83 546.08 464.33 R
5 X
V
0 X
N
(61) 528.9 448.67 T
637.71 443.71 660.62 464.21 R
5 X
V
0 X
N
(18) 643.44 448.55 T
660.62 443.71 683.53 464.21 R
5 X
V
0 X
N
(10) 666.35 448.55 T
477.35 443.83 500.26 464.33 R
5 X
V
0 X
N
(97) 483.08 448.67 T
(47) 574.71 451.02 T
(35) 597.62 449.73 T
(22) 620.53 450.63 T
500.26 472.34 523.17 492.84 R
5 X
V
0 X
N
(84) 505.99 477.19 T
546.08 472.47 568.99 492.96 R
5 X
V
0 X
N
568.99 472.34 591.9 492.84 R
5 X
V
0 X
N
591.9 472.34 614.8 492.84 R
5 X
V
0 X
N
614.8 472.34 637.71 492.84 R
5 X
V
0 X
N
(55) 551.8 479.18 T
523.17 472.47 546.08 492.96 R
5 X
V
0 X
N
(61) 528.9 477.31 T
637.71 472.34 660.62 492.84 R
5 X
V
0 X
N
(10) 643.44 477.19 T
660.62 472.34 683.53 492.84 R
7 X
V
0 X
N
(47) 666.35 477.19 T
477.35 472.47 500.26 492.96 R
5 X
V
0 X
N
(97) 483.08 477.31 T
(35) 574.71 479.66 T
(22) 597.62 478.37 T
(18) 620.53 479.27 T
3 F
(unsorted array) 692.02 673.68 T
(sorted array) 690.21 453.82 T
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 7) 383.04 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Bubble Sort Algorithm) 148.23 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12.73 Q
(The array is di) 72.82 682.13 T
(vided into tw) 146.37 682.13 T
(o parts. The right part of the) 213.41 682.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(array is sorted while the left part is not.) 72.82 668.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for e) 72.82 642.04 T
(v) 96.17 642.04 T
(ery \324last\325 component in the unsorted part of array) 102.34 642.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for e) 95.73 615.31 T
(v) 119.08 615.31 T
(ery component from the \336rst to the \324last\325) 125.25 615.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(- compare that component to with the neighboring) 107.18 588.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(  component to the right;) 107.18 572.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(- e) 107.18 545.31 T
(xchange them if necessary;) 120.06 545.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 8) 781.49 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 12.73 Q
(Bub) 471.27 741.95 T
(ble  Sort:) 493.78 741.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(// Sort an array of integers in descending order) 471.27 715.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(void bubble\050int data[], // input/output: array) 471.27 704.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            int size\051   // input: array size) 471.27 692.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 471.27 669.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   int temp;   // for swap) 471.27 658.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   for \050int rightmost=size-1; rightmost>0;) 471.27 635.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            rightmost--\051) 471.27 624.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      // bubble up the largest item) 471.27 601.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      for \050int current=0; current<rightmost;) 471.27 589.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               current++\051) 471.27 578.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         if \050data[current] < data[current+1]\051 {) 471.27 566.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            // swap the two array elements) 471.27 555.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            temp = data[current];) 471.27 543.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            data[current] = data[current+1];) 471.27 532.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            data[current+1] = temp;) 471.27 520.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         }) 471.27 509.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // bubble) 471.27 471.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 9) 383.04 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Bubble Sort) 183.42 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
72.82 446.89 370.63 705.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
69.78 446.89 373.67 705.89 R
7 X
0 0 0 1 0 0 0 K
V
78.72 679.66 101.63 700.16 R
V
1.27 H
2 Z
0 X
N
0 11.45 Q
(18) 84.45 684.51 T
101.63 679.66 124.54 700.16 R
7 X
V
0 X
N
(35) 107.36 684.51 T
124.54 679.66 147.45 700.16 R
7 X
V
0 X
N
(22) 130.27 684.51 T
147.45 679.66 170.36 700.16 R
7 X
V
0 X
N
(97) 153.18 684.51 T
170.36 679.66 193.27 700.16 R
7 X
V
0 X
N
(84) 176.09 684.51 T
193.27 679.66 216.18 700.16 R
7 X
V
0 X
N
(55) 198.99 684.51 T
216.18 679.66 239.09 700.16 R
7 X
V
0 X
N
(61) 221.9 684.51 T
239.09 679.66 261.99 700.16 R
7 X
V
0 X
N
(10) 244.81 684.51 T
261.99 679.66 284.9 700.16 R
7 X
V
0 X
N
(47) 267.72 684.51 T
78.72 654.34 101.63 674.84 R
7 X
V
0 X
N
(35) 84.45 659.19 T
101.63 654.34 124.54 674.84 R
5 X
V
0 X
N
(18) 107.36 659.19 T
124.54 654.34 147.45 674.84 R
7 X
V
0 X
N
(22) 130.27 659.19 T
147.45 654.34 170.36 674.84 R
7 X
V
0 X
N
(97) 153.18 659.19 T
170.36 654.34 193.27 674.84 R
7 X
V
0 X
N
(84) 176.09 659.19 T
193.27 654.34 216.18 674.84 R
7 X
V
0 X
N
(55) 198.99 659.19 T
216.18 654.34 239.09 674.84 R
7 X
V
0 X
N
(61) 221.9 659.19 T
239.09 654.34 261.99 674.84 R
7 X
V
0 X
N
(10) 244.81 659.19 T
261.99 654.34 284.9 674.84 R
7 X
V
0 X
N
(47) 267.72 659.19 T
78.72 625.71 101.63 646.2 R
7 X
V
0 X
N
(35) 84.45 630.55 T
101.63 625.71 124.54 646.2 R
7 X
V
0 X
N
(22) 107.36 630.55 T
124.54 625.71 147.45 646.2 R
5 X
V
0 X
N
(18) 130.27 630.55 T
147.45 625.71 170.36 646.2 R
7 X
V
0 X
N
(97) 153.18 630.55 T
170.36 625.71 193.27 646.2 R
7 X
V
0 X
N
(84) 176.09 630.55 T
193.27 625.71 216.18 646.2 R
7 X
V
0 X
N
(55) 198.99 630.55 T
216.18 625.71 239.09 646.2 R
7 X
V
0 X
N
(61) 221.9 630.55 T
239.09 625.71 261.99 646.2 R
7 X
V
0 X
N
(10) 244.81 630.55 T
261.99 625.71 284.9 646.2 R
7 X
V
0 X
N
(47) 267.72 630.55 T
78.72 542.21 101.63 562.71 R
7 X
V
0 X
N
(35) 84.45 547.05 T
101.63 542.21 124.54 562.71 R
7 X
V
0 X
N
(97) 107.36 547.05 T
124.54 542.21 147.45 562.71 R
7 X
V
0 X
N
147.45 542.21 170.36 562.71 R
7 X
V
0 X
N
(84) 130.27 547.05 T
170.36 542.21 193.27 562.71 R
7 X
V
0 X
N
(55) 153.18 547.05 T
193.27 542.21 216.18 562.71 R
7 X
V
0 X
N
(61) 176.09 547.05 T
216.18 542.21 239.09 562.71 R
7 X
V
0 X
N
(22) 198.99 547.05 T
239.09 542.21 261.99 562.71 R
5 X
V
0 X
N
(18) 244.81 547.05 T
261.99 542.21 284.9 562.71 R
5 X
V
0 X
N
(10) 267.72 547.05 T
(47) 221.9 545.86 T
78.72 582.3 101.63 602.8 R
7 X
V
0 X
N
(35) 84.45 587.14 T
101.63 582.3 124.54 602.8 R
7 X
V
0 X
N
(22) 107.36 587.14 T
124.54 582.3 147.45 602.8 R
7 X
V
0 X
N
147.45 582.3 170.36 602.8 R
7 X
V
0 X
N
(97) 130.27 587.14 T
170.36 582.3 193.27 602.8 R
7 X
V
0 X
N
(84) 153.18 587.14 T
193.27 582.3 216.18 602.8 R
7 X
V
0 X
N
(55) 176.09 587.14 T
216.18 582.3 239.09 602.8 R
7 X
V
0 X
N
(61) 198.99 587.14 T
239.09 582.3 261.99 602.8 R
7 X
V
0 X
N
(47) 244.81 587.14 T
261.99 582.3 284.9 602.8 R
5 X
V
0 X
N
(10) 267.72 587.14 T
(18) 221.9 585.95 T
78.72 507.85 101.63 528.34 R
7 X
V
0 X
N
(97) 84.45 512.69 T
101.63 507.85 124.54 528.34 R
7 X
V
0 X
N
(84) 107.36 512.69 T
124.54 507.85 147.45 528.34 R
7 X
V
0 X
N
147.45 507.85 170.36 528.34 R
7 X
V
0 X
N
(55) 130.27 512.69 T
170.36 507.85 193.27 528.34 R
7 X
V
0 X
N
(61) 153.18 512.69 T
193.27 507.85 216.18 528.34 R
7 X
V
0 X
N
(35) 176.09 512.69 T
216.18 507.85 239.09 528.34 R
5 X
V
0 X
N
(47) 198.99 512.69 T
239.09 507.85 261.99 528.34 R
5 X
V
0 X
N
(18) 244.81 512.69 T
261.99 507.85 284.9 528.34 R
5 X
V
0 X
N
(10) 267.72 512.69 T
(22) 221.9 511.49 T
78.72 471.07 101.63 491.57 R
7 X
V
0 X
N
(97) 84.45 475.92 T
101.63 471.07 124.54 491.57 R
7 X
V
0 X
N
(84) 107.36 475.92 T
124.54 471.07 147.45 491.57 R
7 X
V
0 X
N
147.45 471.07 170.36 491.57 R
7 X
V
0 X
N
(61) 130.27 475.92 T
170.36 471.07 193.27 491.57 R
7 X
V
0 X
N
(55) 153.18 475.92 T
193.27 471.07 216.18 491.57 R
5 X
V
0 X
N
(47) 176.09 475.92 T
216.18 471.07 239.09 491.57 R
5 X
V
0 X
N
(35) 198.99 475.92 T
239.09 471.07 261.99 491.57 R
5 X
V
0 X
N
(18) 244.81 475.92 T
261.99 471.07 284.9 491.57 R
5 X
V
0 X
N
(10) 267.72 475.92 T
(22) 221.9 474.72 T
3 F
(unsorted array) 294.73 693.03 T
(sorted array) 292.92 473.17 T
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 10) 778.31 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Advantages of each Sorting Algorithm) 497.28 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(*) 471.27 708.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(The selection sort is simple because it does not) 487.3 708.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (require an) 487.3 691.46 P
-0.02 (y wholesale mo) 543.44 691.46 P
-0.02 (v) 631.07 691.46 P
-0.02 (es; only tw) 637.85 691.46 P
-0.02 (o v) 699.12 691.46 P
-0.02 (alues are) 716.25 691.46 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 487.3 674.92 T
(xchanged on an) 493.31 674.92 T
(y trip through the array) 580.96 674.92 T
(.) 709.91 674.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(*) 471.27 641.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(The insertion sort minimizes unnecessary tra) 487.3 641.83 T
(v) 737.81 641.83 T
(el) 744.6 641.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (through the array) 487.3 625.28 P
-0.02 (. If the v) 582.77 625.28 P
-0.02 (alues are sorted to be) 629.8 625.28 P
-0.02 (gin) 747.7 625.28 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with, a single trip through the array establishes) 487.3 608.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that f) 487.3 592.19 T
(act. In contrast, selection sort requires the) 516.32 592.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same number of trips no matter ho) 487.3 575.65 T
(w well-) 679.81 575.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or) 487.3 559.1 T
(g) 498.71 559.1 T
(anized the array is.) 505.64 559.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(*) 471.27 526.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(The b) 487.3 526.01 T
(ubble sort is w) 519.29 526.01 T
(orse than selection sort for a) 601.2 526.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(jumbled array and will require man) 487.3 509.47 T
(y more) 684.99 509.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(component e) 487.3 492.92 T
(xchanges. Unlik) 559.02 492.92 T
(e the insertion sort,) 649.87 492.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (it\325) 487.3 476.38 P
-0.17 (s utterly incapable of minimizing tra) 498.98 476.38 P
-0.17 (v) 701.97 476.38 P
-0.17 (el through) 708.76 476.38 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the array) 487.3 459.83 T
(. W) 535.76 459.83 T
(e use it because it is easy to write) 554.85 459.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(correctly!) 487.3 443.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 11) 379.86 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.18 Q
(Analysis of Algorithm Ef\336ciency) 136.55 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 8.91 Q
(\245) 72.82 711.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Compare) 89.36 711.4 T
9 F
(ef\336ciency) 129.12 711.4 T
8 F
( of algorithm) 171.7 711.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90 694.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example:  Searc) 107.18 694.86 T
(hing an ordered arra) 173.94 694.86 T
(y of integers) 259.48 694.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 72.82 665.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(How to compare?) 89.36 665.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90 649.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(algorithm\325) 107.18 649.04 T
(s) 149.36 649.04 T
9 F
(execution time increases with the input size) 155.97 649.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(-) 107.18 632.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example:) 124.36 632.49 T
10 F
(array size) 168.26 632.49 T
8 F
( for Searc) 208.33 632.49 T
(hing) 247.53 632.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90 615.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dif\336cult to get a precise measure) 107.18 615.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(o) 90 599.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(approximate) 107.18 599.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(-) 107.18 582.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(largest contributing factor) 124.36 582.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10.18 Q
(log n     n     2n     n*n) 136.2 500.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 8.91 Q
(1) 150.52 479.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 196.34 479.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 242.16 479.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 287.97 479.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 150.52 464.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 196.34 464.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 242.16 464.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 285.5 464.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 150.52 449.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 196.34 449.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 239.68 449.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 285.5 449.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 150.52 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 193.86 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 239.68 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 283.02 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 150.52 418.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 193.86 418.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 239.68 418.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1024) 280.54 418.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 150.52 403.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 193.86 403.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 237.2 403.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4096) 280.54 403.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 150.52 388.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 191.38 388.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 237.2 388.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16384) 278.07 388.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 150.52 372.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 191.38 372.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(512) 237.2 372.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65536) 278.07 372.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
175.91 490.16 175.91 367.19 2 L
V
N
221.72 490.16 221.72 367.19 2 L
V
N
267.54 490.16 267.54 367.19 2 L
V
N
130.09 489.53 313.36 489.53 2 L
V
1.27 H
N
130.09 474.25 313.36 474.25 2 L
V
0.32 H
N
130.09 458.98 313.36 458.98 2 L
V
N
130.09 443.71 313.36 443.71 2 L
V
N
130.09 428.44 313.36 428.44 2 L
V
N
130.09 413.16 313.36 413.16 2 L
V
N
130.09 397.89 313.36 397.89 2 L
V
N
130.09 382.62 313.36 382.62 2 L
V
N
130.09 367.35 313.36 367.35 2 L
V
N
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
76.64 555.07 366.81 579.89 C
0 0 0 1 0 0 0 K
0 8.91 Q
0 X
0 0 0 1 0 0 0 K
(2) 198.48 564.62 T
11 F
(n) 203.45 564.62 T
0 7.64 Q
(2) 208.25 569.91 T
0 8.91 Q
(5) 221.54 564.62 T
11 F
(n) 226.52 564.62 T
0 F
(7) 239.88 564.62 T
(\320) 233.2 564.62 T
(+) 214.29 564.62 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
76.64 526.43 366.81 555.07 C
0 0 0 1 0 0 0 K
0 8.91 Q
0 X
0 0 0 1 0 0 0 K
(Big-O notation:) 178.33 537.89 T
11 F
(O) 241.72 537.89 T
(n) 252.27 537.89 T
0 7.64 Q
(2) 257.07 543.19 T
12 8.91 Q
(\050) 248.67 537.89 T
(\051) 261.52 537.89 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 12) 778.31 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(The Complexity of the Search Problem) 496.32 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12.73 Q
(\245) 471.27 708.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 487.3 708.86 T
(e can describe the) 498.86 708.86 T
0 0 0 1 0 0 0 K
623.1 707.7 598.36 707.7 2 L
V
0.41 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( size) 598.36 708.86 T
( of a sear) 623.1 708.86 T
(ching pr) 672.85 708.86 T
(oblem) 719.72 708.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(by the) 487.3 692.31 T
0 0 0 1 0 0 0 K
716.67 691.15 525.43 691.15 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(number of comparison operations) 525.43 692.31 T
( needed) 716.67 692.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to \336nd the one we want.) 487.3 675.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 640.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is also called the) 487.3 640.13 T
0 0 0 1 0 0 0 K
672.76 638.97 609.98 638.97 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(complexity) 609.98 640.13 T
( of the sear) 672.76 640.13 T
(ching) 733.8 640.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(algorithm.) 487.3 623.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 587.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ther) 487.3 587.95 T
(e ar) 513.41 587.95 T
(e thr) 533.84 587.95 T
(ee cases to be consider) 559.48 587.95 T
(ed:) 685.31 587.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11.45 Q
(\245) 487.3 564.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Best-case) 498.76 564.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 487.3 547.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 498.76 547.43 T
(orst-case) 509.16 547.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 487.3 530.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A) 498.76 530.25 T
(verage-case) 506.61 530.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Page: "mini" 7
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 13) 379.86 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.18 Q
(Linear Search) 184.15 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 8.91 Q
(Problem De\336nition:) 72.82 722.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
-0.39 (Searc) 72.82 702.49 P
-0.39 (h an) 95.69 702.49 P
10 F
-0.39 ( ordered) 113.61 702.49 P
8 F
-0.39 ( array of integers for a value and return its index if the) 146.86 702.49 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value is found.  Otherwise, return -1.) 72.82 692.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(// Searches an) 72.82 658.37 T
13 F
(ordered) 164.45 658.37 T
5 F
( array of integers) 207.21 658.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int lsearch\050int data[], // input: array) 72.82 646.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            int size,   // input: array size) 72.82 635.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            int value   // input: value to find) 72.82 624.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            \051    // output: index if found) 72.82 612.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                 //         otherwise return -1) 72.82 601.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 72.82 589.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     int index = 0;    // initialize index to 0) 72.82 578.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     while \050\050data[index]) 72.82 555.28 T
4 F
(<) 225.54 555.28 T
5 F
( value\051 &&) 231.65 555.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            \050index < size\051\051) 72.82 543.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          index++;) 72.82 532.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     if \050data[index] != value\051) 72.82 509.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          return -1;) 72.82 498.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     else) 72.82 486.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          return index;) 72.82 475.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // search) 72.82 463.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 8.91 Q
(\245) 72.82 422.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.88 (Given an arra) 89.36 422.5 P
0.88 (y of size n, what is the) 148.62 422.5 P
10 F
0.88 (average) 248.99 422.5 P
8 F
0.88 (  number of elements) 280.49 422.5 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the algorithm has to examine?) 90 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 14) 778.31 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.18 Q
(Binary Search) 582.13 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 8.91 Q
(Same Problem De\336nition:) 471.27 722.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
-0.39 (Searc) 471.27 702.49 P
-0.39 (h an) 494.14 702.49 P
10 F
-0.39 ( ordered) 512.06 702.49 P
8 F
-0.39 ( array of integers for a value and return its index if the) 545.31 702.49 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value is found.  Otherwise, return -1.) 471.27 692.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
471.27 515.62 769.08 667.71 C
0 0 0 1 0 0 0 K
515.65 619.34 698.92 642.25 R
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
538.56 642.25 538.56 619.34 2 L
N
561.47 642.25 561.47 619.34 2 L
N
584.38 642.25 584.38 619.34 2 L
N
607.29 642.25 607.29 619.34 2 L
N
630.2 642.25 630.2 619.34 2 L
N
653.1 642.25 653.1 619.34 2 L
N
676.01 642.25 676.01 619.34 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(7   9  10  17  30  37  46 60) 521.38 630.8 T
(0   1  2   3   4  5   6   7) 527.1 647.98 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
471.27 338.07 769.08 750.43 C
471.27 352.07 769.08 504.16 C
0 0 0 1 0 0 0 K
515.65 455.8 698.92 478.71 R
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
538.56 478.71 538.56 455.8 2 L
N
561.47 478.71 561.47 455.8 2 L
N
584.38 478.71 584.38 455.8 2 L
N
607.29 478.71 607.29 455.8 2 L
N
630.2 478.71 630.2 455.8 2 L
N
653.1 478.71 653.1 455.8 2 L
N
676.01 478.71 676.01 455.8 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(7   9  10  17  30  37  46 60) 521.38 467.25 T
(0   1  2   3   4  5   6   7) 527.1 484.44 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 7
%%Page: "mini" 8
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 206.79 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 15) 379.86 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.18 Q
(Binary Search \050Cont\325) 161.04 743.64 T
(d\051) 271.66 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12.73 Q
(\245) 72.82 708.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binary sear) 88.85 708.86 T
(ch is based on the) 152.04 708.86 T
0 0 0 1 0 0 0 K
368.06 707.7 254.79 707.7 2 L
V
0.41 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(divide and conquer) 254.79 708.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
132.41 691.15 88.85 691.15 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(concept) 88.85 692.31 T
( and works as follows:) 132.41 692.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11.45 Q
(\245) 88.85 668.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Start by looking at the middle component.) 100.31 668.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( -) 104.89 651.8 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.37 (If the value it holds is too high, go to the middle of) 116.34 651.8 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the bottom half) 116.34 638.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.) 193.92 638.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( -) 104.89 621.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If the value it holds is too low) 116.34 621.25 T
(, go to the middle of) 265.57 621.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the upper half) 116.34 607.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.) 188.19 607.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 88.85 590.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Repeat this \324split the r) 100.31 590.71 T
(emainder) 210.85 590.71 T
(\325 until you \336nd the) 260.04 590.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value you want, or decide that it does not exist.) 100.31 577.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 8.91 Q
(Solution Outline \050Algorithm\051:) 72.82 546.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.18 Q
(Set lower and upper bound;) 72.82 526.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (While) 72.82 507.56 P
14 F
-0.17 (value) 109.3 507.56 P
5 F
-0.17 ( not found and more to search do begin) 139.85 507.56 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Compute subscript of middle element) 84.27 488.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with repect to lower and uppper bound;) 95.73 478.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If middle element equals) 84.27 459.83 T
14 F
(value) 237 459.83 T
5 F
(\050found\051 then) 273.65 459.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return middle element position) 95.73 450.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else if lower is greater than upper bound then) 84.27 431.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050no more to search\051) 95.73 421.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return position = -1) 95.73 412.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else if) 84.27 393.01 T
14 F
(value) 133.14 393.01 T
5 F
( is less than middle element then) 163.69 393.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set upper bound to middle element position-1) 95.73 383.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else) 84.27 373.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set lower bound to middle element position+1) 95.73 364.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(End;) 72.82 345.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 22) 605.24 315.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.8 ( 16) 778.31 315.58 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.18 Q
(Binary Search \050Cont\325) 559.48 743.64 T
(d\051) 670.11 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Searches an ordered array of integers) 471.27 725.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int binary\050int data[], // input: array) 471.27 715.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           int size,   // input: array size) 471.27 705.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           int value   // input: value to find) 471.27 695.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           \051    // output: index if found) 471.27 685.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                //         otherwise return -1) 471.27 674.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 471.27 664.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     enum state {searching,found,absent} status;) 471.27 654.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     int lower, middle, upper, index;) 471.27 644.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     status = searching;) 471.27 624.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     lower = 0;) 471.27 613.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     upper = size - 1;) 471.27 603.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     index = -1;) 471.27 593.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     while \050status == searching\051 {) 471.27 573.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          middle = \050lower + upper\051 / 2;) 471.27 562.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          if \050data[middle] == value\051 {) 471.27 552.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               status = found;) 471.27 542.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               index = middle;) 471.27 532.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else if \050lower > upper\051 {) 471.27 522.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               status = absent;) 471.27 512.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else if \050value < data[middle]\051 {) 471.27 501.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               upper = middle - 1;) 471.27 491.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else {) 471.27 481.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               lower = middle + 1;) 471.27 471.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          }) 471.27 461.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     }) 471.27 450.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     return index;) 471.27 440.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // binary) 471.27 430.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 8.91 Q
(\245) 471.27 390.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.88 (Given an arra) 487.81 390.68 P
0.88 (y of size n, what is the) 547.07 390.68 P
10 F
0.88 (average) 647.44 390.68 P
8 F
0.88 (  number of elements) 678.94 390.68 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the algorithm has to examine?) 488.45 380.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 8
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 8
%%DocumentFonts: Times-Roman
%%+ Palatino-Bold
%%+ ZapfDingbats
%%+ Palatino-Roman
%%+ Courier-Bold
%%+ Courier
%%+ Times-Bold
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-BoldItalic
%%+ NewCenturySchlbk-Italic
%%+ Times-Italic
%%+ Symbol
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%EOF
