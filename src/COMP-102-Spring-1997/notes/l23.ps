%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 38 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 1 /Symbol FMFONTDEFINE
6 0 /Palatino-Bold FMFONTDEFINE
7 0 /Palatino-Roman FMFONTDEFINE
8 0 /NewCenturySchlbk-Bold FMFONTDEFINE
9 0 /NewCenturySchlbk-Roman FMFONTDEFINE
10 0 /NewCenturySchlbk-Italic FMFONTDEFINE
11 0 /Courier FMFONTDEFINE
12 0 /Courier-BoldOblique FMFONTDEFINE
13 0 /Courier-Oblique FMFONTDEFINE
14 1 /ZapfDingbats FMFONTDEFINE
15 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 1) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
107.18 343.8 336.27 469.8 R
3 X
0 0 1 0 1 1 0 K
V
2 Z
0 X
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
1 1 0 0 0 0 1 K
(Analysis of Algorithm Ef\336ciency) 142.34 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 10.18 Q
(\245) 72.82 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Compare) 89.36 706.1 T
2 F
(ef) 129.23 706.1 T
(\336ciency) 136.96 706.1 T
0 F
( of algorithm) 169.2 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 90 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Example:  Searching an ordered array of inte) 107.18 687.64 T
(gers) 289.96 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 654.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ho) 89.36 654.55 T
(w to compare?) 101.55 654.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 90 636.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(algorithm\325) 107.18 636.1 T
(s) 149.61 636.1 T
2 F
(ex) 156.11 636.1 T
(ecution time increases with the input size) 165.62 636.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(-) 107.18 617.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Example:) 124.36 617.65 T
3 F
(arr) 168.48 617.65 T
(ay size) 181.34 617.65 T
0 F
( for Searching) 208.77 617.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 90 599.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(dif) 107.18 599.19 T
(\336cult to get a precise measure) 118.24 599.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 F
(o) 90 580.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(appro) 107.18 580.74 T
(ximate) 131.4 580.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(-) 107.18 562.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(lar) 124.36 562.28 T
(gest contrib) 134.92 562.28 T
(uting f) 182.51 562.28 T
(actor) 209.28 562.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 F
(log n     n     2n     n) 118.64 478.92 T
4 8.15 Q
(2) 265.25 482.99 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 10.18 Q
(2) 314.12 478.92 T
4 8.15 Q
(n) 320.23 482.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8.91 Q
0 0 0 1 0 0 0 K
(1) 127.86 458.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 173.68 458.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 219.5 458.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 265.31 458.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 311.13 458.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 127.86 442.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 173.68 442.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 219.5 442.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 263.09 442.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 308.9 442.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 127.86 427.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 173.68 427.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 217.27 427.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 263.09 427.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 306.68 427.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 127.86 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 171.45 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 217.27 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 260.86 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65536) 302.22 412.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 127.86 397.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 171.45 397.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 217.27 397.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1024) 258.63 397.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3x10) 299.33 397.04 T
0 7.13 Q
(9) 323.83 400.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8.91 Q
(6) 127.86 381.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 171.45 381.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 215.04 381.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4096) 258.63 381.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.8x10) 297.55 381.77 T
0 7.13 Q
(19) 322.05 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8.91 Q
(7) 127.86 366.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 169.23 366.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 215.04 366.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16384) 256.4 366.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4x10) 297.55 366.5 T
0 7.13 Q
(38) 322.05 370.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8.91 Q
(8) 127.86 351.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 169.23 351.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(512) 215.04 351.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65536) 256.4 351.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.1x10) 297.55 351.23 T
0 7.13 Q
(77) 322.05 354.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153 468.53 153 345.55 2 L
V
0 Z
N
198.82 468.53 198.82 345.55 2 L
V
N
244.63 468.53 244.63 345.55 2 L
V
N
290.45 468.53 290.45 345.55 2 L
V
N
107.18 467.89 336.27 467.89 2 L
V
1.27 H
N
107.18 452.62 336.27 452.62 2 L
V
0.32 H
N
107.18 437.35 336.27 437.35 2 L
V
N
107.18 422.07 336.27 422.07 2 L
V
N
107.18 406.8 336.27 406.8 2 L
V
N
107.18 391.53 336.27 391.53 2 L
V
N
107.18 376.26 336.27 376.26 2 L
V
N
107.18 360.98 336.27 360.98 2 L
V
N
107.18 345.71 336.27 345.71 2 L
V
N
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
76.64 534.07 366.81 558.89 C
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 8.91 Q
0 X
1 1 0 0 0 0 1 K
(2) 198.48 543.62 T
0 1 1 0 1 0 0 K
3 F
0 1 1 0 1 0 0 K
(n) 203.45 543.62 T
0 7.64 Q
(2) 208.25 548.91 T
1 1 0 0 0 0 1 K
0 8.91 Q
1 1 0 0 0 0 1 K
(5) 221.54 543.62 T
3 F
(n) 226.52 543.62 T
0 F
(7) 239.88 543.62 T
(\320) 233.2 543.62 T
(+) 214.29 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
76.64 505.43 366.81 534.07 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 8.91 Q
0 X
0 1 1 0 1 0 0 K
(Big-O notation:) 178.33 516.89 T
3 F
(O) 241.72 516.89 T
(n) 252.27 516.89 T
0 7.64 Q
(2) 257.07 522.19 T
5 8.91 Q
(\050) 248.67 516.89 T
(\051) 261.52 516.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 2) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 14 Q
(The) 496.32 741.1 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(Complexity) 524.71 741.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( of the Search Problem) 599.37 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 12.73 Q
0 0 0 1 0 0 0 K
(\245) 471.27 708.86 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(W) 487.3 708.86 T
(e can describe the) 498.86 708.86 T
1 1 0 0 0 0 1 K
601.54 707.7 598.36 707.7 2 L
V
0.41 H
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
623.1 707.7 601.54 707.7 2 L
1 0 1 0 0 1 0 K
V
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(size) 601.54 708.86 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( of a sear) 623.1 708.86 T
(ching pr) 672.85 708.86 T
(oblem) 719.72 708.86 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(by the) 487.3 692.31 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
716.67 691.15 525.43 691.15 2 L
1 0 1 0 0 1 0 K
V
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(number of comparison operations) 525.43 692.31 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( needed) 716.67 692.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(to \336nd the one we want.) 487.3 675.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 640.13 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(This is also called the) 487.3 640.13 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
672.76 638.97 609.98 638.97 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(complexity) 609.98 640.13 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( of the sear) 672.76 640.13 T
(ching) 733.8 640.13 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(algorithm.) 487.3 623.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 587.95 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Ther) 487.3 587.95 T
(e ar) 513.41 587.95 T
(e thr) 533.84 587.95 T
(ee cases to be consider) 559.48 587.95 T
(ed:) 685.31 587.95 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
7 11.45 Q
1 0 1 0 0 1 0 K
(\245) 487.3 564.61 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Best-case) 498.76 564.61 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(\245) 487.3 547.43 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(W) 498.76 547.43 T
(orst-case) 509.16 547.43 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(\245) 487.3 530.25 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(A) 498.76 530.25 T
(verage-case) 506.61 530.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 3) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 11.45 Q
(Linear Search) 179.46 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 10.18 Q
(Problem De\336nition:) 72.82 718.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
9 F
(Searc) 72.82 695.92 T
(h an) 98.95 695.92 T
10 F
( ordered) 119.89 695.92 T
9 F
( array of integers for a value and return its) 158.33 695.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(index if the value is found.  Otherwise, return -1.) 72.82 684.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 F
0 0 0 1 0 0 0 K
(// Searches an) 72.82 650.1 T
12 F
(ordered) 164.45 650.1 T
11 F
( array of integers) 207.21 650.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(int lsearch\050int data[],) 72.82 638.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: array) 219.43 638.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(            int size,) 72.82 627.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: array size) 219.43 627.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(            int value) 72.82 615.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: value to find) 219.43 615.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(            \051) 72.82 604.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// output: index if found) 176.67 604.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                 //         otherwise return -1) 72.82 592.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
({) 72.82 581.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     int index = 0;) 72.82 569.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// initialize index to 0) 213.32 569.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(     while \050\050data[index]) 72.82 547.01 T
4 F
(<) 225.54 547.01 T
11 F
( value\051 &&) 231.65 547.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(            \050index < size\051\051) 72.82 535.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(          index++;) 72.82 524.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     if \050data[index] != value\051) 72.82 501.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(          return -1;) 72.82 489.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     else) 72.82 478.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(          return index;) 72.82 466.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(}) 72.82 455.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Linear search) 85.04 455.38 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 8.91 Q
(\245) 72.82 414.22 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
11 10.18 Q
1 0 1 0 0 1 0 K
0.71 (Given an array of size n, what is the) 89.36 414.22 P
13 F
0.71 (average) 327.87 414.22 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
11 F
7.06 (number of elements the algorithm has to) 90 404.04 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(examine?) 90 393.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 4) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 11.45 Q
(Binary Search) 575.5 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 10.18 Q
(Same Problem Definition:) 471.27 718.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
11 F
(Search an) 471.27 695.92 T
13 F
( ordered) 526.25 695.92 T
11 F
( array of integers for a value) 575.12 695.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.15 (and return its index if the value is found.  Oth-) 471.27 684.46 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(erwise, return -1.) 471.27 673.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
471.27 509.89 769.08 647.98 C
0 0 1 0 1 1 0 K
516.37 596.43 699.64 625.07 R
3 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
516.37 599.61 699.64 622.52 R
0 0 0 1 0 0 0 K
N
539.28 622.52 539.28 599.61 2 L
N
562.18 622.52 562.18 599.61 2 L
N
585.09 622.52 585.09 599.61 2 L
N
608 622.52 608 599.61 2 L
N
630.91 622.52 630.91 599.61 2 L
N
653.82 622.52 653.82 599.61 2 L
N
676.73 622.52 676.73 599.61 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 10.18 Q
(7   9  10  17  30  37  46 60) 522.09 611.07 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(0   1  2   3   4  5   6   7) 527.82 628.25 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
471.27 338.07 769.08 750.43 C
471.27 346.35 769.08 498.44 C
0 0 1 0 1 1 0 K
515.65 446.89 698.92 475.53 R
3 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
515.65 450.07 698.92 472.98 R
0 0 0 1 0 0 0 K
N
538.56 472.98 538.56 450.07 2 L
N
561.47 472.98 561.47 450.07 2 L
N
584.38 472.98 584.38 450.07 2 L
N
607.29 472.98 607.29 450.07 2 L
N
630.2 472.98 630.2 450.07 2 L
N
653.1 472.98 653.1 450.07 2 L
N
676.01 472.98 676.01 450.07 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 10.18 Q
(7   9  10  17  30  37  46 60) 521.38 461.53 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(0   1  2   3   4  5   6   7) 527.1 478.71 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 5) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 10.18 Q
(Binary Search \050Cont\325) 161.04 743.64 T
(d\051) 271.66 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 12.73 Q
0 0 0 1 0 0 0 K
(\245) 72.82 708.86 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Binary sear) 88.85 708.86 T
(ch is based on the) 152.04 708.86 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
368.06 707.7 254.79 707.7 2 L
0 1 1 0 1 0 0 K
V
0.41 H
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(divide and conquer) 254.79 708.86 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
132.41 691.15 88.85 691.15 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(concept) 88.85 692.31 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( and works as follows:) 132.41 692.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 11.45 Q
(\245) 88.85 668.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Start by looking at the middle component.) 100.31 668.98 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
( -) 104.89 651.8 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
-0.37 (If the value it holds is too high, go to the middle of) 116.34 651.8 P
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(the bottom half) 116.34 638.43 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(.) 193.92 638.43 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
( -) 104.89 621.25 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(If the value it holds is too low) 116.34 621.25 T
(, go to the middle of) 265.57 621.25 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(the upper half) 116.34 607.89 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(.) 188.19 607.89 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(\245) 88.85 590.71 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Repeat this \324split the r) 100.31 590.71 T
(emainder) 210.85 590.71 T
(\325 until you \336nd the) 260.04 590.71 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(value you want, or decide that it does not exist.) 100.31 577.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 8.91 Q
1 1 0 0 0 0 1 K
(Solution Outline \050Algorithm\051:) 72.82 546.59 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
11 10.18 Q
(Set lower and upper bound;) 72.82 526.65 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
-0.17 (While) 72.82 507.56 P
13 F
-0.17 (value) 109.3 507.56 P
11 F
-0.17 ( not found and more to search do begin) 139.85 507.56 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Compute subscript of middle element) 84.27 488.47 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(with repect to lower and uppper bound;) 95.73 478.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(If middle element equals) 84.27 459.83 T
13 F
(value) 237 459.83 T
11 F
(\050found\051 then) 273.65 459.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(return middle element position) 95.73 450.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(Else if lower is greater than upper bound then) 84.27 431.19 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(\050no more to search\051) 95.73 421.65 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(return position = -1) 95.73 412.1 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Else if) 84.27 393.01 T
13 F
(value) 133.14 393.01 T
11 F
( is less than middle element then) 163.69 393.01 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(set upper bound to middle element position-1) 95.73 383.47 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(Else) 84.27 373.92 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(set lower bound to middle element position+1) 95.73 364.38 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(End;) 72.82 345.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 6) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 10.18 Q
(Binary Search \050Cont\325) 559.48 743.64 T
(d\051) 670.11 743.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 F
0 0 0 1 0 0 0 K
(// Searches an ordered array of integers) 471.27 725.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(int binary\050int data[],) 471.27 715.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: array) 611.77 715.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(           int size,) 471.27 705.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: array size) 611.77 705.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(           int value) 471.27 695.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// input: value to find) 611.77 695.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(           \051) 471.27 685.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// output: index if found) 569.01 685.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                //         otherwise return -1) 471.27 674.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
({) 471.27 664.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     enum state {searching,found,absent} status;) 471.27 654.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     int lower, middle, upper, index;) 471.27 644.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     status = searching;) 471.27 624.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     lower = 0;) 471.27 613.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     upper = size - 1;) 471.27 603.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     index = -1;) 471.27 593.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(while \050status == searching\051 {) 501.81 573.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(          middle = \050lower + upper\051 / 2;) 471.27 562.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(          if \050data[middle] == value\051 {) 471.27 552.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(               status = found;) 471.27 542.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(               index = middle;) 471.27 532.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(          }) 471.27 522.19 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(else if \050lower > upper\051 {) 544.57 522.19 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(               status = absent;) 471.27 512.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(          }) 471.27 501.83 T
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(else if \050value < data[middle]\051 {) 544.57 501.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(               upper = middle - 1;) 471.27 491.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(          }) 471.27 481.47 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(else {) 544.57 481.47 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(               lower = middle + 1;) 471.27 471.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(          }) 471.27 461.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(}) 501.81 450.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(     return index;) 471.27 440.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(}) 471.27 430.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// binary search) 483.48 430.56 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(\245) 471.27 398.74 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0.71 (Given an array of size n, what is the) 487.81 398.74 P
13 F
0.71 (average) 726.32 398.74 P
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
11 F
7.06 (number of elements the algorithm has to) 488.45 387.29 P
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(examine?) 488.45 375.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 7) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 14 Q
(The) 171.02 741.1 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(Struct) 199.41 741.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( T) 237.51 741.1 T
(ype) 249.09 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 72.82 708.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Scienti\336c problems tend to re) 88.85 708.01 T
(v) 253.38 708.01 T
(olv) 260.1 708.01 T
(e around just) 277.78 708.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(tw) 88.85 691.46 T
(o data types: real and inte) 102.71 691.46 T
(ger) 245.97 691.46 T
(. F) 263.08 691.46 T
(or such) 277.65 691.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(application arrays w) 88.85 674.92 T
(ork well because the) 202.24 674.92 T
(y carry) 316.71 674.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(instants of) 88.85 658.37 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
228.07 657.1 150.3 657.1 2 L
1 0 1 0 0 1 0 K
V
0.44 H
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(homogeneous) 150.3 658.37 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( \050same\051 type of data.) 228.07 658.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 72.82 625.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(F) 88.85 625.28 T
(or non-scienti\336c problems, special kinds of) 96.43 625.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(structure are required that use) 88.85 608.74 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
339.6 607.46 258.74 607.46 2 L
0 1 0 0 1 0 1 K
V
N
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(heterogeneous) 258.74 608.74 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(\050dif) 88.85 592.19 T
(ferent types\051 types of data. These dif) 108.72 592.19 T
(ferent) 313.26 592.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(types of data can be related and are pack) 88.85 575.65 T
(ed) 315.73 575.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(together) 88.85 559.1 T
(.) 133.96 559.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 72.82 526.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(V) 88.85 526.01 T
(ery often,) 97.41 526.01 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(arrays of structs) 154.55 526.01 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( are used together to) 243.97 526.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(tak) 88.85 509.47 T
(e adv) 105.82 509.47 T
(antage of both arrays and structs.) 135.4 509.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 8) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 14 Q
(What is a) 556.14 741.1 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(struct) 616.42 741.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( T) 651.41 741.1 T
(ype) 663.21 741.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 708.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(struct) 487.3 708.01 T
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
( is a data type that can ha) 519.98 708.01 T
(v) 660.83 708.01 T
(e) 667.62 708.01 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
692.89 706.73 677.33 706.73 2 L
0 1 0 0 1 0 1 K
V
0.44 H
N
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(dif) 677.33 708.01 T
0 1 0 0 1 0 1 K
725.18 706.73 692.54 706.73 2 L
V
N
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(ferent) 692.54 708.01 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( data) 725.18 708.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(types in it.) 487.3 691.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 658.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
-0.3 (The v) 487.3 658.37 P
-0.3 (alues in a) 518.92 658.37 P
3 F
-0.3 (struct) 574.4 658.37 P
0 F
-0.3 ( type can be of dif) 606.29 658.37 P
-0.3 (ferent type) 705.92 658.37 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(- basic or enumerated. Therefore, a) 487.3 641.83 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(struct) 687.11 641.83 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( is) 718.21 641.83 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
568.16 624.01 487.3 624.01 2 L
0 1 0 0 1 0 1 K
V
N
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(heterogeneous) 487.3 625.28 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( in that it can be composed of) 568.16 625.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(dif) 487.3 608.74 T
(ferent kinds of v) 502.51 608.74 T
(alues. In contrast,) 594.3 608.74 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(array) 696.56 608.74 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( is) 725.31 608.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
565.07 590.92 487.3 590.92 2 L
1 0 1 0 0 1 0 K
V
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
-0.62 (homogeneous) 487.3 592.19 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
-0.62 ( since it can contain only one type of) 565.07 592.19 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(v) 487.3 575.65 T
(alues.) 493.95 575.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 542.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(A struct type is often called) 487.3 542.56 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
680.92 541.28 645.16 541.28 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(record) 645.16 542.56 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( in database) 680.92 542.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(applications.) 487.3 526.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 492.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Indi) 487.3 492.92 T
(vidual components of a struct type are called) 509.51 492.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
538.62 475.1 487.3 475.1 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(members) 487.3 476.38 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(.) 538.62 476.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 443.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(members can be of dif) 487.3 443.28 T
(ferent types \050simple, array) 612.14 443.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(or struct\051) 487.3 426.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
14 F
0 0 0 1 0 0 0 K
(*) 471.27 393.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(A struct is named as a whole and then indi) 487.3 393.65 T
(vidual) 724.53 393.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(members are named using identi\336ers.) 487.3 377.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 9) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 14 Q
(The dif) 136.5 741.1 T
(ference between an) 183.3 741.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(ordinary array) 113.03 727.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( and) 204.43 727.1 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(array of structs) 235.54 727.1 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
72.82 390.25 370.63 694.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
64.41 390.25 379.04 694.43 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
81.59 643.52 367.95 677.89 R
0 X
0 0 1 0 1 1 0 K
V
0.64 H
2 Z
N
81.59 642.89 367.95 677.25 R
V
N
0 0 0 1 0 0 0 K
219.04 677.89 219.04 643.52 2 L
0 0 0 1 0 0 0 K
N
293.49 677.89 293.49 643.52 2 L
N
327.86 677.89 327.86 643.52 2 L
N
259.13 677.89 259.13 643.52 2 L
N
150.31 677.89 150.31 643.52 2 L
N
184.68 677.89 184.68 643.52 2 L
N
115.95 677.89 115.95 643.52 2 L
N
81.59 528.34 367.95 562.71 R
7 X
V
0 X
N
219.04 562.71 219.04 528.34 2 L
N
293.49 562.71 293.49 528.34 2 L
N
327.86 562.71 327.86 528.34 2 L
N
259.13 562.71 259.13 528.34 2 L
N
150.31 562.71 150.31 528.34 2 L
N
184.68 562.71 184.68 528.34 2 L
N
115.95 562.71 115.95 528.34 2 L
N
1 1 0 0 0 0 1 K
110.22 591.98 150.31 626.34 R
3 X
1 1 0 0 0 0 1 K
V
0 X
N
0 0 0 1 0 0 0 K
105.64 414.44 201.86 478.58 R
0 0 0 1 0 0 0 K
N
105.64 462.55 201.86 462.55 2 L
4 X
V
0 X
N
105.64 438.49 201.86 438.49 2 L
N
174.37 462.55 174.37 438.49 2 L
N
1 1 0 0 0 0 1 K
105.64 462.55 201.86 478.58 R
3 X
1 1 0 0 0 0 1 K
V
0 X
N
1 0 1 0 0 1 0 K
105.64 438.49 174.37 462.55 R
12 X
1 0 1 0 0 1 0 K
V
0 X
N
0 0 1 0 1 1 0 K
174.37 438.49 201.86 462.55 R
4 X
0 0 1 0 1 1 0 K
V
0 X
N
0 1 0 0 1 0 1 K
105.64 414.44 146.88 438.49 R
9 X
0 1 0 0 1 0 1 K
V
0 X
N
1 0 0 0 0 1 1 K
146.88 414.44 201.86 438.49 R
8 X
1 0 0 0 0 1 1 K
V
0 X
N
0 0 0 1 0 0 0 K
0 11.45 Q
0 0 0 1 0 0 0 K
(1          2            3        4           5            6          7            8) 87.31 629.99 T
118.4 628.8 119.6 630.39 121.17 626.72 117.21 627.2 4 Y
0 Z
N
118.4 628.8 119.6 630.39 121.17 626.72 117.21 627.2 4 Y
V
98.77 643.52 118.15 628.99 2 L
2 Z
N
115.22 487.95 117 488.86 116.8 484.87 113.45 487.03 4 Y
0 Z
N
115.22 487.95 117 488.86 116.8 484.87 113.45 487.03 4 Y
V
96.48 524.4 115.08 488.23 2 L
2 Z
N
(1           2           3          4           5           6          7            8) 87.31 512.01 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(An ordinary array) 173.22 683.61 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(One type of data) 161.77 597.71 T
(Multiple types of data) 220.18 452.45 T
0 0 0 1 0 0 0 K
119.39 462.55 119.39 478.58 2 L
0.32 H
0 0 0 1 0 0 0 K
N
133.13 462.55 133.13 478.58 2 L
N
146.88 462.55 146.88 478.58 2 L
N
160.62 462.55 160.62 478.58 2 L
N
174.37 462.55 174.37 478.58 2 L
N
188.11 462.55 188.11 478.58 2 L
N
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(An array of structs) 158.33 566.99 T
0 0 0 1 0 0 0 K
81.59 642.89 367.95 677.25 R
0.64 H
0 0 0 1 0 0 0 K
N
0 0 1 0 1 1 0 K
81.59 528.34 367.95 562.71 R
0 0 1 0 1 1 0 K
V
N
0 0 0 1 0 0 0 K
81.59 528.34 367.95 562.71 R
0 0 0 1 0 0 0 K
N
115.95 562.71 115.95 528.34 2 L
N
150.31 562.71 150.31 528.34 2 L
N
184.68 562.71 184.68 528.34 2 L
N
219.04 562.71 219.04 528.34 2 L
N
259.13 562.71 259.13 528.34 2 L
N
293.49 562.71 293.49 528.34 2 L
N
333.58 562.71 333.58 528.34 2 L
N
110.22 591.34 150.31 625.71 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 10) 778.31 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 14 Q
(Syntax of) 554.52 741.1 T
15 F
(struct) 618.3 741.1 T
7 F
(type) 658.36 741.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
4 10.18 Q
1 0 1 0 0 1 0 K
(struct) 494.17 710.55 T
11 F
( <) 530.83 710.55 T
13 F
(struct-type) 543.05 710.55 T
11 F
(>) 610.24 710.55 T
4 F
({) 622.46 710.55 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
11 F
(<) 517.08 699.1 T
13 F
(type> <id-list>) 523.19 699.1 T
11 F
(;) 614.83 699.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(\245\245\245) 551.45 687.64 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(<) 517.08 676.19 T
13 F
(type> <id-list>) 523.19 676.19 T
11 F
(;) 614.83 676.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
4 F
(};) 494.17 664.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
11 F
(<struct-type> <struct-variable>) 494.17 653.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 12.73 Q
1 1 0 0 0 0 1 K
(Example:) 471.27 626.77 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
11 10.18 Q
1 0 1 0 0 1 0 K
(struct) 494.17 601.74 T
0 1 1 0 1 0 0 K
4 F
0 1 1 0 1 0 0 K
(StudentRecord) 536.94 601.74 T
1 0 1 0 0 1 0 K
11 F
1 0 1 0 0 1 0 K
( {) 616.35 601.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(char Name[15];) 517.08 590.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(int Id;) 517.08 578.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(char Department[5];) 517.08 567.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(char sex;) 517.08 555.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(};) 494.17 544.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// StudentRecord) 518.61 544.46 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
4 F
0 1 1 0 1 0 0 K
-1.22 (StudentRecord) 494.17 519.86 P
1 0 1 0 0 1 0 K
1 0 0 0 0 1 1 K
11 F
1 0 0 0 0 1 1 K
-1.22 (Student1) 578.48 519.86 P
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
-1.22 (,) 627.35 519.86 P
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
-1.22 (Student2) 638.35 519.86 P
1 0 1 0 0 1 0 K
4 12.73 Q
1 0 1 0 0 1 0 K
-1.53 (;) 687.22 519.86 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(T) 471.27 493.77 T
(w) 478.02 493.77 T
(o v) 487.08 493.77 T
(ariables,) 502.68 493.77 T
1 0 0 0 0 1 1 K
3 F
1 0 0 0 0 1 1 K
(Student1) 548.62 493.77 T
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
( and) 593.16 493.77 T
0 1 0 0 1 0 1 K
3 F
0 1 0 0 1 0 1 K
(Student2) 617.91 493.77 T
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(, of) 662.45 493.77 T
0 1 1 0 1 0 0 K
2 F
0 1 1 0 1 0 0 K
(StudentRecord) 682.6 493.77 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(type are de\336ned; each has four \336elds:) 471.27 480.41 T
1 0 1 0 0 1 0 K
3 F
1 0 1 0 0 1 0 K
(Name) 664.6 480.41 T
(, Id, Depart-) 694.17 480.41 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(ment) 471.27 467.04 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( and) 496.01 467.04 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(se) 521.46 467.04 T
(x) 531.81 467.04 T
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(.) 537.46 467.04 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(These \336elds are being referred to as:) 471.27 440.32 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Student1.) 494.17 413.59 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Name,) 542.61 413.59 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(Student2.) 582.55 413.59 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Name) 630.99 413.59 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Student1.) 494.17 400.23 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Id,) 542.61 400.23 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(Student2.) 562.76 400.23 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Id) 611.2 400.23 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Student1.) 494.17 386.86 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Department,) 542.61 386.86 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(Student2.) 612.24 386.86 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Department) 660.68 386.86 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Student1.) 494.17 373.5 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(se) 542.61 373.5 T
(x,) 553.02 373.5 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(Student2.) 568.93 373.5 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(se) 617.37 373.5 T
(x) 627.78 373.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 11) 379.86 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 11.45 Q
(Access to struct members) 139.25 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
11 10.18 Q
(\245) 72.82 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Using the member access operator, a period) 89.36 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 90 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Syntax) 107.18 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(<) 107.18 669.19 T
13 F
(struct-variable) 113.29 669.19 T
11 F
(>.<) 204.92 669.19 T
13 F
(member name) 223.25 669.19 T
11 F
(>) 290.45 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(o) 90 646.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Example) 107.18 646.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(strcpy \050Student.Name, "CHAN Tai Man"\051;) 107.18 627.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Student.Id = 12345;) 107.18 616.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy \050Student.Department, "COMP"\051;) 107.18 604.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Student.sex = \325M\325;) 107.18 593.46 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout << "The student is ";) 107.18 559.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(switch \050Student.sex\051 {) 107.18 547.65 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(case \325F\325: case \325f\325:) 130.09 536.19 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(cout << "Ms. ";) 141.54 524.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(break;) 141.54 513.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(case \325M\325: case \325m\325:) 130.09 501.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(cout << "Mr. ";) 141.54 490.37 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(break;) 141.54 478.92 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(}) 107.18 467.47 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(cout << Student.Name << endl;) 107.18 456.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 605.24 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 12) 778.31 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 11.45 Q
(struct-to-struct Assignment) 527.39 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
11 10.18 Q
(\245) 471.27 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(both structs must be of the same type) 487.81 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Example) 505.63 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(StudentRecord Student1, Student2;) 505.63 669.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy \050Student1.Name, "CHAN Tai Man"\051;) 505.63 646.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Student1.Id = 12345;) 505.63 634.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy \050Student1.Department, "COMP"\051;) 505.63 623.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Student1.sex = \325M\325;) 505.63 611.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Student2 = Student1;) 505.63 589.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(o) 488.45 554.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(More Example) 505.63 554.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(StudentRecord Class[200];) 505.63 536.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy \050Class[10].Name, "CHAN Tai Man"\051;) 505.63 513.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Class[10].Id = 12345;) 505.63 501.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy \050Class[10].Department, "COMP"\051;) 505.63 490.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Class[10].sex = \325M\325;) 505.63 478.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Class[0] = Class[10];) 505.63 456.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Page: "mini" 7
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lectures 23) 206.79 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 13) 379.86 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 11.45 Q
(Nested Structure) 166.74 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 8.91 Q
(\245) 72.82 709.49 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(More Example) 89.36 709.49 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
11 10.18 Q
0 1 1 0 1 0 0 K
(struct point {) 95.73 692.1 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(float X,Y;) 118.64 680.64 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(};) 95.73 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a line is defined as two points) 95.73 646.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(struct line {) 95.73 634.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(point p1,p2;) 118.64 623.37 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(}) 95.73 611.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a triangle is defined by three points) 95.73 589.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(struct triangle {) 95.73 577.56 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(point p1,p2,p3;) 118.64 566.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(};) 95.73 554.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a square is defined by) 95.73 531.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// an) 95.73 520.28 T
12 F
(array) 132.38 520.28 T
11 F
( of four points) 162.93 520.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(struct square {) 95.73 508.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(point vertex[4];) 118.64 497.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(};) 95.73 485.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(point P;) 95.73 463.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(line L;) 95.73 451.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(triangle polygon3;) 95.73 440.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(square polygon4;) 95.73 428.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 8.91 Q
1 1 0 0 0 0 1 K
(\245) 72.82 398.95 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Access to members of nested structure) 89.36 398.95 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
11 10.18 Q
(L.p1.x = 1.0;   L.p1.y = 2.0;) 95.73 381.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(polygon4.vertex[0].x = 1.0;) 95.73 358.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(polygon4.vertex[0].y = 2.0;) 95.73 347.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 7
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 7
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-BoldItalic
%%+ Times-Italic
%%+ Courier-Bold
%%+ Symbol
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ ZapfDingbats
%%+ Palatino-BoldItalic
%%EOF
