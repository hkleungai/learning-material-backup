%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 10 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Palatino-Bold FMFONTDEFINE
5 0 /Palatino-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(1 of 9) 532.98 53.62 T
1 16 Q
(The Hong Kong University of Science & T) 83.52 770.29 T
(echnology) 427.04 770.29 T
1 14 Q
(COMP 102: Computer & Programming Fundamentals  I) 97.57 742.62 T
0 12 Q
(Summer 1996) 263.81 716.95 T
(FIN) 235.42 699.95 T
(AL  EXAMIN) 254.33 699.95 T
(A) 323.89 699.95 T
(TION) 331.22 699.95 T
(14  August 1996, 9:30am - 12:30am) 210.82 682.95 T
(STUDENT N) 135.65 614.95 T
(AME:) 201.55 614.95 T
(___________________________) 279.65 614.95 T
(STUDENT NUMBER:) 135.65 597.95 T
(___________________________) 279.65 597.95 T
(DEP) 135.65 580.95 T
(AR) 157.21 580.95 T
(TMENT) 173.16 580.95 T
(:) 213.89 580.95 T
(___________________________) 279.65 580.95 T
(LAB. SECTION:) 135.65 563.95 T
(___________________________) 279.65 563.95 T
(Instructions to Students) 36.65 512.95 T
2 F
(\245) 36.65 495.95 T
(Chec) 54.65 495.95 T
(k that you ha) 81.89 495.95 T
(ve all 10 pages) 156.01 495.95 T
(.) 237.3 495.95 T
(\245) 36.65 478.95 T
(Write your name) 54.65 478.95 T
(, student number) 148.43 478.95 T
(, department, and lab) 243.01 478.95 T
(. section on this page) 362.6 478.95 T
(.) 478.4 478.95 T
(\245) 36.65 461.95 T
(Write your student number on top right hand corner of eac) 54.65 461.95 T
(h page) 380.33 461.95 T
(.) 416.78 461.95 T
(\245) 36.65 444.95 T
(Answer all questions in the space provided.) 54.65 444.95 T
0 F
(F) 99.65 340.95 T
(or Use by Grader) 106.14 340.95 T
(Question 1) 99.65 321.95 T
(__________________ / 8) 243.65 321.95 T
(Question 2) 99.65 302.95 T
(__________________ / 6) 243.65 302.95 T
(Question 3) 99.65 283.95 T
(__________________ / 8) 243.65 283.95 T
(Question 4) 99.65 264.95 T
(__________________ /10) 243.65 264.95 T
(Question 5) 99.65 245.95 T
(__________________ / 8) 243.65 245.95 T
(Question 6) 99.65 226.95 T
(__________________ / 8) 243.65 226.95 T
(Question 7) 99.65 207.95 T
(__________________ / 8) 243.65 207.95 T
(Question 8) 99.65 188.95 T
(__________________ /18) 243.65 188.95 T
(Question 9) 99.65 169.95 T
(__________________ / 8) 243.65 169.95 T
(Question 10) 99.65 150.95 T
(__________________ /18) 243.65 150.95 T
(T) 99.65 116.95 T
(O) 106.76 116.95 T
(T) 114.95 116.95 T
(AL:) 121.16 116.95 T
(__________________ /100) 243.65 116.95 T
81.65 105.95 495.65 366.95 18 RR
0.5 H
0 Z
N
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(2 of 9) 532.98 53.62 T
3 12 Q
(1.) 36.65 772.95 T
(\0508  points\051) 63.65 772.95 T
0 F
( Assume that the follo) 114.98 772.95 T
(wing de\336nitions ha) 220.68 772.95 T
(v) 312.44 772.95 T
(e been gi) 318.26 772.95 T
(v) 361.28 772.95 T
(en:) 367.1 772.95 T
(const int max = 40;) 63.65 741.95 T
(\337oat x[max];) 63.65 727.95 T
(a\051 Ho) 63.65 699.95 T
(w man) 90.34 699.95 T
(y elements does the array x  ha) 122.48 699.95 T
(v) 270.54 699.95 T
(e?) 276.36 699.95 T
(____________) 315.65 699.95 T
(b\051 What is the subscript of the \336rst element of x?) 63.65 668.95 T
(____________) 315.65 668.95 T
(c\051 What is the subscript of the last element of x?) 63.65 637.95 T
(____________) 315.65 637.95 T
(d\051 Write a C++ statement that assigns the v) 63.65 606.95 T
(alue 10 to the second element of x.) 270.86 606.95 T
(e\051 Write a loop that doubles the v) 63.65 538.95 T
(alue of each element of x.) 223.66 538.95 T
3 F
(2.) 36.65 405.95 T
(\0506 points\051) 63.65 405.95 T
0 F
(Which of the follo) 114.98 405.95 T
(wing code fragments are le) 203 405.95 T
(g) 332.78 405.95 T
(al? \050Mark the correct answers with a \322Y\323\051) 338.72 405.95 T
(_____ a\051 int array[4] ={ 1, 2, 3, 4, 5 };) 63.65 371.95 T
(_____ b\051 int x[4];) 63.65 337.95 T
(x[4] = 0;) 108.65 320.95 T
(_____ c\051 v) 63.65 286.95 T
(oid f \050const int x[ ] \051 {) 114.73 286.95 T
(     if \050 x[0] < 0\051  x[0] = 0;) 108.65 269.95 T
(}) 108.65 252.95 T
(_____ d\051 char message[ ] = \322Hello\323;) 63.65 218.95 T
(_____ e\051 char message[6];) 63.65 184.95 T
( message = \322Hello\323;) 108.65 167.95 T
(_____ f\051 int array[2,3];) 63.65 133.95 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(3 of 9) 532.98 53.62 T
3 12 Q
(3.) 36.65 755.95 T
(\0508 points\051) 63.65 755.95 T
0 F
( What is the comple) 111.98 755.95 T
(xity \050e) 207.79 755.95 T
(x. log n, n or n  \051 of each of the follo) 238.61 755.95 T
(wing algorithms:) 412.94 755.95 T
(a\051 Linear search) 63.65 721.95 T
(b\051 Binary search) 63.65 687.95 T
(c\051 Selection sort) 63.65 653.95 T
(d\051 Insertion sort) 63.65 619.95 T
3 F
(4.) 36.65 555.95 T
(\05010 points\051) 54.65 555.95 T
0 F
( Consider the follo) 108.98 555.95 T
(wing C++ program:) 198.35 555.95 T
(#include <iostream.h>) 54.65 523.95 T
(v) 54.65 495.95 T
(oid test4 \050int& a \051 {) 60.41 495.95 T
(int b = 0;) 72.65 481.95 T
(static int c = 0;) 72.65 467.95 T
(a++;) 72.65 439.95 T
(b++;) 72.65 425.95 T
(c++;) 72.65 411.95 T
(cout <<  a  <<  \322  \322  <<  b  <<  \322  \322 <<  c  << endl;) 72.65 397.95 T
(}) 54.65 383.95 T
(v) 54.65 355.95 T
(oid main \050 \051 {) 60.41 355.95 T
(int a =1, b = 2 ;) 72.65 339.95 T
(test4 \050 a \051;) 72.65 325.95 T
(test4 \050 b \051;) 72.65 311.95 T
(test4 \050 a \051;) 72.65 297.95 T
(cout <<  a  <<  \322  \322  <<  b  << endl;) 72.65 283.95 T
(}) 54.65 269.95 T
(Sho) 54.65 241.95 T
(w the output of the abo) 73.02 241.95 T
(v) 183.83 241.95 T
(e program:) 189.65 241.95 T
0 10 Q
(2) 306.65 765.12 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(4 of 9) 532.98 53.62 T
3 12 Q
(5.) 36.65 772.95 T
(\0508  points\051) 54.65 772.95 T
0 F
( Consider the follo) 105.98 772.95 T
(wing array and function de\336nitions:) 195.35 772.95 T
(int  array1[5] = { 1, 2, 3, 4, 5 };) 54.65 742.95 T
(int  array2[10];) 54.65 728.95 T
(v) 54.65 700.95 T
(oid test5 \050 int  a[ ], int num \051 {) 60.41 700.95 T
(for  \050 int  inde) 72.65 686.95 T
(x = 0;  inde) 138.79 686.95 T
(x <= num; inde) 193.38 686.95 T
(x++ \051) 267.07 686.95 T
(a[inde) 90.65 670.95 T
(x] = 5;) 120.46 670.95 T
(}) 54.65 654.95 T
(Which of the follo) 54.65 627.95 T
(wing are v) 142.67 627.95 T
(alid function calls? \050Mark the correct answers with a \322Y\323\051) 193.02 627.95 T
(_____) 54.65 605.95 T
(test5 \050 array1, array1[2] \051;) 99.65 605.95 T
(_____) 54.65 583.95 T
(test5 \050 array1, 5 \051;) 99.65 583.95 T
(_____) 54.65 561.95 T
(test5 \050 array2, 5 \051;) 99.65 561.95 T
(_____) 54.65 539.95 T
(test5 \050 array2[3], 9 \051;) 99.65 539.95 T
3 F
(6.  \0508 points\051) 36.65 495.95 T
0 F
(a\051 De\336ne an enumeration type called) 54.65 478.95 T
3 F
(Rainbo) 234.6 478.95 T
(w) 271.82 478.95 T
0 F
( to represent the color or a rainbo) 280.49 478.95 T
(w:) 439.81 478.95 T
3 F
(violet, indigo, blue) 454.81 478.95 T
(     gr) 54.65 464.95 T
(een, y) 80.76 464.95 T
(ello) 109.97 464.95 T
(w) 127.85 464.95 T
(, orange,) 135.85 464.95 T
0 F
(and) 183.18 464.95 T
3 F
( r) 200.51 464.95 T
(ed) 208.62 464.95 T
0 F
(.) 220.62 464.95 T
(b\051 De\336ne a v) 54.65 416.95 T
(ariable) 116.66 416.95 T
3 F
(color) 152.32 416.95 T
0 F
( of type) 178.31 416.95 T
3 F
(Rainbo) 217.97 416.95 T
(w) 255.19 416.95 T
0 F
(.) 263.08 416.95 T
(c\051 Write a switch statement to print out the \322v) 54.65 365.95 T
(alue\323 of) 273.98 365.95 T
3 F
(color) 315.3 365.95 T
0 F
(. F) 340.63 365.95 T
(or e) 353.12 365.95 T
(xample, if the v) 371.27 365.95 T
(alue of) 446.29 365.95 T
3 F
(color) 482.28 365.95 T
0 F
( is) 508.27 365.95 T
3 F
(blue) 522.28 365.95 T
0 F
(,) 544.28 365.95 T
(     then output from e) 54.65 351.95 T
(x) 158.46 351.95 T
(ecuting the switch statement should be:) 164.28 351.95 T
3 F
(blue) 356.27 351.95 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(5 of 9) 532.98 53.62 T
3 12 Q
(7. \0508  points\051) 36.65 772.95 T
0 F
( Consider the follo) 99.98 772.95 T
(wing C++ program:) 189.35 772.95 T
(#include <iostream.h>) 54.65 740.95 T
(v) 54.65 712.95 T
(oid main \050 \051 {) 60.41 712.95 T
(char ne) 72.65 698.95 T
(xt;) 107.45 698.95 T
(int count = 0;) 72.65 684.95 T
(cin.get\050ne) 72.65 656.95 T
(xt\051;) 120.12 656.95 T
(while \050 ne) 72.65 642.95 T
(xt != \324\134n\325 \051 {) 120.46 642.95 T
(if \050 \050count % 2\051 == 0 \051  cout << ne) 90.65 628.95 T
(xt ;) 254.51 628.95 T
(count++;) 90.65 614.95 T
(cin.get\050ne) 90.65 600.95 T
(xt\051;) 138.12 600.95 T
(}) 72.65 586.95 T
(}) 54.65 572.95 T
(a\051) 54.65 544.95 T
(Gi) 72.65 544.95 T
(v) 84.35 544.95 T
(en the follo) 90.17 544.95 T
(wing input:) 144.53 544.95 T
(What w) 72.65 454.95 T
(ould be the output of the program:) 110.18 454.95 T
(b\051) 54.65 334.95 T
(Gi) 72.65 334.95 T
(v) 84.35 334.95 T
(en the follo) 90.17 334.95 T
(wing input:) 144.53 334.95 T
(What w) 72.65 242.95 T
(ould be the output of the program:) 110.18 242.95 T
72.65 498.71 540.65 516.71 R
7 X
V
0.5 H
2 Z
0 X
N
90.65 516.71 90.65 498.71 2 L
N
108.65 516.71 108.65 498.71 2 L
N
126.65 516.71 126.65 498.71 2 L
N
144.65 516.71 144.65 498.71 2 L
N
162.65 516.71 162.65 498.71 2 L
N
180.65 516.71 180.65 498.71 2 L
N
198.65 516.71 198.65 498.71 2 L
N
216.65 516.71 216.65 498.71 2 L
N
234.65 516.71 234.65 498.71 2 L
N
252.65 516.71 252.65 498.71 2 L
N
270.65 516.71 270.65 498.71 2 L
N
288.65 516.71 288.65 498.71 2 L
N
306.65 516.71 306.65 498.71 2 L
N
324.65 516.71 324.65 498.71 2 L
N
342.65 516.71 342.65 498.71 2 L
N
450.65 516.71 450.65 498.71 2 L
N
360.65 516.71 360.65 498.71 2 L
N
432.65 516.71 432.65 498.71 2 L
N
414.65 516.71 414.65 498.71 2 L
N
396.65 516.71 396.65 498.71 2 L
N
378.65 516.71 378.65 498.71 2 L
N
468.65 516.71 468.65 498.71 2 L
N
486.65 516.71 486.65 498.71 2 L
N
504.65 516.71 504.65 498.71 2 L
N
522.65 516.71 522.65 498.71 2 L
N
0 14 Q
(a) 81.65 504.99 T
(b) 99.65 504.99 T
0 12 Q
(c) 117.65 504.99 T
(d) 135.65 504.99 T
(e) 153.65 504.99 T
(f) 171.65 504.99 T
(g) 207.65 504.99 T
(h) 225.65 504.99 T
72.65 411.95 540.65 429.95 R
7 X
V
0 X
N
90.65 429.95 90.65 411.95 2 L
N
108.65 429.95 108.65 411.95 2 L
N
126.65 429.95 126.65 411.95 2 L
N
144.65 429.95 144.65 411.95 2 L
N
162.65 429.95 162.65 411.95 2 L
N
180.65 429.95 180.65 411.95 2 L
N
198.65 429.95 198.65 411.95 2 L
N
216.65 429.95 216.65 411.95 2 L
N
234.65 429.95 234.65 411.95 2 L
N
252.65 429.95 252.65 411.95 2 L
N
270.65 429.95 270.65 411.95 2 L
N
288.65 429.95 288.65 411.95 2 L
N
306.65 429.95 306.65 411.95 2 L
N
324.65 429.95 324.65 411.95 2 L
N
342.65 429.95 342.65 411.95 2 L
N
450.65 429.95 450.65 411.95 2 L
N
360.65 429.95 360.65 411.95 2 L
N
432.65 429.95 432.65 411.95 2 L
N
414.65 429.95 414.65 411.95 2 L
N
396.65 429.95 396.65 411.95 2 L
N
378.65 429.95 378.65 411.95 2 L
N
468.65 429.95 468.65 411.95 2 L
N
486.65 429.95 486.65 411.95 2 L
N
504.65 429.95 504.65 411.95 2 L
N
522.65 429.95 522.65 411.95 2 L
N
72.65 291.35 540.65 309.35 R
7 X
V
0 X
N
90.65 309.35 90.65 291.35 2 L
N
108.65 309.35 108.65 291.35 2 L
N
126.65 309.35 126.65 291.35 2 L
N
144.65 309.35 144.65 291.35 2 L
N
162.65 309.35 162.65 291.35 2 L
N
180.65 309.35 180.65 291.35 2 L
N
198.65 309.35 198.65 291.35 2 L
N
216.65 309.35 216.65 291.35 2 L
N
234.65 309.35 234.65 291.35 2 L
N
252.65 309.35 252.65 291.35 2 L
N
270.65 309.35 270.65 291.35 2 L
N
288.65 309.35 288.65 291.35 2 L
N
306.65 309.35 306.65 291.35 2 L
N
324.65 309.35 324.65 291.35 2 L
N
342.65 309.35 342.65 291.35 2 L
N
450.65 309.35 450.65 291.35 2 L
N
360.65 309.35 360.65 291.35 2 L
N
432.65 309.35 432.65 291.35 2 L
N
414.65 309.35 414.65 291.35 2 L
N
396.65 309.35 396.65 291.35 2 L
N
378.65 309.35 378.65 291.35 2 L
N
468.65 309.35 468.65 291.35 2 L
N
486.65 309.35 486.65 291.35 2 L
N
504.65 309.35 504.65 291.35 2 L
N
522.65 309.35 522.65 291.35 2 L
N
72.65 195.95 540.65 213.95 R
7 X
V
0 X
N
90.65 213.95 90.65 195.95 2 L
N
108.65 213.95 108.65 195.95 2 L
N
126.65 213.95 126.65 195.95 2 L
N
144.65 213.95 144.65 195.95 2 L
N
162.65 213.95 162.65 195.95 2 L
N
180.65 213.95 180.65 195.95 2 L
N
198.65 213.95 198.65 195.95 2 L
N
216.65 213.95 216.65 195.95 2 L
N
234.65 213.95 234.65 195.95 2 L
N
252.65 213.95 252.65 195.95 2 L
N
270.65 213.95 270.65 195.95 2 L
N
288.65 213.95 288.65 195.95 2 L
N
306.65 213.95 306.65 195.95 2 L
N
324.65 213.95 324.65 195.95 2 L
N
342.65 213.95 342.65 195.95 2 L
N
450.65 213.95 450.65 195.95 2 L
N
360.65 213.95 360.65 195.95 2 L
N
432.65 213.95 432.65 195.95 2 L
N
414.65 213.95 414.65 195.95 2 L
N
396.65 213.95 396.65 195.95 2 L
N
378.65 213.95 378.65 195.95 2 L
N
468.65 213.95 468.65 195.95 2 L
N
486.65 213.95 486.65 195.95 2 L
N
504.65 213.95 504.65 195.95 2 L
N
522.65 213.95 522.65 195.95 2 L
N
(0) 81.65 297.47 T
(1) 117.65 297.47 T
(2) 153.65 297.47 T
(3) 189.65 297.47 T
(4) 225.65 297.47 T
(5) 261.65 297.47 T
(6) 297.65 297.47 T
(7) 333.65 297.47 T
(8) 369.65 297.47 T
(9) 405.65 297.47 T
(1) 441.65 297.47 T
(0) 459.65 297.47 T
(1) 495.65 297.47 T
(1) 513.65 297.47 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(6 of 9) 532.98 53.62 T
3 12 Q
(8.  \05018 points\051) 36.65 772.95 T
0 F
(Assume that the follo) 108.98 772.95 T
(wing structures,) 211.68 772.95 T
3 F
(T) 294.34 772.95 T
(ime) 302.12 772.95 T
0 F
(,) 320.78 772.95 T
3 F
(A) 326.78 772.95 T
(ppointment) 335.15 772.95 T
0 F
( and) 394.49 772.95 T
3 F
(A_List) 417.82 772.95 T
0 F
(, are de\336ned  for) 452.48 772.95 T
( storing the daily appointments of a person:) 63.65 758.95 T
(struct) 72.65 730.95 T
3 F
(T) 102.31 730.95 T
(ime) 110.1 730.95 T
0 F
( {) 128.76 730.95 T
(int Hour;) 90.65 716.95 T
(// hour of  time) 216.65 716.95 T
(Assume  0 <= hour <= 24) 333.65 716.95 T
(int Minute;) 90.65 702.95 T
(// minute of time) 216.65 702.95 T
(Assume  0 <= minute <= 59) 333.65 702.95 T
(\051;) 72.65 688.95 T
(struct) 72.65 674.95 T
3 F
(A) 102.31 674.95 T
(ppointment) 110.68 674.95 T
0 F
( {) 170.02 674.95 T
(// Information on an appointment) 216.65 674.95 T
(T) 90.65 660.95 T
(ime) 97.56 660.95 T
3 F
(A_time) 118.56 660.95 T
0 F
(;) 155.88 660.95 T
(// T) 216.65 660.95 T
(ime of the appointment) 233.23 660.95 T
(char) 90.65 646.95 T
3 F
(Description) 114.3 646.95 T
0 F
([30];) 173.63 646.95 T
(// Description on the appointment) 216.65 646.95 T
(};) 72.65 632.95 T
(struct) 72.65 618.95 T
3 F
(A_list) 102.31 618.95 T
0 F
( {) 132.31 618.95 T
(// A list of appointments) 270.65 618.95 T
(Appointment A_items[10];) 90.65 604.95 T
(// Appointment items in the current list) 270.65 604.95 T
(int size;) 90.65 590.95 T
(// Number of appointments in the current list) 270.65 590.95 T
(};) 72.65 576.95 T
3 F
(A_list) 72.65 562.95 T
0 F
(  app_list;) 102.65 562.95 T
(a\051 Write a  statement that de\336nes a v) 54.65 534.95 T
(ariable) 229.64 534.95 T
3 F
(item1) 265.3 534.95 T
0 F
( of type) 293.95 534.95 T
3 F
(A) 333.61 534.95 T
(ppointment) 341.98 534.95 T
0 F
(.) 401.32 534.95 T
(b\051 Write a se) 54.65 478.95 T
(gment of code that assigns the time 18:30 to the member) 116.11 478.95 T
3 F
(A_time) 391.09 478.95 T
0 F
( of) 428.41 478.95 T
3 F
(item1) 447.41 478.95 T
0 F
( and) 476.06 478.95 T
(assigns the character string  \322Meeting with Mr) 72.65 464.95 T
(. Chan\323 to the member) 294.95 464.95 T
3 F
(Description) 406.93 464.95 T
0 F
( of) 466.26 464.95 T
3 F
(item1) 482.26 464.95 T
0 F
(.) 510.91 464.95 T
-0.12 (c\051 Write an int function) 54.65 366.95 P
3 F
-0.12 (T_compar) 169.69 366.95 P
-0.12 (e) 222.8 366.95 P
0 F
-0.12 ( that tak) 228.13 366.95 P
-0.12 (es tw) 266.44 366.95 P
-0.12 (o ar) 291.19 366.95 P
-0.12 (guments, time1 and time2, of type) 309.18 366.95 P
3 F
-0.12 (T) 475.79 366.95 P
-0.12 (ime) 483.58 366.95 P
0 F
-0.12 ( and returns) 502.24 366.95 P
(     0  if  time1 is equal to or earlier than time2 and returns 1  if time1 is later than time2. F) 54.65 352.95 T
(or e) 486.43 352.95 T
(xample,) 504.58 352.95 T
(     if time1 is 9:30 and time2 is 18:30,  then) 54.65 338.95 T
3 F
(T_compar) 267.32 338.95 T
(e) 320.44 338.95 T
0 F
( returns 0 .) 325.76 338.95 T
(// A Function for comparing times) 90.65 310.95 T
(int) 90.65 296.95 T
3 F
(T_compar) 106.32 296.95 T
(e) 159.43 296.95 T
0 F
( \050) 164.76 296.95 T
3 F
(T) 174.76 296.95 T
(ime) 182.54 296.95 T
0 F
(time1,) 204.2 296.95 T
3 F
(T) 237.54 296.95 T
(ime) 245.33 296.95 T
0 F
( time2 \051  {) 263.99 296.95 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(7 of 9) 532.98 53.62 T
3 12 Q
(8. \050Cont\325) 36.65 758.95 T
(d\051) 81.73 758.95 T
0 F
(d\051 Write a v) 54.65 730.95 T
(oid function) 112.06 730.95 T
3 F
(insert) 176.39 730.95 T
0 F
( that tak) 205.72 730.95 T
(es tw) 244.26 730.95 T
(o ar) 269.14 730.95 T
(guments, an appointment of type) 287.24 730.95 T
3 F
(A) 447.9 730.95 T
(ppointment) 456.26 730.95 T
0 F
( and an) 515.6 730.95 T
(appointment list of type) 72.65 716.95 T
3 F
(A_list) 189.98 716.95 T
0 F
(, and inserts the appointment into the appointment list so that the) 219.98 716.95 T
(appointments are arranged in chronological order \050i.e. arranged according to the order of time\051.) 72.65 702.95 T
(Hint: Y) 72.65 688.95 T
(ou may use the function) 107.66 688.95 T
3 F
(T_compar) 225.98 688.95 T
(e) 279.1 688.95 T
0 F
( de\336ned in \050c\051.) 284.42 688.95 T
(// If the number of appointments in the list is) 72.65 660.95 T
3 F
(size) 289.98 660.95 T
0 F
( before) 308.64 660.95 T
3 F
(insert) 345.29 660.95 T
0 F
( is called,) 374.62 660.95 T
3 F
(//) 72.65 646.95 T
0 F
(the number of appointments will be increased to size+1 after) 82.32 646.95 T
3 F
(insert) 376.37 646.95 T
0 F
( is called.) 405.7 646.95 T
(v) 72.65 632.95 T
(oid) 78.41 632.95 T
3 F
(insert) 99.74 632.95 T
0 F
( \050) 129.07 632.95 T
3 F
(A) 144.65 632.95 T
(ppointment) 153.01 632.95 T
0 F
(item,) 215.35 632.95 T
(// The appointment to be inserted into the list) 279.65 632.95 T
3 F
(A_list) 144.65 618.95 T
0 F
(&) 174.65 618.95 T
( app_list \051) 186.98 618.95 T
(   {) 234.98 618.95 T
(// The appointment list to be updated) 279.65 618.95 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(8 of 9) 532.98 53.62 T
4 12 Q
(9. \0508 points\051) 36.65 772.95 T
5 F
( Consider the following C++ pr) 100.3 772.95 T
(ogram which uses the idea of insertion sort to stor) 266.41 772.95 T
(e a) 531.52 772.95 T
(list of input numbers \050terminates by a -1\051 in descending or) 54.65 758.95 T
(der:) 362.82 758.95 T
(#include <iostr) 54.65 720.95 T
(eam.h>) 134.1 720.95 T
(#include <iomanip.h>) 54.65 706.95 T
(void main \050 \051 {) 54.65 687.95 T
(int data[100];) 72.65 673.95 T
(int  curr) 72.65 659.95 T
(ent_item, curr) 114.86 659.95 T
(ent, insert_point;) 189.08 659.95 T
(cin >> curr) 72.65 631.95 T
(ent_item;) 130.82 631.95 T
(curr) 72.65 617.95 T
(ent = 0;) 94.48 617.95 T
(while \050 curr) 72.65 603.95 T
(ent_item != -1\051  {) 134.2 603.95 T
(insert_point = curr) 90.65 589.95 T
(ent;) 189.86 589.95 T
(while \050\050insert_point != 0\051  && \050data[insert_point-1] < curr) 90.65 575.95 T
(ent_item\051\051 {) 394.2 575.95 T
(data[insert_point] = data[insert_point-1];) 108.65 561.95 T
(insert_point--;) 108.65 547.95 T
(}) 90.65 533.95 T
(data[insert_point] = curr) 90.65 519.95 T
(ent_item;) 221.1 519.95 T
(for \050int  i = 0;  i <= curr) 90.65 491.95 T
(ent; i++\051) 210.95 491.95 T
(cout << setw\0503\051 << data[i] ;) 108.65 477.95 T
(cout << endl;) 90.65 463.95 T
(curr) 90.65 435.95 T
(ent++;) 112.48 435.95 T
(cin >> curr) 90.65 421.95 T
(ent_item;) 148.82 421.95 T
(}) 72.65 407.95 T
(}) 54.65 391.95 T
(Given the following input numbers:) 54.65 358.95 T
(34  54  66  12  4  8  43  24  -1) 72.65 339.95 T
(Show the output of the above pr) 54.65 320.95 T
(ogram:) 225.84 320.95 T
63.65 294.95 531.65 312.95 R
7 X
V
0.5 H
2 Z
0 X
N
81.65 312.95 81.65 294.95 2 L
N
99.65 312.95 99.65 294.95 2 L
N
117.65 312.95 117.65 294.95 2 L
N
135.65 312.95 135.65 294.95 2 L
N
153.65 312.95 153.65 294.95 2 L
N
171.65 312.95 171.65 294.95 2 L
N
189.65 312.95 189.65 294.95 2 L
N
207.65 312.95 207.65 294.95 2 L
N
225.65 312.95 225.65 294.95 2 L
N
243.65 312.95 243.65 294.95 2 L
N
261.65 312.95 261.65 294.95 2 L
N
279.65 312.95 279.65 294.95 2 L
N
297.65 312.95 297.65 294.95 2 L
N
315.65 312.95 315.65 294.95 2 L
N
333.65 312.95 333.65 294.95 2 L
N
441.65 312.95 441.65 294.95 2 L
N
351.65 312.95 351.65 294.95 2 L
N
423.65 312.95 423.65 294.95 2 L
N
405.65 312.95 405.65 294.95 2 L
N
387.65 312.95 387.65 294.95 2 L
N
369.65 312.95 369.65 294.95 2 L
N
459.65 312.95 459.65 294.95 2 L
N
477.65 312.95 477.65 294.95 2 L
N
495.65 312.95 495.65 294.95 2 L
N
513.65 312.95 513.65 294.95 2 L
N
63.65 276.95 531.65 294.95 R
7 X
V
0 X
N
81.65 294.95 81.65 276.95 2 L
N
99.65 294.95 99.65 276.95 2 L
N
117.65 294.95 117.65 276.95 2 L
N
135.65 294.95 135.65 276.95 2 L
N
153.65 294.95 153.65 276.95 2 L
N
171.65 294.95 171.65 276.95 2 L
N
189.65 294.95 189.65 276.95 2 L
N
207.65 294.95 207.65 276.95 2 L
N
225.65 294.95 225.65 276.95 2 L
N
243.65 294.95 243.65 276.95 2 L
N
261.65 294.95 261.65 276.95 2 L
N
279.65 294.95 279.65 276.95 2 L
N
297.65 294.95 297.65 276.95 2 L
N
315.65 294.95 315.65 276.95 2 L
N
333.65 294.95 333.65 276.95 2 L
N
441.65 294.95 441.65 276.95 2 L
N
351.65 294.95 351.65 276.95 2 L
N
423.65 294.95 423.65 276.95 2 L
N
405.65 294.95 405.65 276.95 2 L
N
387.65 294.95 387.65 276.95 2 L
N
369.65 294.95 369.65 276.95 2 L
N
459.65 294.95 459.65 276.95 2 L
N
477.65 294.95 477.65 276.95 2 L
N
495.65 294.95 495.65 276.95 2 L
N
513.65 294.95 513.65 276.95 2 L
N
63.65 258.95 531.65 276.95 R
7 X
V
0 X
N
81.65 276.95 81.65 258.95 2 L
N
99.65 276.95 99.65 258.95 2 L
N
117.65 276.95 117.65 258.95 2 L
N
135.65 276.95 135.65 258.95 2 L
N
153.65 276.95 153.65 258.95 2 L
N
171.65 276.95 171.65 258.95 2 L
N
189.65 276.95 189.65 258.95 2 L
N
207.65 276.95 207.65 258.95 2 L
N
225.65 276.95 225.65 258.95 2 L
N
243.65 276.95 243.65 258.95 2 L
N
261.65 276.95 261.65 258.95 2 L
N
279.65 276.95 279.65 258.95 2 L
N
297.65 276.95 297.65 258.95 2 L
N
315.65 276.95 315.65 258.95 2 L
N
333.65 276.95 333.65 258.95 2 L
N
441.65 276.95 441.65 258.95 2 L
N
351.65 276.95 351.65 258.95 2 L
N
423.65 276.95 423.65 258.95 2 L
N
405.65 276.95 405.65 258.95 2 L
N
387.65 276.95 387.65 258.95 2 L
N
369.65 276.95 369.65 258.95 2 L
N
459.65 276.95 459.65 258.95 2 L
N
477.65 276.95 477.65 258.95 2 L
N
495.65 276.95 495.65 258.95 2 L
N
513.65 276.95 513.65 258.95 2 L
N
63.65 240.95 531.65 258.95 R
7 X
V
0 X
N
81.65 258.95 81.65 240.95 2 L
N
99.65 258.95 99.65 240.95 2 L
N
117.65 258.95 117.65 240.95 2 L
N
135.65 258.95 135.65 240.95 2 L
N
153.65 258.95 153.65 240.95 2 L
N
171.65 258.95 171.65 240.95 2 L
N
189.65 258.95 189.65 240.95 2 L
N
207.65 258.95 207.65 240.95 2 L
N
225.65 258.95 225.65 240.95 2 L
N
243.65 258.95 243.65 240.95 2 L
N
261.65 258.95 261.65 240.95 2 L
N
279.65 258.95 279.65 240.95 2 L
N
297.65 258.95 297.65 240.95 2 L
N
315.65 258.95 315.65 240.95 2 L
N
333.65 258.95 333.65 240.95 2 L
N
441.65 258.95 441.65 240.95 2 L
N
351.65 258.95 351.65 240.95 2 L
N
423.65 258.95 423.65 240.95 2 L
N
405.65 258.95 405.65 240.95 2 L
N
387.65 258.95 387.65 240.95 2 L
N
369.65 258.95 369.65 240.95 2 L
N
459.65 258.95 459.65 240.95 2 L
N
477.65 258.95 477.65 240.95 2 L
N
495.65 258.95 495.65 240.95 2 L
N
513.65 258.95 513.65 240.95 2 L
N
63.65 222.95 531.65 240.95 R
7 X
V
0 X
N
81.65 240.95 81.65 222.95 2 L
N
99.65 240.95 99.65 222.95 2 L
N
117.65 240.95 117.65 222.95 2 L
N
135.65 240.95 135.65 222.95 2 L
N
153.65 240.95 153.65 222.95 2 L
N
171.65 240.95 171.65 222.95 2 L
N
189.65 240.95 189.65 222.95 2 L
N
207.65 240.95 207.65 222.95 2 L
N
225.65 240.95 225.65 222.95 2 L
N
243.65 240.95 243.65 222.95 2 L
N
261.65 240.95 261.65 222.95 2 L
N
279.65 240.95 279.65 222.95 2 L
N
297.65 240.95 297.65 222.95 2 L
N
315.65 240.95 315.65 222.95 2 L
N
333.65 240.95 333.65 222.95 2 L
N
441.65 240.95 441.65 222.95 2 L
N
351.65 240.95 351.65 222.95 2 L
N
423.65 240.95 423.65 222.95 2 L
N
405.65 240.95 405.65 222.95 2 L
N
387.65 240.95 387.65 222.95 2 L
N
369.65 240.95 369.65 222.95 2 L
N
459.65 240.95 459.65 222.95 2 L
N
477.65 240.95 477.65 222.95 2 L
N
495.65 240.95 495.65 222.95 2 L
N
513.65 240.95 513.65 222.95 2 L
N
63.65 204.95 531.65 222.95 R
7 X
V
0 X
N
81.65 222.95 81.65 204.95 2 L
N
99.65 222.95 99.65 204.95 2 L
N
117.65 222.95 117.65 204.95 2 L
N
135.65 222.95 135.65 204.95 2 L
N
153.65 222.95 153.65 204.95 2 L
N
171.65 222.95 171.65 204.95 2 L
N
189.65 222.95 189.65 204.95 2 L
N
207.65 222.95 207.65 204.95 2 L
N
225.65 222.95 225.65 204.95 2 L
N
243.65 222.95 243.65 204.95 2 L
N
261.65 222.95 261.65 204.95 2 L
N
279.65 222.95 279.65 204.95 2 L
N
297.65 222.95 297.65 204.95 2 L
N
315.65 222.95 315.65 204.95 2 L
N
333.65 222.95 333.65 204.95 2 L
N
441.65 222.95 441.65 204.95 2 L
N
351.65 222.95 351.65 204.95 2 L
N
423.65 222.95 423.65 204.95 2 L
N
405.65 222.95 405.65 204.95 2 L
N
387.65 222.95 387.65 204.95 2 L
N
369.65 222.95 369.65 204.95 2 L
N
459.65 222.95 459.65 204.95 2 L
N
477.65 222.95 477.65 204.95 2 L
N
495.65 222.95 495.65 204.95 2 L
N
513.65 222.95 513.65 204.95 2 L
N
63.65 186.95 531.65 204.95 R
7 X
V
0 X
N
81.65 204.95 81.65 186.95 2 L
N
99.65 204.95 99.65 186.95 2 L
N
117.65 204.95 117.65 186.95 2 L
N
135.65 204.95 135.65 186.95 2 L
N
153.65 204.95 153.65 186.95 2 L
N
171.65 204.95 171.65 186.95 2 L
N
189.65 204.95 189.65 186.95 2 L
N
207.65 204.95 207.65 186.95 2 L
N
225.65 204.95 225.65 186.95 2 L
N
243.65 204.95 243.65 186.95 2 L
N
261.65 204.95 261.65 186.95 2 L
N
279.65 204.95 279.65 186.95 2 L
N
297.65 204.95 297.65 186.95 2 L
N
315.65 204.95 315.65 186.95 2 L
N
333.65 204.95 333.65 186.95 2 L
N
441.65 204.95 441.65 186.95 2 L
N
351.65 204.95 351.65 186.95 2 L
N
423.65 204.95 423.65 186.95 2 L
N
405.65 204.95 405.65 186.95 2 L
N
387.65 204.95 387.65 186.95 2 L
N
369.65 204.95 369.65 186.95 2 L
N
459.65 204.95 459.65 186.95 2 L
N
477.65 204.95 477.65 186.95 2 L
N
495.65 204.95 495.65 186.95 2 L
N
513.65 204.95 513.65 186.95 2 L
N
63.65 168.95 531.65 186.95 R
7 X
V
0 X
N
81.65 186.95 81.65 168.95 2 L
N
99.65 186.95 99.65 168.95 2 L
N
117.65 186.95 117.65 168.95 2 L
N
135.65 186.95 135.65 168.95 2 L
N
153.65 186.95 153.65 168.95 2 L
N
171.65 186.95 171.65 168.95 2 L
N
189.65 186.95 189.65 168.95 2 L
N
207.65 186.95 207.65 168.95 2 L
N
225.65 186.95 225.65 168.95 2 L
N
243.65 186.95 243.65 168.95 2 L
N
261.65 186.95 261.65 168.95 2 L
N
279.65 186.95 279.65 168.95 2 L
N
297.65 186.95 297.65 168.95 2 L
N
315.65 186.95 315.65 168.95 2 L
N
333.65 186.95 333.65 168.95 2 L
N
441.65 186.95 441.65 168.95 2 L
N
351.65 186.95 351.65 168.95 2 L
N
423.65 186.95 423.65 168.95 2 L
N
405.65 186.95 405.65 168.95 2 L
N
387.65 186.95 387.65 168.95 2 L
N
369.65 186.95 369.65 168.95 2 L
N
459.65 186.95 459.65 168.95 2 L
N
477.65 186.95 477.65 168.95 2 L
N
495.65 186.95 495.65 168.95 2 L
N
513.65 186.95 513.65 168.95 2 L
N
63.65 150.95 531.65 168.95 R
7 X
V
0 X
N
81.65 168.95 81.65 150.95 2 L
N
99.65 168.95 99.65 150.95 2 L
N
117.65 168.95 117.65 150.95 2 L
N
135.65 168.95 135.65 150.95 2 L
N
153.65 168.95 153.65 150.95 2 L
N
171.65 168.95 171.65 150.95 2 L
N
189.65 168.95 189.65 150.95 2 L
N
207.65 168.95 207.65 150.95 2 L
N
225.65 168.95 225.65 150.95 2 L
N
243.65 168.95 243.65 150.95 2 L
N
261.65 168.95 261.65 150.95 2 L
N
279.65 168.95 279.65 150.95 2 L
N
297.65 168.95 297.65 150.95 2 L
N
315.65 168.95 315.65 150.95 2 L
N
333.65 168.95 333.65 150.95 2 L
N
441.65 168.95 441.65 150.95 2 L
N
351.65 168.95 351.65 150.95 2 L
N
423.65 168.95 423.65 150.95 2 L
N
405.65 168.95 405.65 150.95 2 L
N
387.65 168.95 387.65 150.95 2 L
N
369.65 168.95 369.65 150.95 2 L
N
459.65 168.95 459.65 150.95 2 L
N
477.65 168.95 477.65 150.95 2 L
N
495.65 168.95 495.65 150.95 2 L
N
513.65 168.95 513.65 150.95 2 L
N
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(HKUST) 36.65 53.62 T
(COMP102   Summer96) 245.55 53.62 T
(9 of 9) 532.98 53.62 T
3 12 Q
(10.  \05018 points\051) 36.65 772.95 T
0 F
( P) 111.98 772.95 T
(alindromes are w) 121.48 772.95 T
(ords or phrases that spell the same forw) 204 772.95 T
(ard and backw) 394.18 772.95 T
(ard.  F) 464.03 772.95 T
(or e) 494.84 772.95 T
(xample,) 512.99 772.95 T
(the w) 63.65 758.95 T
(ord \322madam\323 is a palindrome and the phrase \322dennis and edna sinned\323 is a palindrome \050when) 89.86 758.95 T
(spaces are ignored\051 b) 63.65 744.95 T
(ut the w) 165.04 744.95 T
(ord \322yo) 203.58 744.95 T
(yo\323 is not. Write a program that reads one line of te) 239.78 744.95 T
(xt  from a \336le) 486.89 744.95 T
(\322palindm.dat\323 and determines if the line of te) 63.65 730.95 T
(xt is a palindrome. Y) 280.76 730.95 T
(ou may assume that  all characters) 380.44 730.95 T
(are lo) 63.65 716.95 T
(wer case letters and there is no punctuation. Y) 90.34 716.95 T
(ou can also assume that the line is no more than 80) 310.63 716.95 T
(          characters long. Note that) 36.65 702.95 T
(you should remo) 192.95 702.95 T
(v) 273.43 702.95 T
(e all spaces from the te) 279.25 702.95 T
(xt before considering whether the) 389.38 702.95 T
(input is a palindrome.) 63.65 688.95 T
(Note: Y) 63.65 660.95 T
(ou are required to decompose your program into at least tw) 100.66 660.95 T
(o modules) 384.48 660.95 T
(a\051 an int function palindm that tak) 99.65 646.95 T
(es tw) 262.85 646.95 T
(o ar) 287.72 646.95 T
(gument, a character string consists of only) 305.83 646.95 T
(     lo) 99.65 632.95 T
(wer case letters \050no space\051 and length of the string, and returns 1 if the string is) 123.68 632.95 T
(     a palindromes and returns 0 if not.) 99.65 618.95 T
( int palindm \050 char phase[ ] , int length \051) 108.65 590.95 T
(b\051 a v) 99.65 562.95 T
(oid function remo) 126.73 562.95 T
(v) 212.54 562.95 T
(eb that tak) 218.36 562.95 T
(es a character string as ar) 268.24 562.95 T
(gument and remo) 388.97 562.95 T
(v) 472.78 562.95 T
(es the) 478.6 562.95 T
( blanks from the character string.) 108.65 548.95 T
(v) 108.65 520.95 T
(oid remo) 114.41 520.95 T
(v) 157.22 520.95 T
(eb \050char phase[ ] \051;) 163.04 520.95 T
3 F
(Sample text in \322palindm.dat\323:) 63.65 492.95 T
0 F
(sore w) 99.65 478.95 T
(as i ere i sa) 131.18 478.95 T
(w eros) 184.32 478.95 T
3 F
(<eof>) 215.98 478.95 T
(Sample output:) 63.65 450.95 T
0 F
(\322sore w) 99.65 436.95 T
(as i ere i sa) 136.51 436.95 T
(w eros\323 is a palindrome.) 189.65 436.95 T
(.) 63.65 422.95 T
FMENDPAGE
%%EndPage: "9" 9
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 9
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ Times-Bold
%%+ Palatino-Bold
%%+ Palatino-Roman
%%EOF
