%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 15 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Italic FMFONTDEFINE
3 0 /Palatino-Roman FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
7 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(1 of 17) 527.48 62.62 T
1 14 Q
(THE HONG KONG UNIVERSITY OF SCIENCE & TECHNOLOGY) 80.1 771.62 T
(COMP 102: Computer Fundamentals and Programming) 120.71 749.62 T
2 F
(Fall Semester) 242.74 723.62 T
(, 1997) 317.56 723.62 T
3 F
(FINAL EXAMINA) 222.02 697.62 T
(TION) 337.34 697.62 T
3 12 Q
(December 10, 19967) 245.23 676.95 T
36.65 87.95 558.65 780.95 C
72.65 556.08 522.65 672.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT N) 120.17 652.95 T
(AME:) 186.07 652.95 T
(__________________________________) 242.57 652.95 T
(STUDENT NUMBER:) 120.17 632.95 T
(__________________________________) 242.57 632.95 T
(DEP) 120.17 612.95 T
(AR) 141.73 612.95 T
(TMENT) 157.68 612.95 T
(:) 198.41 612.95 T
(__________________________________) 242.57 612.95 T
(SECTION NUMBER:) 120.17 592.95 T
(__________________________________) 242.57 592.95 T
(LAB SECTION:) 120.17 572.95 T
(__________________________________) 242.57 572.95 T
114.41 559.91 472.25 669.95 R
0.5 H
2 Z
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
36.65 87.95 558.65 780.95 C
56.37 414.56 538.93 556.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
70.77 403.15 522.92 544.45 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(Instructions to Students) 70.77 536.45 T
3 10 Q
(1.) 70.77 518.78 T
(Ther) 88.77 518.78 T
(e ar) 109.28 518.78 T
(e 15 pr) 125.34 518.78 T
(oblems and 17 pages. Check that you have all 17 pages.) 154.91 518.78 T
(2.) 70.77 504.78 T
(W) 88.77 504.78 T
(rite your name, student no., department, section no., and lab no. on this page.) 98.03 504.78 T
(3.) 70.77 490.78 T
(W) 88.77 490.78 T
(rite your student number on each of the following pages.) 98.03 490.78 T
(4.) 70.77 476.78 T
0.54 (Answer all questions in the space pr) 88.77 476.78 P
0.54 (ovided. Rough work should be done only on the back pages) 251.98 476.78 P
(and afterwar) 88.77 464.78 T
(ds drawn a diagonal line thr) 145.64 464.78 T
(ough it to show that it is not part of your answer) 270.76 464.78 T
(.) 484.49 464.78 T
(5.) 70.77 450.78 T
(Leave all pages stapled together) 88.77 450.78 T
(.) 230 450.78 T
(6.) 70.77 436.78 T
(The examination period will last for) 88.77 436.78 T
1 F
(180 minutes) 249.92 436.78 T
3 F
(.) 304.63 436.78 T
(7.) 70.77 422.78 T
(Stop writing immediately when the time is up.) 88.77 422.78 T
65.37 417.12 527.24 550.39 R
0.5 H
2 Z
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
36.65 87.95 558.65 780.95 C
72.65 92.65 522.65 414.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(For Grading Purposes Only) 153.65 398.64 T
0 11 Q
(Problem 1) 180.65 380.31 T
(_______________ / 8) 234.65 380.31 T
(Problem 2) 180.65 364.31 T
(_______________ / 4) 234.65 364.31 T
(Problem 3) 180.65 348.31 T
(_______________ / 4) 234.65 348.31 T
(Problem 4) 180.65 332.31 T
(_______________ / 8) 234.65 332.31 T
(Problem 5) 180.65 316.31 T
(_______________ / 8) 234.65 316.31 T
(Problem 6) 180.65 300.31 T
(_______________ /15) 234.65 300.31 T
(Problem 7) 180.65 284.31 T
(_______________ / 6) 234.65 284.31 T
(Problem 8) 180.65 268.31 T
(_______________ / 6) 234.65 268.31 T
(Problem 9) 180.65 252.31 T
(_______________ / 5) 234.65 252.31 T
(Problem 10) 180.65 236.31 T
(_______________ / 8) 234.65 236.31 T
(Problem 11) 180.65 220.31 T
(_______________ / 6) 234.65 220.31 T
(Problem 12) 180.65 204.31 T
(_______________ / 6) 234.65 204.31 T
(Problem 13) 180.65 188.31 T
(_______________ / 6) 234.65 188.31 T
(Problem 14) 180.65 172.31 T
(_______________ / 4) 234.65 172.31 T
(Problem 15) 180.65 156.31 T
(_______________ / 6) 234.65 156.31 T
4 F
(T) 153.65 126.31 T
(O) 160.79 126.31 T
(T) 168.9 126.31 T
(AL:) 175.25 126.31 T
(_______________ / 100) 234.65 126.31 T
141.05 99.21 447.05 410.24 R
0.5 H
2 Z
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(2 of 17) 527.48 62.62 T
4 12 Q
(1.) 36.65 772.95 T
(\0508 points\051   Write an int function that tak) 63.65 772.95 T
(es tw) 272.53 772.95 T
(o integer arrays of the same size and r) 298.07 772.95 T
(etur) 492.48 772.95 T
(ns their) 513.62 772.95 T
(dot pr) 63.65 756.95 T
(oduct. T) 95.1 756.95 T
(o compute the dot pr) 136.67 756.95 T
(oduct, multiply the  arrays position by position and sum the) 243.11 756.95 T
(pr) 63.65 740.95 T
(oducts. F) 75.43 740.95 T
(or example, with a[3] =  {2,3,4} and b[3]={1,2,3}, the dot pr) 121.8 740.95 T
(oduct is 2*1 + 3*2 + 4*3 =) 422.5 740.95 T
(20.) 63.65 724.95 T
(The function pr) 63.65 702.95 T
(ototype is:) 144.11 702.95 T
5 F
(    int dot_product\050const int a[], const int b[], int size\051;) 63.65 662.95 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(3 of 17) 527.48 62.62 T
4 12 Q
(2.) 36.65 772.95 T
(\0504 points\051 What is the exact output of the f) 63.65 772.95 T
(ollo) 279 772.95 T
(wing pr) 297.55 772.95 T
(ogram?) 337.01 772.95 T
5 F
(#include <iostream.h>) 90.65 722.95 T
(    int main\050\051) 63.65 708.95 T
({) 90.65 694.95 T
(        int i=3, j=5, k=7;) 63.65 680.95 T
(        for\050int n=1; n<\050i*j\051%10; n++\051) 63.65 666.95 T
({) 126.65 652.95 T
(            k = \050n*k\051%10;) 63.65 638.95 T
(            cout << k;) 63.65 624.95 T
(}) 121.25 610.95 T
(cout << endl;) 108.65 596.95 T
(return 0;) 108.65 582.95 T
(    }) 63.65 568.95 T
36.65 87.95 558.65 780.95 C
45.65 379.64 549.65 522.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.45 498.47 74.45 516.47 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
74.45 498.47 92.45 516.47 R
7 X
V
0 X
N
92.45 498.47 110.45 516.47 R
7 X
V
0 X
N
110.45 498.47 128.45 516.47 R
7 X
V
0 X
N
128.45 498.47 146.45 516.47 R
7 X
V
0 X
N
146.45 498.47 164.45 516.47 R
7 X
V
0 X
N
164.45 498.47 182.45 516.47 R
7 X
V
0 X
N
182.45 498.47 200.45 516.47 R
7 X
V
0 X
N
200.45 498.47 218.45 516.47 R
7 X
V
0 X
N
218.45 498.47 236.45 516.47 R
7 X
V
0 X
N
236.45 498.47 254.45 516.47 R
7 X
V
0 X
N
254.45 498.47 272.45 516.47 R
7 X
V
0 X
N
272.45 498.47 290.45 516.47 R
7 X
V
0 X
N
290.45 498.47 308.45 516.47 R
7 X
V
0 X
N
308.45 498.47 326.45 516.47 R
7 X
V
0 X
N
326.45 498.47 344.45 516.47 R
7 X
V
0 X
N
344.45 498.47 362.45 516.47 R
7 X
V
0 X
N
362.45 498.47 380.45 516.47 R
7 X
V
0 X
N
380.45 498.47 398.45 516.47 R
7 X
V
0 X
N
398.45 498.47 416.45 516.47 R
7 X
V
0 X
N
416.45 498.47 434.45 516.47 R
7 X
V
0 X
N
434.45 498.47 452.45 516.47 R
7 X
V
0 X
N
452.45 498.47 470.45 516.47 R
7 X
V
0 X
N
470.45 498.47 488.45 516.47 R
7 X
V
0 X
N
488.45 498.47 506.45 516.47 R
7 X
V
0 X
N
56.45 480.47 74.45 498.47 R
7 X
V
0 X
N
74.45 480.47 92.45 498.47 R
7 X
V
0 X
N
92.45 480.47 110.45 498.47 R
7 X
V
0 X
N
110.45 480.47 128.45 498.47 R
7 X
V
0 X
N
128.45 480.47 146.45 498.47 R
7 X
V
0 X
N
146.45 480.47 164.45 498.47 R
7 X
V
0 X
N
164.45 480.47 182.45 498.47 R
7 X
V
0 X
N
182.45 480.47 200.45 498.47 R
7 X
V
0 X
N
200.45 480.47 218.45 498.47 R
7 X
V
0 X
N
218.45 480.47 236.45 498.47 R
7 X
V
0 X
N
236.45 480.47 254.45 498.47 R
7 X
V
0 X
N
254.45 480.47 272.45 498.47 R
7 X
V
0 X
N
272.45 480.47 290.45 498.47 R
7 X
V
0 X
N
290.45 480.47 308.45 498.47 R
7 X
V
0 X
N
308.45 480.47 326.45 498.47 R
7 X
V
0 X
N
326.45 480.47 344.45 498.47 R
7 X
V
0 X
N
344.45 480.47 362.45 498.47 R
7 X
V
0 X
N
362.45 480.47 380.45 498.47 R
7 X
V
0 X
N
380.45 480.47 398.45 498.47 R
7 X
V
0 X
N
398.45 480.47 416.45 498.47 R
7 X
V
0 X
N
416.45 480.47 434.45 498.47 R
7 X
V
0 X
N
434.45 480.47 452.45 498.47 R
7 X
V
0 X
N
452.45 480.47 470.45 498.47 R
7 X
V
0 X
N
470.45 480.47 488.45 498.47 R
7 X
V
0 X
N
488.45 480.47 506.45 498.47 R
7 X
V
0 X
N
56.45 462.47 74.45 480.47 R
7 X
V
0 X
N
74.45 462.47 92.45 480.47 R
7 X
V
0 X
N
92.45 462.47 110.45 480.47 R
7 X
V
0 X
N
110.45 462.47 128.45 480.47 R
7 X
V
0 X
N
128.45 462.47 146.45 480.47 R
7 X
V
0 X
N
146.45 462.47 164.45 480.47 R
7 X
V
0 X
N
164.45 462.47 182.45 480.47 R
7 X
V
0 X
N
182.45 462.47 200.45 480.47 R
7 X
V
0 X
N
200.45 462.47 218.45 480.47 R
7 X
V
0 X
N
218.45 462.47 236.45 480.47 R
7 X
V
0 X
N
236.45 462.47 254.45 480.47 R
7 X
V
0 X
N
254.45 462.47 272.45 480.47 R
7 X
V
0 X
N
272.45 462.47 290.45 480.47 R
7 X
V
0 X
N
290.45 462.47 308.45 480.47 R
7 X
V
0 X
N
308.45 462.47 326.45 480.47 R
7 X
V
0 X
N
326.45 462.47 344.45 480.47 R
7 X
V
0 X
N
344.45 462.47 362.45 480.47 R
7 X
V
0 X
N
362.45 462.47 380.45 480.47 R
7 X
V
0 X
N
380.45 462.47 398.45 480.47 R
7 X
V
0 X
N
398.45 462.47 416.45 480.47 R
7 X
V
0 X
N
416.45 462.47 434.45 480.47 R
7 X
V
0 X
N
434.45 462.47 452.45 480.47 R
7 X
V
0 X
N
452.45 462.47 470.45 480.47 R
7 X
V
0 X
N
470.45 462.47 488.45 480.47 R
7 X
V
0 X
N
488.45 462.47 506.45 480.47 R
7 X
V
0 X
N
56.45 444.47 74.45 462.47 R
7 X
V
0 X
N
74.45 444.47 92.45 462.47 R
7 X
V
0 X
N
92.45 444.47 110.45 462.47 R
7 X
V
0 X
N
110.45 444.47 128.45 462.47 R
7 X
V
0 X
N
128.45 444.47 146.45 462.47 R
7 X
V
0 X
N
146.45 444.47 164.45 462.47 R
7 X
V
0 X
N
164.45 444.47 182.45 462.47 R
7 X
V
0 X
N
182.45 444.47 200.45 462.47 R
7 X
V
0 X
N
200.45 444.47 218.45 462.47 R
7 X
V
0 X
N
218.45 444.47 236.45 462.47 R
7 X
V
0 X
N
236.45 444.47 254.45 462.47 R
7 X
V
0 X
N
254.45 444.47 272.45 462.47 R
7 X
V
0 X
N
272.45 444.47 290.45 462.47 R
7 X
V
0 X
N
290.45 444.47 308.45 462.47 R
7 X
V
0 X
N
308.45 444.47 326.45 462.47 R
7 X
V
0 X
N
326.45 444.47 344.45 462.47 R
7 X
V
0 X
N
344.45 444.47 362.45 462.47 R
7 X
V
0 X
N
362.45 444.47 380.45 462.47 R
7 X
V
0 X
N
380.45 444.47 398.45 462.47 R
7 X
V
0 X
N
398.45 444.47 416.45 462.47 R
7 X
V
0 X
N
416.45 444.47 434.45 462.47 R
7 X
V
0 X
N
434.45 444.47 452.45 462.47 R
7 X
V
0 X
N
452.45 444.47 470.45 462.47 R
7 X
V
0 X
N
470.45 444.47 488.45 462.47 R
7 X
V
0 X
N
488.45 444.47 506.45 462.47 R
7 X
V
0 X
N
56.45 426.47 74.45 444.47 R
7 X
V
0 X
N
74.45 426.47 92.45 444.47 R
7 X
V
0 X
N
92.45 426.47 110.45 444.47 R
7 X
V
0 X
N
110.45 426.47 128.45 444.47 R
7 X
V
0 X
N
128.45 426.47 146.45 444.47 R
7 X
V
0 X
N
146.45 426.47 164.45 444.47 R
7 X
V
0 X
N
164.45 426.47 182.45 444.47 R
7 X
V
0 X
N
182.45 426.47 200.45 444.47 R
7 X
V
0 X
N
200.45 426.47 218.45 444.47 R
7 X
V
0 X
N
218.45 426.47 236.45 444.47 R
7 X
V
0 X
N
236.45 426.47 254.45 444.47 R
7 X
V
0 X
N
254.45 426.47 272.45 444.47 R
7 X
V
0 X
N
272.45 426.47 290.45 444.47 R
7 X
V
0 X
N
290.45 426.47 308.45 444.47 R
7 X
V
0 X
N
308.45 426.47 326.45 444.47 R
7 X
V
0 X
N
326.45 426.47 344.45 444.47 R
7 X
V
0 X
N
344.45 426.47 362.45 444.47 R
7 X
V
0 X
N
362.45 426.47 380.45 444.47 R
7 X
V
0 X
N
380.45 426.47 398.45 444.47 R
7 X
V
0 X
N
398.45 426.47 416.45 444.47 R
7 X
V
0 X
N
416.45 426.47 434.45 444.47 R
7 X
V
0 X
N
434.45 426.47 452.45 444.47 R
7 X
V
0 X
N
452.45 426.47 470.45 444.47 R
7 X
V
0 X
N
470.45 426.47 488.45 444.47 R
7 X
V
0 X
N
488.45 426.47 506.45 444.47 R
7 X
V
0 X
N
56.45 408.47 74.45 426.47 R
7 X
V
0 X
N
74.45 408.47 92.45 426.47 R
7 X
V
0 X
N
92.45 408.47 110.45 426.47 R
7 X
V
0 X
N
110.45 408.47 128.45 426.47 R
7 X
V
0 X
N
128.45 408.47 146.45 426.47 R
7 X
V
0 X
N
146.45 408.47 164.45 426.47 R
7 X
V
0 X
N
164.45 408.47 182.45 426.47 R
7 X
V
0 X
N
182.45 408.47 200.45 426.47 R
7 X
V
0 X
N
200.45 408.47 218.45 426.47 R
7 X
V
0 X
N
218.45 408.47 236.45 426.47 R
7 X
V
0 X
N
236.45 408.47 254.45 426.47 R
7 X
V
0 X
N
254.45 408.47 272.45 426.47 R
7 X
V
0 X
N
272.45 408.47 290.45 426.47 R
7 X
V
0 X
N
290.45 408.47 308.45 426.47 R
7 X
V
0 X
N
308.45 408.47 326.45 426.47 R
7 X
V
0 X
N
326.45 408.47 344.45 426.47 R
7 X
V
0 X
N
344.45 408.47 362.45 426.47 R
7 X
V
0 X
N
362.45 408.47 380.45 426.47 R
7 X
V
0 X
N
380.45 408.47 398.45 426.47 R
7 X
V
0 X
N
398.45 408.47 416.45 426.47 R
7 X
V
0 X
N
416.45 408.47 434.45 426.47 R
7 X
V
0 X
N
434.45 408.47 452.45 426.47 R
7 X
V
0 X
N
452.45 408.47 470.45 426.47 R
7 X
V
0 X
N
470.45 408.47 488.45 426.47 R
7 X
V
0 X
N
488.45 408.47 506.45 426.47 R
7 X
V
0 X
N
56.45 390.47 74.45 408.47 R
7 X
V
0 X
N
74.45 390.47 92.45 408.47 R
7 X
V
0 X
N
92.45 390.47 110.45 408.47 R
7 X
V
0 X
N
110.45 390.47 128.45 408.47 R
7 X
V
0 X
N
128.45 390.47 146.45 408.47 R
7 X
V
0 X
N
146.45 390.47 164.45 408.47 R
7 X
V
0 X
N
164.45 390.47 182.45 408.47 R
7 X
V
0 X
N
182.45 390.47 200.45 408.47 R
7 X
V
0 X
N
200.45 390.47 218.45 408.47 R
7 X
V
0 X
N
218.45 390.47 236.45 408.47 R
7 X
V
0 X
N
236.45 390.47 254.45 408.47 R
7 X
V
0 X
N
254.45 390.47 272.45 408.47 R
7 X
V
0 X
N
272.45 390.47 290.45 408.47 R
7 X
V
0 X
N
290.45 390.47 308.45 408.47 R
7 X
V
0 X
N
308.45 390.47 326.45 408.47 R
7 X
V
0 X
N
326.45 390.47 344.45 408.47 R
7 X
V
0 X
N
344.45 390.47 362.45 408.47 R
7 X
V
0 X
N
362.45 390.47 380.45 408.47 R
7 X
V
0 X
N
380.45 390.47 398.45 408.47 R
7 X
V
0 X
N
398.45 390.47 416.45 408.47 R
7 X
V
0 X
N
416.45 390.47 434.45 408.47 R
7 X
V
0 X
N
434.45 390.47 452.45 408.47 R
7 X
V
0 X
N
452.45 390.47 470.45 408.47 R
7 X
V
0 X
N
470.45 390.47 488.45 408.47 R
7 X
V
0 X
N
488.45 390.47 506.45 408.47 R
7 X
V
0 X
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(4 of 17) 527.48 62.62 T
4 12 Q
(3.) 36.65 772.95 T
(\0504 points\051 What is the content of the array A[] upon completion of the f) 63.65 772.95 T
(or loop in the f) 425.32 772.95 T
(ollo) 500.35 772.95 T
(wing) 518.9 772.95 T
(code segment?) 63.65 756.95 T
5 F
(int A[10] = {7, 2, 10, 5, 3, 6, 4, 8, 9, 1};) 108.65 714.95 T
(for \050int count = 0; count < 9; count++\051) 108.65 686.95 T
(        if \050A[count] > A[count+1]\051) 63.65 672.95 T
(        {) 63.65 658.95 T
(int temp = A[count];) 144.65 644.95 T
(A[count] = A[count+1];) 144.65 630.95 T
(A[count+1] = temp;) 144.65 616.95 T
(        }) 63.65 602.95 T
36.65 87.95 558.65 780.95 C
45.65 413.64 549.65 556.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
139.97 500.07 165.17 525.99 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
165.16 500.07 190.36 525.99 R
7 X
V
0 X
N
190.36 500.07 215.56 525.99 R
7 X
V
0 X
N
215.56 500.07 240.76 525.99 R
7 X
V
0 X
N
240.76 500.07 265.96 525.99 R
7 X
V
0 X
N
265.96 500.07 291.16 525.99 R
7 X
V
0 X
N
291.16 500.07 316.36 525.99 R
7 X
V
0 X
N
316.36 500.07 341.56 525.99 R
7 X
V
0 X
N
341.56 500.07 366.76 525.99 R
7 X
V
0 X
N
366.76 500.07 391.96 525.99 R
7 X
V
0 X
N
5 12 Q
(0) 147.89 533.19 T
(1) 177.4 533.19 T
(2) 202.6 531.75 T
(3) 225.64 531.75 T
(4) 251.56 532.12 T
(5) 275.32 531.75 T
(6) 298.36 530.68 T
(7) 322.12 530.68 T
(8) 346.6 530.68 T
(9) 372.52 530.68 T
6 F
(A) 114.77 508.71 T
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(5 of 17) 527.48 62.62 T
4 12 Q
(4.) 36.65 772.95 T
(\0508 points\051 Gi) 63.65 772.95 T
(v) 127.54 772.95 T
(en a 3x3 array A declar) 133.42 772.95 T
(ed as) 253.51 772.95 T
5 F
(int A[3][3];) 63.65 736.95 T
4 F
-0.11 (write a bool function that tests whether) 63.65 705.95 P
-0.11 (, f) 262.55 705.95 P
-0.11 (or all) 272.13 705.95 P
7 F
-0.11 ( i,) 301.92 705.95 P
4 F
-0.11 ( the  sum of the) 311.15 705.95 P
7 F
-0.11 (i) 391.83 705.95 P
4 F
-0.11 (th r) 395.17 705.95 P
-0.11 (o) 413.85 705.95 P
-0.11 (w equals the sum of the) 419.73 705.95 P
7 F
-0.11 ( i) 538.86 705.95 P
4 F
-0.11 (th) 545.09 705.95 P
(column. F) 63.65 691.95 T
(or example, the array b[3][3] = {{2, 4, 5}, {4, 3, 9}, {5, 9, 7}} has this pr) 114.68 691.95 T
(operty) 472.44 691.95 T
(, b) 505.1 691.95 T
(ut the) 517.54 691.95 T
(array c[3][3] = {{2, 4, 6}, {4, 3, 9}, {5, 9, 7}} does not.) 63.65 677.95 T
(The function pr) 63.65 640.95 T
(ototype is:) 144.11 640.95 T
5 F
(    bool is_equal_sums\050const int A[3][3]\051;) 63.65 600.95 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(6 of 17) 527.48 62.62 T
4 12 Q
(5.) 36.65 772.95 T
(\0508 points\051  Write a function that is gi) 63.65 772.95 T
(v) 249.53 772.95 T
(en an integer array and its size, and r) 255.41 772.95 T
(e) 446.18 772.95 T
(v) 451.33 772.95 T
(erses the array v) 457.21 772.95 T
(al-) 542.06 772.95 T
-0.25 (ues. F) 63.65 756.95 P
-0.25 (or example, a[4] = {0,1,2,3} should become   a[4] = {3,2,1,0\051. Assume that the function pr) 93.1 756.95 P
-0.25 (oto-) 538.66 756.95 P
(type is:) 63.65 740.95 T
5 F
(    void reverse_array\050int a[], int size_a\051;) 63.65 704.95 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(7 of 17) 527.48 62.62 T
4 12 Q
(6.) 36.65 772.95 T
(\05015 points\051  Her) 63.65 772.95 T
(e is an example of a marks \336le.) 143.76 772.95 T
5 F
(       92384758 9 10  10 83) 63.65 736.95 T
(       98389058  10 9 10  72) 63.65 722.95 T
(       92584757   8       10  8 83) 63.65 708.95 T
(       92392658 8 10 10 82) 63.65 694.95 T
(       92378258   9 9 10         83) 63.65 680.95 T
4 F
-0.19 (The  marks \336le has \336v) 63.65 635.95 P
-0.19 (e columns, the \336rst column contains student id numbers and the r) 175.59 635.95 P
-0.19 (emaining) 508.62 635.95 P
-0.29 (f) 63.65 621.95 P
-0.29 (our columns contain the marks f) 67.34 621.95 P
-0.29 (or f) 231.92 621.95 P
-0.29 (our exams of an unspeci\336ed course. Ther) 249.65 621.95 P
-0.29 (e ar) 457.35 621.95 P
-0.29 (e at most 30 stu-) 476.5 621.95 P
(dents in each marks \336le and the marks ar) 63.65 607.95 T
(e all integers.) 275.44 607.95 T
(Write a pr) 63.65 587.95 T
(ogram that queries the user f) 117.42 587.95 T
(or the name of the marks \336le, opens the marks \336le, r) 265.43 587.95 T
(eads) 532.19 587.95 T
(the marks \336le into one tw) 63.65 573.95 T
(o-dimensional array) 193.19 573.95 T
(, outputs the a) 296.2 573.95 T
(v) 368.57 573.95 T
(erage mark f) 374.45 573.95 T
(or each exam, and) 440.12 573.95 T
(closes the marks \336le.) 63.65 559.95 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(8 of 17) 527.48 62.62 T
6 12 Q
(\050Question 6 continues\051) 63.65 772.95 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(9 of 17) 527.48 62.62 T
4 12 Q
(7.) 36.65 772.95 T
(\0506 points\051) 63.65 772.95 T
(Y) 117.98 772.95 T
(ou ar) 125.32 772.95 T
(e gi) 152.1 772.95 T
(v) 169.64 772.95 T
(en the f) 175.52 772.95 T
(ollo) 213.22 772.95 T
(wing binary sear) 231.77 772.95 T
(ch function:) 317.56 772.95 T
5 F
(int binary_search\050const int data[],//input array) 54.65 736.95 T
(                  int size_data, //size of data[]) 36.65 722.95 T
(                  int query_value //search value) 36.65 708.95 T
(                  \051 //return index of query_value) 36.65 694.95 T
(                    //in data[] if found;) 36.65 680.95 T
(                    //otherwise, return -1) 36.65 666.95 T
({) 54.65 652.95 T
(int lower = 0, upper = size_data - 1;) 72.65 638.95 T
(int middle;) 72.65 624.95 T
(while \050lower < upper\051) 72.65 596.95 T
({) 72.65 582.95 T
(        middle = \050lower + upper\051/2;) 36.65 568.95 T
(        if \050query_value <= data[middle]\051) 36.65 554.95 T
(            upper = middle;) 36.65 540.95 T
(        else lower = middle + 1;) 36.65 526.95 T
(}) 72.65 512.95 T
(if \050query_value == data[lower]\051) 72.65 498.95 T
(         return lower;) 36.65 484.95 T
(else return -1;) 72.65 470.95 T
(}) 54.65 456.95 T
4 F
(If) 63.65 425.95 T
5 F
(int array d[10] = {2,3,5,7,11,13,17,19,23,29},) 72.65 405.95 T
4 F
(then what ar) 63.65 374.95 T
(e the v) 128.76 374.95 T
(alues r) 161.96 374.95 T
(etur) 196.08 374.95 T
(ned by the f) 217.22 374.95 T
(ollo) 277.26 374.95 T
(wing calls and ho) 295.81 374.95 T
(w many times is the body of the) 384.05 374.95 T
(while loop executed in each case:) 63.65 360.95 T
(a. binary_sear) 63.65 323.95 T
(ch\050d,10,23\051;) 136.76 323.95 T
(b) 63.65 223.95 T
(. binary_sear) 69.84 223.95 T
(ch\050d,10,1\051;) 136.96 223.95 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(10 of 17) 521.98 62.62 T
4 12 Q
(8.) 36.65 772.95 T
(\0506 points\051  What is the output of the f) 63.65 772.95 T
(ollo) 252.35 772.95 T
(wing r) 270.9 772.95 T
(ecursi) 303.68 772.95 T
(v) 334.22 772.95 T
(e function when called  with an ar) 340.1 772.95 T
(gument) 512.99 772.95 T
(of 3?) 63.65 756.95 T
5 F
(    void recursive\050int i\051) 63.65 714.95 T
(    {) 63.65 700.95 T
(      if \050i < 6\051) 63.65 686.95 T
({) 108.65 672.95 T
(        recursive\050i+1\051;) 63.65 658.95 T
(        cout << i;) 63.65 644.95 T
(}) 106.85 630.95 T
(    }) 63.65 616.95 T
4 F
(a\051 456) 63.65 579.95 T
(b\051 345) 63.65 559.95 T
(c\051 543) 63.65 539.95 T
(d\051 654) 63.65 519.95 T
(e\051 None of the abo) 63.65 499.95 T
(v) 156.18 499.95 T
(e) 162.06 499.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(11 of 17) 521.98 62.62 T
4 12 Q
(9.) 36.65 772.95 T
( \0505 points\051 What is the output gi) 63.65 772.95 T
(v) 225.88 772.95 T
(en by the f) 231.76 772.95 T
(ollo) 285.12 772.95 T
(wing code?) 303.67 772.95 T
5 F
(struct Date {) 85.25 730.95 T
(   int y, m, d;) 78.05 716.95 T
( };) 78.05 702.95 T
( struct Time {) 85.25 688.95 T
(  int hour, min;) 85.25 674.95 T
(  };) 72.65 660.95 T
( struct Appointment {) 85.25 646.95 T
(  Date date;) 85.25 632.95 T
(Time from, to;) 99.65 618.95 T
(  };) 72.65 604.95 T
(   Appointment appnts[] = {) 63.65 576.95 T
({ {1997, 12, 10}, {12, 30}, {15, 30} },) 90.65 562.95 T
({ {1997, 12, 24}, {18, 00}, {23, 59} },) 90.65 548.95 T
({ {1998,  1,  1}, { 0, 0},  {1, 0} }) 90.65 534.95 T
(};) 90.65 520.95 T
(    cout << appnts[0].date.d << " ") 63.65 492.95 T
(         << appnts[0].from.hour << ":") 63.65 478.95 T
(         << appnts[0].from.min << endl;) 63.65 464.95 T
(    cout << appnts[1].date.d << "/") 63.65 436.95 T
(         << appnts[1].date.m << "/") 63.65 422.95 T
(         << appnts[1].date.y << endl;) 63.65 408.95 T
36.65 87.95 558.65 780.95 C
45.65 224.64 549.65 367.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.45 343.47 74.45 361.47 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
74.45 343.47 92.45 361.47 R
7 X
V
0 X
N
92.45 343.47 110.45 361.47 R
7 X
V
0 X
N
110.45 343.47 128.45 361.47 R
7 X
V
0 X
N
128.45 343.47 146.45 361.47 R
7 X
V
0 X
N
146.45 343.47 164.45 361.47 R
7 X
V
0 X
N
164.45 343.47 182.45 361.47 R
7 X
V
0 X
N
182.45 343.47 200.45 361.47 R
7 X
V
0 X
N
200.45 343.47 218.45 361.47 R
7 X
V
0 X
N
218.45 343.47 236.45 361.47 R
7 X
V
0 X
N
236.45 343.47 254.45 361.47 R
7 X
V
0 X
N
254.45 343.47 272.45 361.47 R
7 X
V
0 X
N
272.45 343.47 290.45 361.47 R
7 X
V
0 X
N
290.45 343.47 308.45 361.47 R
7 X
V
0 X
N
308.45 343.47 326.45 361.47 R
7 X
V
0 X
N
326.45 343.47 344.45 361.47 R
7 X
V
0 X
N
344.45 343.47 362.45 361.47 R
7 X
V
0 X
N
362.45 343.47 380.45 361.47 R
7 X
V
0 X
N
380.45 343.47 398.45 361.47 R
7 X
V
0 X
N
398.45 343.47 416.45 361.47 R
7 X
V
0 X
N
416.45 343.47 434.45 361.47 R
7 X
V
0 X
N
434.45 343.47 452.45 361.47 R
7 X
V
0 X
N
452.45 343.47 470.45 361.47 R
7 X
V
0 X
N
470.45 343.47 488.45 361.47 R
7 X
V
0 X
N
488.45 343.47 506.45 361.47 R
7 X
V
0 X
N
56.45 325.47 74.45 343.47 R
7 X
V
0 X
N
74.45 325.47 92.45 343.47 R
7 X
V
0 X
N
92.45 325.47 110.45 343.47 R
7 X
V
0 X
N
110.45 325.47 128.45 343.47 R
7 X
V
0 X
N
128.45 325.47 146.45 343.47 R
7 X
V
0 X
N
146.45 325.47 164.45 343.47 R
7 X
V
0 X
N
164.45 325.47 182.45 343.47 R
7 X
V
0 X
N
182.45 325.47 200.45 343.47 R
7 X
V
0 X
N
200.45 325.47 218.45 343.47 R
7 X
V
0 X
N
218.45 325.47 236.45 343.47 R
7 X
V
0 X
N
236.45 325.47 254.45 343.47 R
7 X
V
0 X
N
254.45 325.47 272.45 343.47 R
7 X
V
0 X
N
272.45 325.47 290.45 343.47 R
7 X
V
0 X
N
290.45 325.47 308.45 343.47 R
7 X
V
0 X
N
308.45 325.47 326.45 343.47 R
7 X
V
0 X
N
326.45 325.47 344.45 343.47 R
7 X
V
0 X
N
344.45 325.47 362.45 343.47 R
7 X
V
0 X
N
362.45 325.47 380.45 343.47 R
7 X
V
0 X
N
380.45 325.47 398.45 343.47 R
7 X
V
0 X
N
398.45 325.47 416.45 343.47 R
7 X
V
0 X
N
416.45 325.47 434.45 343.47 R
7 X
V
0 X
N
434.45 325.47 452.45 343.47 R
7 X
V
0 X
N
452.45 325.47 470.45 343.47 R
7 X
V
0 X
N
470.45 325.47 488.45 343.47 R
7 X
V
0 X
N
488.45 325.47 506.45 343.47 R
7 X
V
0 X
N
56.45 307.47 74.45 325.47 R
7 X
V
0 X
N
74.45 307.47 92.45 325.47 R
7 X
V
0 X
N
92.45 307.47 110.45 325.47 R
7 X
V
0 X
N
110.45 307.47 128.45 325.47 R
7 X
V
0 X
N
128.45 307.47 146.45 325.47 R
7 X
V
0 X
N
146.45 307.47 164.45 325.47 R
7 X
V
0 X
N
164.45 307.47 182.45 325.47 R
7 X
V
0 X
N
182.45 307.47 200.45 325.47 R
7 X
V
0 X
N
200.45 307.47 218.45 325.47 R
7 X
V
0 X
N
218.45 307.47 236.45 325.47 R
7 X
V
0 X
N
236.45 307.47 254.45 325.47 R
7 X
V
0 X
N
254.45 307.47 272.45 325.47 R
7 X
V
0 X
N
272.45 307.47 290.45 325.47 R
7 X
V
0 X
N
290.45 307.47 308.45 325.47 R
7 X
V
0 X
N
308.45 307.47 326.45 325.47 R
7 X
V
0 X
N
326.45 307.47 344.45 325.47 R
7 X
V
0 X
N
344.45 307.47 362.45 325.47 R
7 X
V
0 X
N
362.45 307.47 380.45 325.47 R
7 X
V
0 X
N
380.45 307.47 398.45 325.47 R
7 X
V
0 X
N
398.45 307.47 416.45 325.47 R
7 X
V
0 X
N
416.45 307.47 434.45 325.47 R
7 X
V
0 X
N
434.45 307.47 452.45 325.47 R
7 X
V
0 X
N
452.45 307.47 470.45 325.47 R
7 X
V
0 X
N
470.45 307.47 488.45 325.47 R
7 X
V
0 X
N
488.45 307.47 506.45 325.47 R
7 X
V
0 X
N
56.45 289.47 74.45 307.47 R
7 X
V
0 X
N
74.45 289.47 92.45 307.47 R
7 X
V
0 X
N
92.45 289.47 110.45 307.47 R
7 X
V
0 X
N
110.45 289.47 128.45 307.47 R
7 X
V
0 X
N
128.45 289.47 146.45 307.47 R
7 X
V
0 X
N
146.45 289.47 164.45 307.47 R
7 X
V
0 X
N
164.45 289.47 182.45 307.47 R
7 X
V
0 X
N
182.45 289.47 200.45 307.47 R
7 X
V
0 X
N
200.45 289.47 218.45 307.47 R
7 X
V
0 X
N
218.45 289.47 236.45 307.47 R
7 X
V
0 X
N
236.45 289.47 254.45 307.47 R
7 X
V
0 X
N
254.45 289.47 272.45 307.47 R
7 X
V
0 X
N
272.45 289.47 290.45 307.47 R
7 X
V
0 X
N
290.45 289.47 308.45 307.47 R
7 X
V
0 X
N
308.45 289.47 326.45 307.47 R
7 X
V
0 X
N
326.45 289.47 344.45 307.47 R
7 X
V
0 X
N
344.45 289.47 362.45 307.47 R
7 X
V
0 X
N
362.45 289.47 380.45 307.47 R
7 X
V
0 X
N
380.45 289.47 398.45 307.47 R
7 X
V
0 X
N
398.45 289.47 416.45 307.47 R
7 X
V
0 X
N
416.45 289.47 434.45 307.47 R
7 X
V
0 X
N
434.45 289.47 452.45 307.47 R
7 X
V
0 X
N
452.45 289.47 470.45 307.47 R
7 X
V
0 X
N
470.45 289.47 488.45 307.47 R
7 X
V
0 X
N
488.45 289.47 506.45 307.47 R
7 X
V
0 X
N
56.45 271.47 74.45 289.47 R
7 X
V
0 X
N
74.45 271.47 92.45 289.47 R
7 X
V
0 X
N
92.45 271.47 110.45 289.47 R
7 X
V
0 X
N
110.45 271.47 128.45 289.47 R
7 X
V
0 X
N
128.45 271.47 146.45 289.47 R
7 X
V
0 X
N
146.45 271.47 164.45 289.47 R
7 X
V
0 X
N
164.45 271.47 182.45 289.47 R
7 X
V
0 X
N
182.45 271.47 200.45 289.47 R
7 X
V
0 X
N
200.45 271.47 218.45 289.47 R
7 X
V
0 X
N
218.45 271.47 236.45 289.47 R
7 X
V
0 X
N
236.45 271.47 254.45 289.47 R
7 X
V
0 X
N
254.45 271.47 272.45 289.47 R
7 X
V
0 X
N
272.45 271.47 290.45 289.47 R
7 X
V
0 X
N
290.45 271.47 308.45 289.47 R
7 X
V
0 X
N
308.45 271.47 326.45 289.47 R
7 X
V
0 X
N
326.45 271.47 344.45 289.47 R
7 X
V
0 X
N
344.45 271.47 362.45 289.47 R
7 X
V
0 X
N
362.45 271.47 380.45 289.47 R
7 X
V
0 X
N
380.45 271.47 398.45 289.47 R
7 X
V
0 X
N
398.45 271.47 416.45 289.47 R
7 X
V
0 X
N
416.45 271.47 434.45 289.47 R
7 X
V
0 X
N
434.45 271.47 452.45 289.47 R
7 X
V
0 X
N
452.45 271.47 470.45 289.47 R
7 X
V
0 X
N
470.45 271.47 488.45 289.47 R
7 X
V
0 X
N
488.45 271.47 506.45 289.47 R
7 X
V
0 X
N
56.45 253.47 74.45 271.47 R
7 X
V
0 X
N
74.45 253.47 92.45 271.47 R
7 X
V
0 X
N
92.45 253.47 110.45 271.47 R
7 X
V
0 X
N
110.45 253.47 128.45 271.47 R
7 X
V
0 X
N
128.45 253.47 146.45 271.47 R
7 X
V
0 X
N
146.45 253.47 164.45 271.47 R
7 X
V
0 X
N
164.45 253.47 182.45 271.47 R
7 X
V
0 X
N
182.45 253.47 200.45 271.47 R
7 X
V
0 X
N
200.45 253.47 218.45 271.47 R
7 X
V
0 X
N
218.45 253.47 236.45 271.47 R
7 X
V
0 X
N
236.45 253.47 254.45 271.47 R
7 X
V
0 X
N
254.45 253.47 272.45 271.47 R
7 X
V
0 X
N
272.45 253.47 290.45 271.47 R
7 X
V
0 X
N
290.45 253.47 308.45 271.47 R
7 X
V
0 X
N
308.45 253.47 326.45 271.47 R
7 X
V
0 X
N
326.45 253.47 344.45 271.47 R
7 X
V
0 X
N
344.45 253.47 362.45 271.47 R
7 X
V
0 X
N
362.45 253.47 380.45 271.47 R
7 X
V
0 X
N
380.45 253.47 398.45 271.47 R
7 X
V
0 X
N
398.45 253.47 416.45 271.47 R
7 X
V
0 X
N
416.45 253.47 434.45 271.47 R
7 X
V
0 X
N
434.45 253.47 452.45 271.47 R
7 X
V
0 X
N
452.45 253.47 470.45 271.47 R
7 X
V
0 X
N
470.45 253.47 488.45 271.47 R
7 X
V
0 X
N
488.45 253.47 506.45 271.47 R
7 X
V
0 X
N
56.45 235.47 74.45 253.47 R
7 X
V
0 X
N
74.45 235.47 92.45 253.47 R
7 X
V
0 X
N
92.45 235.47 110.45 253.47 R
7 X
V
0 X
N
110.45 235.47 128.45 253.47 R
7 X
V
0 X
N
128.45 235.47 146.45 253.47 R
7 X
V
0 X
N
146.45 235.47 164.45 253.47 R
7 X
V
0 X
N
164.45 235.47 182.45 253.47 R
7 X
V
0 X
N
182.45 235.47 200.45 253.47 R
7 X
V
0 X
N
200.45 235.47 218.45 253.47 R
7 X
V
0 X
N
218.45 235.47 236.45 253.47 R
7 X
V
0 X
N
236.45 235.47 254.45 253.47 R
7 X
V
0 X
N
254.45 235.47 272.45 253.47 R
7 X
V
0 X
N
272.45 235.47 290.45 253.47 R
7 X
V
0 X
N
290.45 235.47 308.45 253.47 R
7 X
V
0 X
N
308.45 235.47 326.45 253.47 R
7 X
V
0 X
N
326.45 235.47 344.45 253.47 R
7 X
V
0 X
N
344.45 235.47 362.45 253.47 R
7 X
V
0 X
N
362.45 235.47 380.45 253.47 R
7 X
V
0 X
N
380.45 235.47 398.45 253.47 R
7 X
V
0 X
N
398.45 235.47 416.45 253.47 R
7 X
V
0 X
N
416.45 235.47 434.45 253.47 R
7 X
V
0 X
N
434.45 235.47 452.45 253.47 R
7 X
V
0 X
N
452.45 235.47 470.45 253.47 R
7 X
V
0 X
N
470.45 235.47 488.45 253.47 R
7 X
V
0 X
N
488.45 235.47 506.45 253.47 R
7 X
V
0 X
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(12 of 17) 521.98 62.62 T
4 12 Q
(10.) 36.65 772.95 T
-0.31 (\0508 points\051 Write an int function) 63.65 772.95 P
7 F
-0.31 (v) 224.43 772.95 P
-0.31 (o) 229.58 772.95 P
-0.31 (w) 235.28 772.95 P
-0.31 (el) 243.16 772.95 P
4 F
-0.31 ( that r) 251.83 772.95 P
-0.31 (etur) 282.97 772.95 P
-0.31 (ns the number of v) 304.12 772.95 P
-0.31 (o) 398.74 772.95 P
-0.31 (wels in a gi) 404.62 772.95 P
-0.31 (v) 459.9 772.95 P
-0.31 (en string) 465.78 772.95 P
-0.31 (. Assume) 510.28 772.95 P
(that a, e, i, o, u, and y ar) 63.65 756.95 T
(e v) 187.1 756.95 T
(o) 201.31 756.95 T
(wels.) 207.19 756.95 T
(The function pr) 63.65 734.95 T
(ototype is either:) 144.11 734.95 T
5 F
(    int vowel\050char a[]\051;) 63.65 714.95 T
4 F
(if y) 63.65 697.95 T
(ou use character arrays \050C strings\051,) 79.68 697.95 T
(or) 63.65 677.95 T
5 F
(    int vowel\050string a\051;) 63.65 657.95 T
4 F
(if y) 63.65 640.95 T
(ou pr) 79.68 640.95 T
(efer to use the string class.) 107.14 640.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(13 of 17) 521.98 62.62 T
4 12 Q
(11.) 36.65 772.95 T
(\0506 points\051 Y) 63.65 772.95 T
(ou ar) 122.32 772.95 T
(e gi) 149.1 772.95 T
(v) 166.64 772.95 T
(en the f) 172.52 772.95 T
(ollo) 210.22 772.95 T
(wing bool function:) 228.77 772.95 T
5 F
(bool what\050int a[], int first, int last\051) 72.65 730.95 T
({) 72.65 716.95 T
(   int size = last - first + 1;) 72.65 702.95 T
(  if \050size == 1\051) 78.05 688.95 T
(      return true;) 78.05 674.95 T
( else if \050size == 2\051) 85.25 660.95 T
(    return a[first] <= a[last];) 92.45 646.95 T
(else) 92.45 632.95 T
(   return what\050a, first, first + size/2\051 &&) 99.65 618.95 T
(       what\050a, first + size/2, last\051;) 121.25 604.95 T
(}) 72.65 590.95 T
4 F
(Y) 63.65 573.95 T
(ou ar) 70.98 573.95 T
(e also gi) 97.76 573.95 T
(v) 138.31 573.95 T
(en the f) 144.19 573.95 T
(ollo) 181.88 573.95 T
(wing declaration and initialization:) 200.44 573.95 T
5 F
(    int b[6] = {10, 11, 19, 35, 21, 17};) 63.65 553.95 T
4 F
(What v) 63.65 502.95 T
(alues ar) 101.2 502.95 T
(e r) 141.31 502.95 T
(etur) 154.75 502.95 T
(ned by the f) 175.9 502.95 T
(ollo) 235.93 502.95 T
(wing tw) 254.48 502.95 T
(o calls of what:) 294.7 502.95 T
(a.) 63.65 482.95 T
5 F
( what\050b,0,3\051;) 72.65 482.95 T
4 F
(b) 63.65 385.95 T
(.) 69.84 385.95 T
5 F
( what\050b,2,4\051;) 72.84 385.95 T
4 F
(c. What does the function what\050\051 achie) 63.65 268.95 T
(v) 259.79 268.95 T
(e? Describe its pur) 265.67 268.95 T
(pose in at most tw) 361.2 268.95 T
(o sentences.) 453.07 268.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(14 of 17) 521.98 62.62 T
4 12 Q
(12.) 36.65 772.95 T
(\0506 points\051 The f) 63.65 772.95 T
(ollo) 141.68 772.95 T
(wing pr) 160.24 772.95 T
(ogram is supposed to  r) 199.69 772.95 T
(ead a sequence of positi) 318.48 772.95 T
(v) 438.36 772.95 T
(e integers terminated) 444.24 772.95 T
(by -1 and print out the rangelength of the sequence, wher) 63.65 756.95 T
(e the rangelength is de\336ned as the dif-) 356.42 756.95 T
(fer) 63.65 740.95 T
(ence between the maximum and minimum v) 78.08 740.95 T
(alues. F) 303.95 740.95 T
(or example, the input sequence 34 15 4 26) 342.98 740.95 T
(17 9 48 21 5 -1 should gi) 63.65 724.95 T
(v) 185.88 724.95 T
(e the output) 191.76 724.95 T
5 F
(rangelength = 44) 63.65 702.95 T
4 F
-0.07 ( Assume further that the input integers ar) 63.65 671.95 P
-0.07 (e not gr) 277.24 671.95 P
-0.07 (eater than 32767 and the sequence ends with a) 316.21 671.95 P
4 14 Q
(-) 63.65 657.95 T
4 12 Q
(1. Identify any b) 68.31 657.95 T
(ug\050s\051 in the pr) 152.08 657.95 T
(ogram and corr) 224.2 657.95 T
(ect the mistak) 304.64 657.95 T
(e\050s\051.) 375.83 657.95 T
5 F
(#include <iostream.h>) 72.65 617.95 T
(int main\050\051) 72.65 589.95 T
({) 72.65 575.95 T
(int i, max, min;) 90.65 561.95 T
(cin >> i;) 90.65 547.95 T
(while \050i != -1\051) 90.65 533.95 T
({) 90.65 519.95 T
(    if \050i > max\051 max = i;) 92.45 505.95 T
(    if \050i < min\051 min = i;) 92.45 491.95 T
(   cin >> i;) 99.65 477.95 T
( }) 90.65 463.95 T
(cout << "rangelength = " << max - min << endl;) 90.65 449.95 T
(return 0;) 90.65 435.95 T
(}) 72.65 421.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(15 of 17) 521.98 62.62 T
4 12 Q
(13.) 36.65 772.95 T
(\0506 points\051 Gi) 63.65 772.95 T
(v) 127.54 772.95 T
(en an int array) 133.42 772.95 T
(, its size, and a query integer) 209.09 772.95 T
(, the f) 353.98 772.95 T
(ollo) 382.67 772.95 T
(wing function is supposed to) 401.22 772.95 T
(sear) 63.65 756.95 T
(ch f) 84.76 756.95 T
(or the query v) 103.45 756.95 T
(alue in the array) 175.66 756.95 T
(. If the query v) 259.81 756.95 T
(alue is f) 335.35 756.95 T
(ound, its index is r) 374.39 756.95 T
(etur) 468.53 756.95 T
(ned; other-) 489.67 756.95 T
-0.03 (wise, -1 is r) 63.65 740.95 P
-0.03 (etur) 120.67 740.95 P
-0.03 (ned.  Is the function corr) 141.82 740.95 P
-0.03 (ectly implemented? If not, explain the pr) 268.12 740.95 P
-0.03 (oblem and \336x it.) 476.05 740.95 P
5 F
(// Searches an unordered array of integers) 63.65 698.95 T
(int search\050int data[], // input: array) 63.65 684.95 T
(           int size,   // input: array size) 63.65 670.95 T
(           int query   // input: value to find) 63.65 656.95 T
(           \051           // return: index, if the query value) 63.65 642.95 T
(                       // is found;) 63.65 628.95 T
(                       // otherwise, -1) 63.65 614.95 T
({) 63.65 586.95 T
(     int index = 0;    // initialize index to 0) 63.65 572.95 T
(     while \050\050index < size\051 && \050data[index] != query\051\051) 63.65 544.95 T
(          index++;) 63.65 530.95 T
(     if \050data[index] != query\051) 63.65 502.95 T
(          return -1;) 63.65 488.95 T
(     else) 63.65 474.95 T
(          return index;) 63.65 460.95 T
(} // search) 63.65 446.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(16 of 17) 521.98 62.62 T
4 12 Q
(14.) 36.65 772.95 T
(\0504 points\051 Y) 63.65 772.95 T
(ou ar) 122.32 772.95 T
(e gi) 149.1 772.95 T
(v) 166.64 772.95 T
(en the f) 172.52 772.95 T
(ollo) 210.22 772.95 T
(wing pr) 228.77 772.95 T
(ogram:) 268.22 772.95 T
5 F
(#include <iostream.h>) 63.65 730.95 T
(int main\050\051) 63.65 716.95 T
({) 63.65 702.95 T
(    int  count;) 63.65 688.95 T
(    char sym[5];) 63.65 674.95 T
(    for \050count = 0; count < 5; count++\051) 63.65 646.95 T
(        cin >> sym[count];) 63.65 632.95 T
(    for \050count = 4; count > 0; count--\051) 63.65 618.95 T
(        cout << sym[count];) 63.65 604.95 T
(    cout << endl;) 63.65 590.95 T
(    return 0;) 63.65 576.95 T
(}) 63.65 562.95 T
4 F
(Suppose that y) 63.65 525.95 T
(ou run this pr) 138.7 525.95 T
(ogram and enter the f) 209.5 525.95 T
(ollo) 320.51 525.95 T
(wing input \050) 339.06 525.95 T
0 F
(<ENTER>) 401.08 525.95 T
4 F
( is the Enter k) 453.28 525.95 T
(ey) 525.16 525.95 T
(and   indicates a space\051:) 63.65 505.95 T
0 F
(A    C  <ENTER>) 63.65 465.95 T
(<ENTER>) 63.65 445.95 T
($5<ENTER>) 63.65 425.95 T
(#<ENTER>) 63.65 405.95 T
4 F
(What is the output?) 63.65 365.95 T
36.65 87.95 558.65 780.95 C
45.65 198.64 549.65 341.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.45 317.47 74.45 335.47 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
74.45 317.47 92.45 335.47 R
7 X
V
0 X
N
92.45 317.47 110.45 335.47 R
7 X
V
0 X
N
110.45 317.47 128.45 335.47 R
7 X
V
0 X
N
128.45 317.47 146.45 335.47 R
7 X
V
0 X
N
146.45 317.47 164.45 335.47 R
7 X
V
0 X
N
164.45 317.47 182.45 335.47 R
7 X
V
0 X
N
182.45 317.47 200.45 335.47 R
7 X
V
0 X
N
200.45 317.47 218.45 335.47 R
7 X
V
0 X
N
218.45 317.47 236.45 335.47 R
7 X
V
0 X
N
236.45 317.47 254.45 335.47 R
7 X
V
0 X
N
254.45 317.47 272.45 335.47 R
7 X
V
0 X
N
272.45 317.47 290.45 335.47 R
7 X
V
0 X
N
290.45 317.47 308.45 335.47 R
7 X
V
0 X
N
308.45 317.47 326.45 335.47 R
7 X
V
0 X
N
326.45 317.47 344.45 335.47 R
7 X
V
0 X
N
344.45 317.47 362.45 335.47 R
7 X
V
0 X
N
362.45 317.47 380.45 335.47 R
7 X
V
0 X
N
380.45 317.47 398.45 335.47 R
7 X
V
0 X
N
398.45 317.47 416.45 335.47 R
7 X
V
0 X
N
416.45 317.47 434.45 335.47 R
7 X
V
0 X
N
434.45 317.47 452.45 335.47 R
7 X
V
0 X
N
452.45 317.47 470.45 335.47 R
7 X
V
0 X
N
470.45 317.47 488.45 335.47 R
7 X
V
0 X
N
488.45 317.47 506.45 335.47 R
7 X
V
0 X
N
56.45 299.47 74.45 317.47 R
7 X
V
0 X
N
74.45 299.47 92.45 317.47 R
7 X
V
0 X
N
92.45 299.47 110.45 317.47 R
7 X
V
0 X
N
110.45 299.47 128.45 317.47 R
7 X
V
0 X
N
128.45 299.47 146.45 317.47 R
7 X
V
0 X
N
146.45 299.47 164.45 317.47 R
7 X
V
0 X
N
164.45 299.47 182.45 317.47 R
7 X
V
0 X
N
182.45 299.47 200.45 317.47 R
7 X
V
0 X
N
200.45 299.47 218.45 317.47 R
7 X
V
0 X
N
218.45 299.47 236.45 317.47 R
7 X
V
0 X
N
236.45 299.47 254.45 317.47 R
7 X
V
0 X
N
254.45 299.47 272.45 317.47 R
7 X
V
0 X
N
272.45 299.47 290.45 317.47 R
7 X
V
0 X
N
290.45 299.47 308.45 317.47 R
7 X
V
0 X
N
308.45 299.47 326.45 317.47 R
7 X
V
0 X
N
326.45 299.47 344.45 317.47 R
7 X
V
0 X
N
344.45 299.47 362.45 317.47 R
7 X
V
0 X
N
362.45 299.47 380.45 317.47 R
7 X
V
0 X
N
380.45 299.47 398.45 317.47 R
7 X
V
0 X
N
398.45 299.47 416.45 317.47 R
7 X
V
0 X
N
416.45 299.47 434.45 317.47 R
7 X
V
0 X
N
434.45 299.47 452.45 317.47 R
7 X
V
0 X
N
452.45 299.47 470.45 317.47 R
7 X
V
0 X
N
470.45 299.47 488.45 317.47 R
7 X
V
0 X
N
488.45 299.47 506.45 317.47 R
7 X
V
0 X
N
56.45 281.47 74.45 299.47 R
7 X
V
0 X
N
74.45 281.47 92.45 299.47 R
7 X
V
0 X
N
92.45 281.47 110.45 299.47 R
7 X
V
0 X
N
110.45 281.47 128.45 299.47 R
7 X
V
0 X
N
128.45 281.47 146.45 299.47 R
7 X
V
0 X
N
146.45 281.47 164.45 299.47 R
7 X
V
0 X
N
164.45 281.47 182.45 299.47 R
7 X
V
0 X
N
182.45 281.47 200.45 299.47 R
7 X
V
0 X
N
200.45 281.47 218.45 299.47 R
7 X
V
0 X
N
218.45 281.47 236.45 299.47 R
7 X
V
0 X
N
236.45 281.47 254.45 299.47 R
7 X
V
0 X
N
254.45 281.47 272.45 299.47 R
7 X
V
0 X
N
272.45 281.47 290.45 299.47 R
7 X
V
0 X
N
290.45 281.47 308.45 299.47 R
7 X
V
0 X
N
308.45 281.47 326.45 299.47 R
7 X
V
0 X
N
326.45 281.47 344.45 299.47 R
7 X
V
0 X
N
344.45 281.47 362.45 299.47 R
7 X
V
0 X
N
362.45 281.47 380.45 299.47 R
7 X
V
0 X
N
380.45 281.47 398.45 299.47 R
7 X
V
0 X
N
398.45 281.47 416.45 299.47 R
7 X
V
0 X
N
416.45 281.47 434.45 299.47 R
7 X
V
0 X
N
434.45 281.47 452.45 299.47 R
7 X
V
0 X
N
452.45 281.47 470.45 299.47 R
7 X
V
0 X
N
470.45 281.47 488.45 299.47 R
7 X
V
0 X
N
488.45 281.47 506.45 299.47 R
7 X
V
0 X
N
56.45 263.47 74.45 281.47 R
7 X
V
0 X
N
74.45 263.47 92.45 281.47 R
7 X
V
0 X
N
92.45 263.47 110.45 281.47 R
7 X
V
0 X
N
110.45 263.47 128.45 281.47 R
7 X
V
0 X
N
128.45 263.47 146.45 281.47 R
7 X
V
0 X
N
146.45 263.47 164.45 281.47 R
7 X
V
0 X
N
164.45 263.47 182.45 281.47 R
7 X
V
0 X
N
182.45 263.47 200.45 281.47 R
7 X
V
0 X
N
200.45 263.47 218.45 281.47 R
7 X
V
0 X
N
218.45 263.47 236.45 281.47 R
7 X
V
0 X
N
236.45 263.47 254.45 281.47 R
7 X
V
0 X
N
254.45 263.47 272.45 281.47 R
7 X
V
0 X
N
272.45 263.47 290.45 281.47 R
7 X
V
0 X
N
290.45 263.47 308.45 281.47 R
7 X
V
0 X
N
308.45 263.47 326.45 281.47 R
7 X
V
0 X
N
326.45 263.47 344.45 281.47 R
7 X
V
0 X
N
344.45 263.47 362.45 281.47 R
7 X
V
0 X
N
362.45 263.47 380.45 281.47 R
7 X
V
0 X
N
380.45 263.47 398.45 281.47 R
7 X
V
0 X
N
398.45 263.47 416.45 281.47 R
7 X
V
0 X
N
416.45 263.47 434.45 281.47 R
7 X
V
0 X
N
434.45 263.47 452.45 281.47 R
7 X
V
0 X
N
452.45 263.47 470.45 281.47 R
7 X
V
0 X
N
470.45 263.47 488.45 281.47 R
7 X
V
0 X
N
488.45 263.47 506.45 281.47 R
7 X
V
0 X
N
56.45 245.47 74.45 263.47 R
7 X
V
0 X
N
74.45 245.47 92.45 263.47 R
7 X
V
0 X
N
92.45 245.47 110.45 263.47 R
7 X
V
0 X
N
110.45 245.47 128.45 263.47 R
7 X
V
0 X
N
128.45 245.47 146.45 263.47 R
7 X
V
0 X
N
146.45 245.47 164.45 263.47 R
7 X
V
0 X
N
164.45 245.47 182.45 263.47 R
7 X
V
0 X
N
182.45 245.47 200.45 263.47 R
7 X
V
0 X
N
200.45 245.47 218.45 263.47 R
7 X
V
0 X
N
218.45 245.47 236.45 263.47 R
7 X
V
0 X
N
236.45 245.47 254.45 263.47 R
7 X
V
0 X
N
254.45 245.47 272.45 263.47 R
7 X
V
0 X
N
272.45 245.47 290.45 263.47 R
7 X
V
0 X
N
290.45 245.47 308.45 263.47 R
7 X
V
0 X
N
308.45 245.47 326.45 263.47 R
7 X
V
0 X
N
326.45 245.47 344.45 263.47 R
7 X
V
0 X
N
344.45 245.47 362.45 263.47 R
7 X
V
0 X
N
362.45 245.47 380.45 263.47 R
7 X
V
0 X
N
380.45 245.47 398.45 263.47 R
7 X
V
0 X
N
398.45 245.47 416.45 263.47 R
7 X
V
0 X
N
416.45 245.47 434.45 263.47 R
7 X
V
0 X
N
434.45 245.47 452.45 263.47 R
7 X
V
0 X
N
452.45 245.47 470.45 263.47 R
7 X
V
0 X
N
470.45 245.47 488.45 263.47 R
7 X
V
0 X
N
488.45 245.47 506.45 263.47 R
7 X
V
0 X
N
56.45 227.47 74.45 245.47 R
7 X
V
0 X
N
74.45 227.47 92.45 245.47 R
7 X
V
0 X
N
92.45 227.47 110.45 245.47 R
7 X
V
0 X
N
110.45 227.47 128.45 245.47 R
7 X
V
0 X
N
128.45 227.47 146.45 245.47 R
7 X
V
0 X
N
146.45 227.47 164.45 245.47 R
7 X
V
0 X
N
164.45 227.47 182.45 245.47 R
7 X
V
0 X
N
182.45 227.47 200.45 245.47 R
7 X
V
0 X
N
200.45 227.47 218.45 245.47 R
7 X
V
0 X
N
218.45 227.47 236.45 245.47 R
7 X
V
0 X
N
236.45 227.47 254.45 245.47 R
7 X
V
0 X
N
254.45 227.47 272.45 245.47 R
7 X
V
0 X
N
272.45 227.47 290.45 245.47 R
7 X
V
0 X
N
290.45 227.47 308.45 245.47 R
7 X
V
0 X
N
308.45 227.47 326.45 245.47 R
7 X
V
0 X
N
326.45 227.47 344.45 245.47 R
7 X
V
0 X
N
344.45 227.47 362.45 245.47 R
7 X
V
0 X
N
362.45 227.47 380.45 245.47 R
7 X
V
0 X
N
380.45 227.47 398.45 245.47 R
7 X
V
0 X
N
398.45 227.47 416.45 245.47 R
7 X
V
0 X
N
416.45 227.47 434.45 245.47 R
7 X
V
0 X
N
434.45 227.47 452.45 245.47 R
7 X
V
0 X
N
452.45 227.47 470.45 245.47 R
7 X
V
0 X
N
470.45 227.47 488.45 245.47 R
7 X
V
0 X
N
488.45 227.47 506.45 245.47 R
7 X
V
0 X
N
56.45 209.47 74.45 227.47 R
7 X
V
0 X
N
74.45 209.47 92.45 227.47 R
7 X
V
0 X
N
92.45 209.47 110.45 227.47 R
7 X
V
0 X
N
110.45 209.47 128.45 227.47 R
7 X
V
0 X
N
128.45 209.47 146.45 227.47 R
7 X
V
0 X
N
146.45 209.47 164.45 227.47 R
7 X
V
0 X
N
164.45 209.47 182.45 227.47 R
7 X
V
0 X
N
182.45 209.47 200.45 227.47 R
7 X
V
0 X
N
200.45 209.47 218.45 227.47 R
7 X
V
0 X
N
218.45 209.47 236.45 227.47 R
7 X
V
0 X
N
236.45 209.47 254.45 227.47 R
7 X
V
0 X
N
254.45 209.47 272.45 227.47 R
7 X
V
0 X
N
272.45 209.47 290.45 227.47 R
7 X
V
0 X
N
290.45 209.47 308.45 227.47 R
7 X
V
0 X
N
308.45 209.47 326.45 227.47 R
7 X
V
0 X
N
326.45 209.47 344.45 227.47 R
7 X
V
0 X
N
344.45 209.47 362.45 227.47 R
7 X
V
0 X
N
362.45 209.47 380.45 227.47 R
7 X
V
0 X
N
380.45 209.47 398.45 227.47 R
7 X
V
0 X
N
398.45 209.47 416.45 227.47 R
7 X
V
0 X
N
416.45 209.47 434.45 227.47 R
7 X
V
0 X
N
434.45 209.47 452.45 227.47 R
7 X
V
0 X
N
452.45 209.47 470.45 227.47 R
7 X
V
0 X
N
470.45 209.47 488.45 227.47 R
7 X
V
0 X
N
488.45 209.47 506.45 227.47 R
7 X
V
0 X
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
80.21 465.6 80.21 463.44 84.53 463.44 84.53 465.6 4 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
73.73 465.6 73.73 463.44 78.05 463.44 78.05 465.6 4 L
N
93.89 466.32 93.89 464.16 98.21 464.16 98.21 466.32 4 L
N
85.25 508.08 85.25 505.92 89.57 505.92 89.57 508.08 4 L
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 334.68 799.95 T
(COMP102 Fall  97) 36.65 62.62 T
(HKUST) 279.32 62.62 T
(17 of 17) 521.98 62.62 T
4 12 Q
(15.) 36.65 772.95 T
(\0506 points\051 Sho) 63.65 772.95 T
(w the exact output of the f) 134.21 772.95 T
(ollo) 267.22 772.95 T
(wing pr) 285.77 772.95 T
(ogram.) 325.22 772.95 T
5 F
(#include <iostream.h>) 63.65 730.95 T
(int main\050\051) 63.65 702.95 T
({) 63.65 688.95 T
(    int array[4][4];) 63.65 674.95 T
(    int index1, index2;) 63.65 660.95 T
(    for \050index1 = 0; index1 < 4; index1++\051) 63.65 646.95 T
(        for \050index2 = 0; index2 < 4; index2++\051) 63.65 632.95 T
(            array[index2][index1] = index2;) 63.65 618.95 T
(    for \050index1 = 0; index1 < 4; index1++\051) 63.65 604.95 T
(    {) 63.65 590.95 T
(for \050index2 = 0; index2 < 4; index2++\051) 108.65 576.95 T
(            cout << index1 << array[index1][index2]) 63.65 562.95 T
(                 << index2 << " " ;) 63.65 548.95 T
(        cout << endl;) 63.65 534.95 T
(    }) 63.65 520.95 T
(    return 0;) 63.65 506.95 T
(}) 63.65 492.95 T
36.65 87.95 558.65 780.95 C
45.65 308.64 549.65 451.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.45 427.47 74.45 445.47 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
74.45 427.47 92.45 445.47 R
7 X
V
0 X
N
92.45 427.47 110.45 445.47 R
7 X
V
0 X
N
110.45 427.47 128.45 445.47 R
7 X
V
0 X
N
128.45 427.47 146.45 445.47 R
7 X
V
0 X
N
146.45 427.47 164.45 445.47 R
7 X
V
0 X
N
164.45 427.47 182.45 445.47 R
7 X
V
0 X
N
182.45 427.47 200.45 445.47 R
7 X
V
0 X
N
200.45 427.47 218.45 445.47 R
7 X
V
0 X
N
218.45 427.47 236.45 445.47 R
7 X
V
0 X
N
236.45 427.47 254.45 445.47 R
7 X
V
0 X
N
254.45 427.47 272.45 445.47 R
7 X
V
0 X
N
272.45 427.47 290.45 445.47 R
7 X
V
0 X
N
290.45 427.47 308.45 445.47 R
7 X
V
0 X
N
308.45 427.47 326.45 445.47 R
7 X
V
0 X
N
326.45 427.47 344.45 445.47 R
7 X
V
0 X
N
344.45 427.47 362.45 445.47 R
7 X
V
0 X
N
362.45 427.47 380.45 445.47 R
7 X
V
0 X
N
380.45 427.47 398.45 445.47 R
7 X
V
0 X
N
398.45 427.47 416.45 445.47 R
7 X
V
0 X
N
416.45 427.47 434.45 445.47 R
7 X
V
0 X
N
434.45 427.47 452.45 445.47 R
7 X
V
0 X
N
452.45 427.47 470.45 445.47 R
7 X
V
0 X
N
470.45 427.47 488.45 445.47 R
7 X
V
0 X
N
488.45 427.47 506.45 445.47 R
7 X
V
0 X
N
56.45 409.47 74.45 427.47 R
7 X
V
0 X
N
74.45 409.47 92.45 427.47 R
7 X
V
0 X
N
92.45 409.47 110.45 427.47 R
7 X
V
0 X
N
110.45 409.47 128.45 427.47 R
7 X
V
0 X
N
128.45 409.47 146.45 427.47 R
7 X
V
0 X
N
146.45 409.47 164.45 427.47 R
7 X
V
0 X
N
164.45 409.47 182.45 427.47 R
7 X
V
0 X
N
182.45 409.47 200.45 427.47 R
7 X
V
0 X
N
200.45 409.47 218.45 427.47 R
7 X
V
0 X
N
218.45 409.47 236.45 427.47 R
7 X
V
0 X
N
236.45 409.47 254.45 427.47 R
7 X
V
0 X
N
254.45 409.47 272.45 427.47 R
7 X
V
0 X
N
272.45 409.47 290.45 427.47 R
7 X
V
0 X
N
290.45 409.47 308.45 427.47 R
7 X
V
0 X
N
308.45 409.47 326.45 427.47 R
7 X
V
0 X
N
326.45 409.47 344.45 427.47 R
7 X
V
0 X
N
344.45 409.47 362.45 427.47 R
7 X
V
0 X
N
362.45 409.47 380.45 427.47 R
7 X
V
0 X
N
380.45 409.47 398.45 427.47 R
7 X
V
0 X
N
398.45 409.47 416.45 427.47 R
7 X
V
0 X
N
416.45 409.47 434.45 427.47 R
7 X
V
0 X
N
434.45 409.47 452.45 427.47 R
7 X
V
0 X
N
452.45 409.47 470.45 427.47 R
7 X
V
0 X
N
470.45 409.47 488.45 427.47 R
7 X
V
0 X
N
488.45 409.47 506.45 427.47 R
7 X
V
0 X
N
56.45 391.47 74.45 409.47 R
7 X
V
0 X
N
74.45 391.47 92.45 409.47 R
7 X
V
0 X
N
92.45 391.47 110.45 409.47 R
7 X
V
0 X
N
110.45 391.47 128.45 409.47 R
7 X
V
0 X
N
128.45 391.47 146.45 409.47 R
7 X
V
0 X
N
146.45 391.47 164.45 409.47 R
7 X
V
0 X
N
164.45 391.47 182.45 409.47 R
7 X
V
0 X
N
182.45 391.47 200.45 409.47 R
7 X
V
0 X
N
200.45 391.47 218.45 409.47 R
7 X
V
0 X
N
218.45 391.47 236.45 409.47 R
7 X
V
0 X
N
236.45 391.47 254.45 409.47 R
7 X
V
0 X
N
254.45 391.47 272.45 409.47 R
7 X
V
0 X
N
272.45 391.47 290.45 409.47 R
7 X
V
0 X
N
290.45 391.47 308.45 409.47 R
7 X
V
0 X
N
308.45 391.47 326.45 409.47 R
7 X
V
0 X
N
326.45 391.47 344.45 409.47 R
7 X
V
0 X
N
344.45 391.47 362.45 409.47 R
7 X
V
0 X
N
362.45 391.47 380.45 409.47 R
7 X
V
0 X
N
380.45 391.47 398.45 409.47 R
7 X
V
0 X
N
398.45 391.47 416.45 409.47 R
7 X
V
0 X
N
416.45 391.47 434.45 409.47 R
7 X
V
0 X
N
434.45 391.47 452.45 409.47 R
7 X
V
0 X
N
452.45 391.47 470.45 409.47 R
7 X
V
0 X
N
470.45 391.47 488.45 409.47 R
7 X
V
0 X
N
488.45 391.47 506.45 409.47 R
7 X
V
0 X
N
56.45 373.47 74.45 391.47 R
7 X
V
0 X
N
74.45 373.47 92.45 391.47 R
7 X
V
0 X
N
92.45 373.47 110.45 391.47 R
7 X
V
0 X
N
110.45 373.47 128.45 391.47 R
7 X
V
0 X
N
128.45 373.47 146.45 391.47 R
7 X
V
0 X
N
146.45 373.47 164.45 391.47 R
7 X
V
0 X
N
164.45 373.47 182.45 391.47 R
7 X
V
0 X
N
182.45 373.47 200.45 391.47 R
7 X
V
0 X
N
200.45 373.47 218.45 391.47 R
7 X
V
0 X
N
218.45 373.47 236.45 391.47 R
7 X
V
0 X
N
236.45 373.47 254.45 391.47 R
7 X
V
0 X
N
254.45 373.47 272.45 391.47 R
7 X
V
0 X
N
272.45 373.47 290.45 391.47 R
7 X
V
0 X
N
290.45 373.47 308.45 391.47 R
7 X
V
0 X
N
308.45 373.47 326.45 391.47 R
7 X
V
0 X
N
326.45 373.47 344.45 391.47 R
7 X
V
0 X
N
344.45 373.47 362.45 391.47 R
7 X
V
0 X
N
362.45 373.47 380.45 391.47 R
7 X
V
0 X
N
380.45 373.47 398.45 391.47 R
7 X
V
0 X
N
398.45 373.47 416.45 391.47 R
7 X
V
0 X
N
416.45 373.47 434.45 391.47 R
7 X
V
0 X
N
434.45 373.47 452.45 391.47 R
7 X
V
0 X
N
452.45 373.47 470.45 391.47 R
7 X
V
0 X
N
470.45 373.47 488.45 391.47 R
7 X
V
0 X
N
488.45 373.47 506.45 391.47 R
7 X
V
0 X
N
56.45 355.47 74.45 373.47 R
7 X
V
0 X
N
74.45 355.47 92.45 373.47 R
7 X
V
0 X
N
92.45 355.47 110.45 373.47 R
7 X
V
0 X
N
110.45 355.47 128.45 373.47 R
7 X
V
0 X
N
128.45 355.47 146.45 373.47 R
7 X
V
0 X
N
146.45 355.47 164.45 373.47 R
7 X
V
0 X
N
164.45 355.47 182.45 373.47 R
7 X
V
0 X
N
182.45 355.47 200.45 373.47 R
7 X
V
0 X
N
200.45 355.47 218.45 373.47 R
7 X
V
0 X
N
218.45 355.47 236.45 373.47 R
7 X
V
0 X
N
236.45 355.47 254.45 373.47 R
7 X
V
0 X
N
254.45 355.47 272.45 373.47 R
7 X
V
0 X
N
272.45 355.47 290.45 373.47 R
7 X
V
0 X
N
290.45 355.47 308.45 373.47 R
7 X
V
0 X
N
308.45 355.47 326.45 373.47 R
7 X
V
0 X
N
326.45 355.47 344.45 373.47 R
7 X
V
0 X
N
344.45 355.47 362.45 373.47 R
7 X
V
0 X
N
362.45 355.47 380.45 373.47 R
7 X
V
0 X
N
380.45 355.47 398.45 373.47 R
7 X
V
0 X
N
398.45 355.47 416.45 373.47 R
7 X
V
0 X
N
416.45 355.47 434.45 373.47 R
7 X
V
0 X
N
434.45 355.47 452.45 373.47 R
7 X
V
0 X
N
452.45 355.47 470.45 373.47 R
7 X
V
0 X
N
470.45 355.47 488.45 373.47 R
7 X
V
0 X
N
488.45 355.47 506.45 373.47 R
7 X
V
0 X
N
56.45 337.47 74.45 355.47 R
7 X
V
0 X
N
74.45 337.47 92.45 355.47 R
7 X
V
0 X
N
92.45 337.47 110.45 355.47 R
7 X
V
0 X
N
110.45 337.47 128.45 355.47 R
7 X
V
0 X
N
128.45 337.47 146.45 355.47 R
7 X
V
0 X
N
146.45 337.47 164.45 355.47 R
7 X
V
0 X
N
164.45 337.47 182.45 355.47 R
7 X
V
0 X
N
182.45 337.47 200.45 355.47 R
7 X
V
0 X
N
200.45 337.47 218.45 355.47 R
7 X
V
0 X
N
218.45 337.47 236.45 355.47 R
7 X
V
0 X
N
236.45 337.47 254.45 355.47 R
7 X
V
0 X
N
254.45 337.47 272.45 355.47 R
7 X
V
0 X
N
272.45 337.47 290.45 355.47 R
7 X
V
0 X
N
290.45 337.47 308.45 355.47 R
7 X
V
0 X
N
308.45 337.47 326.45 355.47 R
7 X
V
0 X
N
326.45 337.47 344.45 355.47 R
7 X
V
0 X
N
344.45 337.47 362.45 355.47 R
7 X
V
0 X
N
362.45 337.47 380.45 355.47 R
7 X
V
0 X
N
380.45 337.47 398.45 355.47 R
7 X
V
0 X
N
398.45 337.47 416.45 355.47 R
7 X
V
0 X
N
416.45 337.47 434.45 355.47 R
7 X
V
0 X
N
434.45 337.47 452.45 355.47 R
7 X
V
0 X
N
452.45 337.47 470.45 355.47 R
7 X
V
0 X
N
470.45 337.47 488.45 355.47 R
7 X
V
0 X
N
488.45 337.47 506.45 355.47 R
7 X
V
0 X
N
56.45 319.47 74.45 337.47 R
7 X
V
0 X
N
74.45 319.47 92.45 337.47 R
7 X
V
0 X
N
92.45 319.47 110.45 337.47 R
7 X
V
0 X
N
110.45 319.47 128.45 337.47 R
7 X
V
0 X
N
128.45 319.47 146.45 337.47 R
7 X
V
0 X
N
146.45 319.47 164.45 337.47 R
7 X
V
0 X
N
164.45 319.47 182.45 337.47 R
7 X
V
0 X
N
182.45 319.47 200.45 337.47 R
7 X
V
0 X
N
200.45 319.47 218.45 337.47 R
7 X
V
0 X
N
218.45 319.47 236.45 337.47 R
7 X
V
0 X
N
236.45 319.47 254.45 337.47 R
7 X
V
0 X
N
254.45 319.47 272.45 337.47 R
7 X
V
0 X
N
272.45 319.47 290.45 337.47 R
7 X
V
0 X
N
290.45 319.47 308.45 337.47 R
7 X
V
0 X
N
308.45 319.47 326.45 337.47 R
7 X
V
0 X
N
326.45 319.47 344.45 337.47 R
7 X
V
0 X
N
344.45 319.47 362.45 337.47 R
7 X
V
0 X
N
362.45 319.47 380.45 337.47 R
7 X
V
0 X
N
380.45 319.47 398.45 337.47 R
7 X
V
0 X
N
398.45 319.47 416.45 337.47 R
7 X
V
0 X
N
416.45 319.47 434.45 337.47 R
7 X
V
0 X
N
434.45 319.47 452.45 337.47 R
7 X
V
0 X
N
452.45 319.47 470.45 337.47 R
7 X
V
0 X
N
470.45 319.47 488.45 337.47 R
7 X
V
0 X
N
488.45 319.47 506.45 337.47 R
7 X
V
0 X
N
36.65 87.95 558.65 780.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 17
%%DocumentFonts: Times-Roman
%%+ Palatino-Bold
%%+ Palatino-Italic
%%+ Palatino-Roman
%%+ Times-Bold
%%+ Courier
%%+ Courier-Bold
%%+ Times-BoldItalic
%%EOF
