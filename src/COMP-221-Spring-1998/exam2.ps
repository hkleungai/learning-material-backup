%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: exam2.dvi
%%Pages: 17
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSCommandLine: dvips -o exam2.ps exam2
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1997.05.16:0932
%%BeginProcSet: thicken.ps
% Increase the strokewidth of a stroked (PaintType 1 or 3) font.
% If the font is not of the right PaintType or does not have a 
% StrokeWidth entry, does nothing.

% Mario Wolczko, 10 Sep 92

/ThickenFont {  % factor ThickenFont
20 dict begin
  /factor exch def
  /StrokeWidth where {
    /fdict exch def
    PaintType dup
    1 eq exch 3 eq or
      { StrokeWidth factor mul
	fdict /StrokeWidth 3 2 roll put
      } if
  } if
end
} def
%%EndProcSet
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (exam2.dvi)
@start /Fa 5 62 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA217
2C7AAB23>49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E0
12F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C49
5A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A48
14C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0
A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143F
EC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C14
80001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14
FEA2EB01BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206
120E120C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<
B812FCA3CBFCADB812FCA32E137C9937>61 D E /Fb 2 110 df<1307EB0F80EB1FC0A2
EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E123812301270EA607EEAE07C12C0
13FC485A120012015B12035BA21207EBC04014C0120F13801381381F01801303EB0700EA
0F06131EEA07F8EA01F0122E7EAC18>105 D<27078007F0137E3C1FE01FFC03FF803C18
F0781F0783E03B3878E00F1E01263079C001B87F26707F8013B00060010013F001FE14E0
00E015C0485A4914800081021F130300015F491400A200034A13076049133E170F000702
7EEC8080188149017C131F1801000F02FCEB3F03053E130049495C180E001F0101EC1E0C
183C010049EB0FF0000E6D48EB03E0391F7E9D3E>109 D E /Fc
1 81 df<BB12FC86A3D87FC0C9001F7FF0007F6C6C17076C6C050113806C6CEF007F1A1F
6C6CF00FC06C6C18076C6C1803F201E06C6D17006D6C1860013F19706E18306D7E6D6C18
181B006D7E6D7E6D7EA26D7F6E7E6E7EA26E7E6E7E6E7EA26E7E6E7E80826F7E6F7EA26F
7E6F7E6F5A5EA24B5A5E4BCBFC153E157E5D5D4A5A4A5A14075D4A5A4ACCFC143E147E14
7C5C4948181801031930495A4A18704948186049CC12E0491801017EF003C0017C180749
180F4848F01F800003197F49EF01FF4848050713004848173F48CA000FB5FC48BA5AA25A
BB5AA24D537B7F58>80 D E /Fd 4 111 df<EDFFF8020F13FF027F8049B612E0010790
38C01FF090390FFE0007D91FF8497ED93FE0131F4948497E13FF5C5A91C7FCA2705A705A
EE03C093C8FCA6EE03FCB8FCA50001903880001F160FB3AB007FD9FE03B512F0A534407E
BF3A>12 D<EE07F8ED07FFA5ED003F161FAFEC7FF0903807FFFE011FEBFF9F017F14DF90
39FFF01FFF48EBC00348EB00014848EB007F485A001F153F5B123FA2127F5BA212FFAA12
7FA37F123FA26C6C147F120F6D14FF6C6C01037F6C6D48EBFFE06CEBF03F6C6CB512BF6D
143F010713FC010001E0EBE00033407DBE3A>100 D<ECFFF0010713FE011F6D7E017F80
9039FFE07FE0489038801FF048496C7E48486D7E48486D7E121F491301003F81A2485A6F
1380A212FFA290B7FCA401F0C9FCA5127FA27F123FEE0F806C7E161F6C6C15006C6C5C6C
6D137E6C9038E001FC6C9038F80FF8013FB55A6D14C0010391C7FC9038007FF8292B7DA9
30>I<01FFEB1FF8B5EBFFFE02036D7E4A80DA0FE07F91381F007F0007013C806C5B4A6D
7E5CA25CA35CB3A4B5D8FE0FB512E0A533297CA83A>110 D E /Fe
2 107 df<007FB812FEBAFCA26C17FE3804799847>0 D<126012F0B3B3B3B3B11260045B
76C319>106 D E /Ff 8 117 df<49B77E18F018FC903B0003FE0003FEEF00FF4BEC7F80
F03FC00207151F19E05DA2020F16F0A25DA2141FF03FE05DA2023F16C0187F4B1580A202
7FEDFF00604B495A4D5A02FF4A5A4D5A92C7EA3FC04CB4C7FC4990B512FC17E04ACAFCA2
1303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA25C497EB67EA33C3E
7BBD3E>80 D<147E49B47E903907C1C38090391F80EFC090383F00FF017E137F49148048
48133F485AA248481400120F5B001F5C157E485AA215FE007F5C90C7FCA21401485C5AA2
1403EDF0385AA21407EDE078020F1370127C021F13F0007E013F13E0003E137FECF3E126
1F01E313C03A0F8781E3803A03FF00FF00D800FC133E252977A72E>97
D<EC03F0EC0FFC91383E0E1C9138FC077E903901F003FE1303903807E001D90FC013FCEB
1F80A2EB3F004914F8137E01FE1303A2484814F0A2150712034914E0A2150F12074914C0
A2151FA216805B153F1203ED7F006D5BA200015B0000495A9038F80F7E90387C1EFEEB1F
F8903807E0FC90C7FC1401A25DA21403A25D001C1307007F5C48130F5D4A5A4AC7FC4813
7E00F85B387C03F0381FFFC0D803FEC8FC273B7CA72A>103 D<1478EB01FCA21303A314
F8EB00E01400AD137C48B4FC38038F80EA0707000E13C0121E121CEA3C0F1238A2EA781F
00701380A2EAF03F140012005B137E13FE5BA212015BA212035B1438120713E0000F1378
EBC070A214F0EB80E0A2EB81C01383148038078700EA03FEEA00F8163E79BC1C>105
D<D801F0EB3F803A07FC01FFE03A0F3E07C1F83A0E1F0F00FC001E011C137C001C49137E
003C13F012385C38783FC012705C91C7FC00F015FE495CEA007EA2150101FE5C5BA21503
00015D5B15075E0003020F13704914C0A2031F13F00007ED80E05B1681EE01C0120F49EC
0380A2EE0700001FEC0F0E49EB07FC0007C7EA01F02C2979A733>110
D<EC1FC0ECFFF8903803F07C90380FC01FEB1F8090393F000F80017E14C0491307484814
E0485A12075B000F15F0485AA2485AA2ED0FE0127F90C7FCA2151F4815C05AA2ED3F80A2
ED7F00A248147E007C5C007E13015D4A5A003E495A6C495A4A5A260F803EC7FC3807C0FC
3801FFF038003F80242977A72E>I<D801F013FC3A07FC07FF803A0F3E0F03C0260E1F1C
13E0001EEB380F001C1370003CEBE01F123814C0D8783F14C00070903880070092C7FC91
C8FC12F05BEA007EA313FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC
232979A726>114 D<EB01C0EB03F01307A25CA2130FA25CA2131FA25CA2133FA291C7FC
A2007FB51280B6FC1500D8007EC7FC13FEA25BA21201A25BA21203A25BA21207A25BA212
0FA25BA2121F141C1380A2003F133C1438EB0078147014F05C495AEA1F03495A6C48C7FC
EA07FCEA01F0193A78B81E>116 D E /Fg 1 4 df<130C131EA50060EB01800078130739
FC0C0FC0007FEB3F80393F8C7F003807CCF83801FFE038007F80011EC7FCEB7F803801FF
E03807CCF8383F8C7F397F0C3F8000FCEB0FC039781E078000601301000090C7FCA5130C
1A1D7C9E23>3 D E /Fh 13 121 df<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A79
8919>58 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A31201138012
0313005A120E5A1218123812300B1C798919>I<17075F84171FA2173F177FA217FFA25E
5EA24C6C7EA2EE0E3F161E161C1638A21670A216E0ED01C084ED0380171FED07005D150E
5DA25D157815705D844A5A170F4A5A4AC7FC92B6FC5CA2021CC7120F143C14384A81A24A
140713015C495AA249C8FC5B130E131E4982137C13FED807FFED1FFEB500F00107B512FC
A219F83E417DC044>65 D<49B712F818FF19E090260001FEC7EA3FF0F007F84B6E7E727E
850203815D1A80A20207167F4B15FFA3020F17004B5C611803021F5E4B4A5A180FF01FE0
023F4B5A4B4A5ADD01FEC7FCEF07F8027FEC7FE092B6C8FC18E092C7EA07F84AEC01FE4A
6E7E727E727E13014A82181FA213034A82A301075F4A153FA261010F167F4A5E18FF4D90
C7FC011F5E4A14034D5A013FED1FF04D5A4AECFFC0017F020790C8FCB812FC17F094C9FC
413E7DBD45>I<DC1FF81307923801FFFE030F9038FF800E923A7FF007E01E4A48C7EAF0
3EDA03FCEC787EDA0FF0EC3CFCDA3FC0141F4A48140F4AC8FC4948ED07F8EB07F8494815
03131F4A16F049481501495A13FF4890C913E05B1203485A19C0485AA2485A95C7FC123F
5BA2127F5BA312FF5BA590CCFC183CA21838A21878187018F06C6C5E17014D5A003F5F6D
15074DC7FC001F161E6C6C5D6D5D6C6C5D00034B5AD801FEEC07C06C6C4AC8FCD97FC013
7E90391FF803F80107B512E0010114809026001FF8C9FC40427BBF41>I<49B712F818FF
19C0D9000190C7EA3FF0F00FF84BEC03FCF000FE197F0203EE3F805DF11FC0A20207EE0F
E05D1AF0A2020F16075DA21AF8141F5DA2190F143F5DA21AF0147F4B151FA302FF17E092
C9123FA21AC049177F5C1A8019FF010318005C4E5A61010716034A5E4E5A180F010F4C5A
4A5E4E5A4EC7FC011F16FE4A4A5AEF07F8013FED0FE0EF3FC04A49B4C8FC017FEC0FFCB8
12F017C004FCC9FC453E7DBD4B>I<EE3FF00303B5FC92391FC03FC092397E0007E0DA01
F8EB01F8DA07E06D7E4A48147E023FC87E027EED1F804A16C0D903F8150F494816E0495A
4948ED07F0A2494816F849C9FC5B48481603A2484817FCA2485A000F17075B121FA25B12
3F19F84848160FA44848EE1FF0A3F03FE0A390CAEA7FC0A2F0FF80A219004D5A1703604D
5A6C7E4D5A4D5A003F5F4D5A6C6C4BC7FC17FE6C6C4A5A4C5A6C6CEC07E06C6CEC1FC06C
6C4A5A6C6C02FEC8FC90393F8003F890390FE01FE00103B5C9FC9038007FF03E427BBF45
>79 D<163EEEFFC0923803E1E0923807C0F0ED0F811687ED1F8F160F153FA217E092387E
038093C7FCA45DA514015DA30103B512FCA390260003F0C7FCA314075DA4140F5DA5141F
5DA4143F92C8FCA45C147EA414FE5CA413015CA4495AA35CEA1E07127F5C12FF495AA200
FE90C9FCEAF81EEA703EEA7878EA1FF0EA07C02C537CBF2D>102
D<EC01F8EC0FFE91383F07879139FC03DF80903801F801903903F000FFEB0FE04948EB7F
005C133F49C7FC49147E5B000115FEA248485CA215011207495CA21503120F495CA21507
A25E5B0007140FA24B5A6D133F0003147F000114FF6D485B0000EB03DF90387E0F3FEB1F
FCD907F090C7FC90C7FC5DA2157EA215FEA25D001C1301007F5C4813035D4A5A4A5A4849
5A00F8017EC8FC387E01FC381FFFE0000390C9FC293B7FA72B>I<EB01FC13FF5CA21303
A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C9FC15FE90397F07FFC091381F03
E090397E3801F09138F000F8EBFFE04A7F5C91C7FC485AA25BA2484813015E5BA2000714
035E5B1507120F5E49130F5E121F031F1370491480A2003F023F13F0EE00E090C7FC1601
48023E13C01603007E1680EE070000FE5DED1F1E48EC0FF80038EC03E02C407CBE34>I<
147014FC1301A25CA21303A25CA21307A25CA2130FA25CA2007FB512F0B6FC15E039001F
8000133FA291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25BA21207EC01C013E0
1403000F1480A2EBC0071500140E141E5C000713385C3803E1E03801FF80D8003EC7FC1C
3A7EB821>116 D<017E147848B4EB01FC2603C7C013FED807031303000F13E0120E121C
0107130100381400167ED8780F143E00705B161EEAF01F4A131C1200133F91C7123C1638
5B137E167801FE14705B16F016E0120149EB01C0A2ED0380A2ED0700A20000140E5D6D13
3C017C5B6D5B90381F03C0903807FF80D901FCC7FC27297EA72C>118
D<D901F8133FD907FEEBFFE0903A1E0F83C0F0903A3807C780F890397003CF0301E013FE
D801C0EBFC071203018013F8D8070015F0EE01C0000E4AC7FCA2001E1307A2C75BA2140F
5DA3141F5DA3143F92380001C0A34A1303001E1680003F017E1307267F80FE14005ED8FF
81141ED901DF131CD8FE035C3A7C078F80F03A3C0F07C1E03A1FFC03FF802707F0007EC7
FC2D297EA734>120 D E /Fi 29 122 df<B712FEEEFFC017F80001903980000FFC6C6C
C7EA01FF707F717E717E717EA2717EA284A31707170FA360A24D5A173F604D5A4D5ADC03
FEC7FC4C5AEE7FF091B6128017F891C7EA01FE9338007F80717EEF1FF0717E717EA2717E
8483A21980A719005F6017074D5A60171FEF7FF0EFFFC048486C01075BB848C7FC17F817
80393E7BBD46>66 D<B712FCEEFFC017F000019039C0001FFC6C6C48EB01FF706C7EEF3F
E0EF0FF0717E717E717E170084F07F80A2F03FC019E0181FA219F0A2F00FF8A519FCAB19
F8A4F01FF0A319E0183F19C0A2F07F801900604D5A4D5A4D5A4D5A4D5AEF7FC04C48C7FC
48486CEB0FFEB812F817C004FCC8FC3E3E7BBD4B>68 D<B6D8C00FB512FCA3000101E0C7
381FFE0026007F80EC07F8B3A691B7FCA30280C71207B3A92601FFE0EC1FFEB6D8C00FB5
12FCA33E3E7BBD4A>72 D<B612F0A3000101E0C9FC38007F80B3B0EF01C0A517031880A4
1707A3170FA2171F173F177FEFFF00160348486C133FB9FCA3323E7BBD3E>76
D<B56C91387FFFFC8080D8007F030313806E913800FE006E157C1838EB77FCEB73FE8013
7101707F6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7F6F7EA26F7E6F7EA26F7E6F7E
8215036F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013B8
A2EF7FF8173FA2171F170F1707A2170301F81501487ED807FF1500B500F81578A218383E
3E7BBD4A>78 D<B712F8EEFF8017E000019039C0001FF86C6C48EB03FE707E9338007F80
EF3FC018E0EF1FF0A2EF0FF8A218FCA718F8A3EF1FF0A2EF3FE018C0EF7F80933801FF00
EE03FCEE3FF891B612C094C7FC0280C9FCB3A73801FFE0B612C0A3363E7BBD43>80
D<B712E016FE707E00019039C0007FF06C6C48EB0FF8EE03FE707E707F717E717EA28417
1F84A760173F60604D5A4DC8FC4C5A4C5AEE0FF0EE7FC091B500FEC9FC16F891388000FE
EE3F80EE0FE0707E707E83160183160083A384A484A4725AF10380A2177F18F0053FEB07
002601FFE015F8B600C0011F5B94380FFC0E943803FE1CCBEAFFF8F01FE041407BBD49>
82 D<D903FE130690391FFFC00E017FEBF81E3901FE01FC3A03F0003F3E4848EB0FFE48
4813074848130390C71201003E1400007E157EA2007C153E12FCA2161EA36C150EA27E7F
007F92C7FC7F13F0EA3FFCEBFFC06C13FC6CEBFFC06C14FC6C14FF6C15C06C6C80011F80
010380D9003F7F02037F9138003FFF15070301138081167F17C0163F00E0151FA3160FA2
7EA36C1680161F7E17006C5D6C153E6D5C6D14FCD8FDF0495AD8F8FC495A3AF07FC01FC0
011FB55AD8E00349C7FC39C0003FF02A427ABF38>I<003FB912E0A3903BF0003FF0007F
01806D48130F48C7ED07F0007E1703007C170100781700A300701870A5481838A5C81600
B3B14B7E4B7E0103B7FCA33D3D7CBC47>I<EC01E0A24A7EA34A7EA34A7EA24A7E141CA2
EC3CFFEC387FA24A6C7EA34A6C7EA2010180ECC00FA249486C7EA349486C7EA24980010E
1301010FB5FC4980A2011CC7FC49147FA20178810170143FA201F08149141F1201486C81
1207486CEC3FF8D8FFFE49B512C0A332317DB038>97 D<B612FEEDFFC016F03A03FC0007
F86C48EB01FE1500167F1780163F17C0A61780167F170016FE4B5AED07F0ED7FE090B612
8016F09039F80001FC6F7EEE7F80163FEE1FC017E0160F17F0A617E0161FA2EE3FC0EE7F
80923801FF00486CEB07FEB712F85E93C7FC2C2F7CAE35>I<DA0FF81330DA7FFF137001
03B5EAC0F090390FFC03F190391FE000F9D97F80133F01FEC7121F4848140F4848140748
5A000F1503491401121F491400123F5B127F1770A248C9FC1700AA6C6C1570A3123F6D15
F0121F6D15E0000F15016D15C0000715036C6C15806C6C14076C6CEC0F00D97F80133ED9
1FE05B90390FFC03F00103B55AD9007F1380DA0FF8C7FC2C317BAF36>I<B612FEEDFFE0
16F83A03FE0007FC6C48EB00FFEE3F80707E707E707E707E160183160083A2177FA41880
AA1800A317FEA34C5A5F16034C5A5FEE1FC04C5A04FFC7FC486CEB07FEB712F816E093C8
FC312F7DAE39>I<B81280A3D803FEC7FC6C48EC1FC0160F16071603A21601A317E0ED0E
00A31700A2151E153E157E90B512FEA39038FC007E153E151E150EA21738A392C71270A4
17F0A2EE01E0A216031607161F486C14FFB812C0A32D2F7DAE33>I<DA0FF81360DAFFFE
13E00103EBFF8190390FF807E390393FC000F34948137F01FEC7123F4848141F4848140F
48481407120F491403485A003F1501A25B007F1500A348C9FC1700A8031FB5FCA26C7E92
38001FF0EE0FE0123F7FA26C7E120F7F12076C7E6C7E6C6C141FD97F80133FD93FE0137B
90390FFC03F10103B512E00100EC8060DA0FFCC7FC30317BAF3A>103
D<B5D8F807B512C0A3D803FEC7381FF0006C486E5AB190B7FCA301FCC7120FB3486C4A7E
B5D8F807B512C0A3322F7DAE38>I<B512F8A33803FE006C5AB3B3A3487EB512F8A3152F
7DAE1B>I<B500F890381FFFC0A3D803FEC7380FFE006C4815F017C04C5A041EC7FC5E16
F84B5A4B5A4B5A4B5A4BC8FC153C5D5DEC03E04A7E4A7E141F4A7EEC7DFEECF0FFEBFDE0
9039FFC07F804A6C7E4A6C7E5B496D7E6F7E6F7EA26F7E6F7EA2707E707E707EA2707E83
486CEC1FFEB500F890387FFFE0A3332F7DAE3A>107 D<B512FCA3D803FEC8FC6C5AB3A7
1607A4160EA4161EA2163E167E16FEED03FC486C130FB7FCA3282F7DAE2F>I<D8FFFE92
3807FFF0A3D803FF92380FFC006C5FD9DF80141DA3D9CFC01439A2D9C7E01471A3D9C3F0
14E1A2D9C1F8EB01C1A3D9C0FCEB0381A2027EEB0701A36E130EA291381F801CA391380F
C038A2913807E070A3913803F0E0A3913801F9C0A2913800FF80A3486CEB7F00487E486C
013E497EB5008091B512F0A2151C3C2F7CAE44>I<D8FFFC91387FFFC07F7F0001923807
FC006E6D5A6E6D5AD9DFE06D5AA2EBCFF0EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E
7EA26E7E6E7E6E7EA26E7E6E7EED7F80A2ED3FC0ED1FE0ED0FF0A2ED07F8ED03FCA2ED01
FEED00FF167FA2163F161F160F487E486C1407486C1403B56C1301A21600322F7DAE38>
I<EC1FF891B5FC903907F00FE090390FC003F0013FC712FC017E147E49804848EC1F8048
48EC0FC04848EC07E0000F16F0491403001F16F8491401003F16FCA2007F16FE90C9FCA3
4816FFAA6C6CEC01FEA3003F16FCA26D1403001F16F86C6CEC07F0A26C6CEC0FE0000316
C06C6CEC1F806C6CEC3F00017E147E6D5C90390FC003F0903907F00FE00100B5C7FCEC1F
F830317BAF3A>I<B612FEEDFFC016F03A03FE0007FC6C48EB01FEED007FEE3F80A2EE1F
C0A217E0A617C0A2EE3F80A2EE7F00ED01FCED07F890B612E0168001FCC9FCB2487EB512
F8A32B2F7DAE33>I<B612F015FF16C03A03FE001FF06C48EB03FCED00FE167FA283163F
83A55F167F94C7FC16FE4B5A4B5AED1FE090B6C8FC5D9039FC003F80ED0FC06F7E826F7E
A26F7EA582A418E082A281486CED01C0B500F8EB7F8193381FC38093380FFF00C9EA01FC
33307DAE37>114 D<90383FC00C9038FFF81C0003EBFE3C390FE03FFC381F8007EB0003
003E1301481300157C5A153CA36C141CA27E6C14006C7E13E013FE383FFFE06C13FE6CEB
FF806C14E0000114F06C6C13F8010F13FC1300EC07FE14011400157F153F12E0151FA37E
A2151E6C143E6C143C6C147C6C14F89038C001F039FBF807E000F1B512C0D8E07F130038
C007FC20317BAF2A>I<007FB712F8A39039801FF0073A7E000FE00000781678A2007016
3800F0163CA348161CA5C71500B3A8EC3FF8011FB512F0A32E2E7CAD36>I<B500F89038
7FFFC0A3D803FEC73807FC006C486E5A705A705AB3AB000015016D5D1603017E5D017F14
076D6C49C7FC131F6D6C133ED907F05B903903FC03F00100B55A023F1380DA07FCC8FC32
307DAE38>I<B527C01FFFF8EB7FFFA3D807FEC701C0EB1FF86C486E48EB07E094C713C0
00016F7E1A807F0000701400A2017F170E4C7EA26D6C5EEEE7F0A26D6C5E923801C3F8A2
D90FE05E92380381FCA2902607F0075DEE00FEA26D6C486D485A030E137F1803902601FC
1EEC8380031C133F02FE15870100013C02C7C7FC0338131F02FF15CFDA7F7814EE037013
0F03F014FE6E486D5AA36E486D5AA2020F5D4B1301A202075D92C8FC48307EAE4C>119
D<B500E0903807FFF0A3000790C7000113800001923800FE006C16F86E5C017F4A5A6D7E
6E495A011F5D6D6C13076E49C7FC0107140E6D6C131E6E5B010114386D6C13786F5A027F
5BEC3FC191381FE3C05EEC0FF76EB4C8FC5D14036E5AB04A7E91B512F0A3342F7EAE38>
121 D E /Fj 73 124 df<4AB4EB0FE0021F9038E03FFC913A7F00F8FC1ED901FC90383F
F03FD907F090397FE07F80494801FF13FF4948485BD93F805C137F0200ED7F00EF003E01
FE6D91C7FC82ADB97EA3C648C76CC8FCB3AE486C4A7E007FD9FC3FEBFF80A339407FBF35
>11 D<4AB4FC021F13C091387F01F0903901FC0078D907F0131C4948133E494813FF4948
5A137F1400A213FE6F5A163893C7FCAA167FB8FCA33900FE00018182B3AC486CECFF8000
7FD9FC3F13FEA32F407FBF33>I<013F4C7ED9FFC04B7E2601E0E015072607C070150F48
486C4B5A023E4BC7FC48486C5D48D90FC0EB01FE003ED90EF0EB07FCDA0F3F133E007E90
3A070FFFF8F8007C0200EBC1F0EE000300FC6D6C495A604D5A171F95C8FC173E177E177C
5F16015F007C4948485A1607007E5E003E49495A020E131F003F93C9FC6C49133E260F80
3C137E0238137C6C6C485B3901E0E0016CB448485AD93F0049133F90C74848EBFFC0030F
903801E0E093398007C0704B4848487E4B153C033E90381F001C4B497F03FC133E4B150F
4A48017E7F0203147C5D4A4801FCEB0380140F5D4AC7FC5C143E5C14FC5C495A13034948
027CEB07005C4948147E011F033E5B91C8140E013E153F017E6F5B017C92380F803C4917
380001706C5A49923801E0E0496FB45A6C48043FC7FC41497BC34C>37
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
120E5A1218123812300B1C79BE19>39 D<1430147014E0EB01C0EB03801307EB0F00131E
133E133C5B13F85B12015B1203A2485AA2120F5BA2121F90C7FCA25AA3123E127EA6127C
12FCB2127C127EA6123E123FA37EA27F120FA27F1207A26C7EA212017F12007F13787F13
3E131E7FEB07801303EB01C0EB00E014701430145A77C323>I<12C07E12707E7E121E7E
6C7E7F12036C7E7F12007F1378137CA27FA2133F7FA21480130FA214C0A3130714E0A613
0314F0B214E01307A614C0130FA31480A2131F1400A25B133EA25BA2137813F85B12015B
485A12075B48C7FC121E121C5A5A5A5A145A7BC323>I<121EEA7F8012FF13C0A213E0A3
127FEA1E601200A413E013C0A312011380120313005A120E5A1218123812300B1C798919
>44 D<B512FEA617067F961E>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>
I<EB01FE90380FFFC090383F03F090387C00F849137C48487F48487F4848EB0F80A2000F
15C04848EB07E0A3003F15F0A290C712034815F8A64815FCB3A26C15F8A56C6CEB07F0A3
001F15E0A36C6CEB0FC0A26C6CEB1F80000315006C6C133E6C6C5B017C5B90383F03F090
380FFFC0D901FEC7FC263F7DBC2D>48 D<EB01C013031307131F137FEA07FFB5FC139FEA
F81F1200B3B3ACEB7FF0B612F8A31D3D78BC2D>I<EB07FC90383FFF8090B512E03903F0
1FF83907C007FC390F0001FE001E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1F
F07FA56C5A6CC7FC120CC813E0153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A
4A5A4AC7FC147E147C5C495A495A495A495A49C71270133E133C5B4914E0485A485A485A
48C7120148B6FCA25A4815C0B7FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE039
01E003F839078001FCD80F007F000E6D7E001E1580D81F80137F486C14C07FA27F5BA212
1F6C5AC8138015FF1600A24A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000F
E0EC07F86E7E6E7E6E7E1680ED7FC0A216E0153FA216F0A2120C123F487E487EA316E0A2
49137F6CC713C01278EDFF807E6C4913006C495A3907C007FC3903F80FF0C6B55A013F13
80D907F8C7FC243F7CBC2D>I<150E151E153EA2157EA215FE1401A21403EC077E140614
0E141CA214381470A214E0EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90
C7FC5A120E120C121C5AA25A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<0006
1403D80780131F01F813FE90B5FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE9038
0FFF8090383E03E090387001F8496C7E49137E497F90C713800006141FC813C0A216E015
0FA316F0A3120C127F7F12FFA416E090C7121F12FC007015C012780038EC3F80123C6CEC
7F00001F14FE6C6C485A6C6C485A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>
I<EC1FE0ECFFF8903803F03E90380FC00F90391F000780133E017EEB1FC049133F484813
7F12035B12074848EB3F80ED1F00001F91C7FC5BA2123FA3485AA214FE903887FF8039FF
8F07E090389C01F09038B800FC01B0137E13F0497F16804914C0A2ED1FE0A34914F0A512
7FA6123F6D14E0A2121FED3FC0A26C6C1480A20007EC7F006C6C137E6C6C5B6C6C485A90
387E07F06DB45A010F1380D903FCC7FC243F7CBC2D>I<1238123C123F90B612FCA316F8
5A16F016E00078C712010070EC03C0ED078016005D48141E151C153C5DC8127015F04A5A
5D14034A5A92C7FC5C141EA25CA2147C147814F8A213015C1303A31307A3130F5CA2131F
A6133FAA6D5A0107C8FC26407BBD2D>I<EB03FC90381FFF8090387C07E09038F001F839
01E0007C48487F48487F48C7FCED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C13
1F6D140001FC133E6C6C5B9038FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C0
6D7F013F13F801787F48486C7E3903E01FFF48486C1380260F800313C048487E48903800
7FE0003E143F007E141F007CEC0FF01507481403A31501A46C15E0007C1403A2007E15C0
6C14076CEC0F806DEB1F006C6C133ED807F05B3901FC03F86CB512E0011F1380D903FCC7
FC243F7CBC2D>I<EB03FCEB1FFF90387E07C09038FC03F048486C7E48486C7E4848137C
000F147E4848137F81003F15805B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7E
A2001F147F120F6C6C13FF6D13DF000313013900F8039F90387E0F1FD91FFE13E0EB07F0
90C7FCA2ED3FC0A41680157FD80F801400487E486C13FEA24A5A5D49485AEB8007391E00
0FE0001F495A260FC07FC7FC3803FFFE6C13F838003FC0243F7CBC2D>I<121EEA7F80A2
EAFFC0A4EA7F80A2EA1E00C7FCB3121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619
>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3121E127FEAFF80A213C0A4127F12
1E1200A412011380A3120313005A1206120E120C121C5A1230A20A3979A619>I<007FB9
12E0BA12F0A26C18E0CDFCAE007FB912E0BA12F0A26C18E03C167BA147>61
D<EB1FF890B5FC3903E01FC0390F0007F0001EEB03F848EB01FC4814FE140000FE14FF7E
7FA46CC7FC123EC7EA01FEA2EC03FCEC07F815F0EC0FC0EC1F80EC3F00143E5C147814F8
5C13015CA2495AA25CAB91C7FC90C8FCA8EB0780EB1FE0A2497EA46D5AA2EB078020407B
BF2B>63 D<15074B7EA34B7EA34B7EA34B7EA34B7E15E7A2913801C7FC15C3A291380381
FEA34AC67EA3020E6D7EA34A6D7EA34A6D7EA34A6D7EA34A6D7EA349486D7E91B6FCA249
819138800001A249C87EA24982010E157FA2011E82011C153FA2013C820138151FA20178
82170F13FC00034C7ED80FFF4B7EB500F0010FB512F8A33D417DC044>65
D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE707E701380EF7FC0EF3FE0A2EF
1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF804C1300EE03FCEE0FF8EE7FE0
91B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF3FE0EF1FF018F8170F18FC1707
A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC00403138048486C90380FFE00B85A
17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE130E020F9038FF801E913A3FF007
E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948140FD93FE0140749481403495A
91C812014848150012034848167E5B000F173EA24848161EA2123F5B180E127FA3491600
12FFAC127F7F180EA2123FA27F001F171E181C6C7EA20007173C6D16386C6C1678000117
706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC07806D6CEC1F00D903FE143E902600
FF8013F891393FF007F0020FB512C0020391C7FC9138003FF037427BBF42>I<B712FCEE
FF8017E000019039C0001FF86C6C48EB03FEEE00FF717E717EEF0FE084717E717E170184
717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0A21980A218FF19004D5AA24D5A
6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B85A178004FCC8FC3C3E7DBD45>
I<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700A31870A41838161C
A41800A2163CA2167C16FC150391B5FCA3EC80031500167C163CA2161CA21807A3180E93
C7FCA4181E181CA2183CA2187CA218F8170117031707171F48486CEB01FFB912F0A3383E
7DBD3E>I<B91280A300019038C000036C6C48EB007FEF1FC0170F1707A21703A31701A4
EF00E0A21638A31800A31678A216F81501150791B5FCA3EC8007150115001678A21638A6
93C8FCAF3801FFE0B612F0A3333E7DBD3B>I<DB3FE0130C912603FFFE131C021F9038FF
803C913A7FF00FC07C9139FF0001F0D903FC90380078FC4948143DD91FE0141F4948140F
4948140701FF15034890C8FC491501485A000716005B000F177C5B001F173CA2485AA218
1C127FA25B95C7FC12FFAB041FB512F0127FA26D9139000FFE00EF03FC123FA27F121FA2
6C7EA212077F12036C7E7F6C7F6D6C14076D7E6D6C140FD907F8141ED903FEEC3C7C9026
00FF80EBF83C913A7FF007F01C021FB5EAC00C020391C8FC9138003FF03C427BBF47>I<
B6D8C01FB512F8A3000101E0C7383FFC0026007F80EC0FF0B3A691B7FCA30280C7120FB3
A92601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>I<B612F0A3C6EBF000EB3FC0B3B3
B2EBFFF0B612F0A31C3E7EBD21>I<011FB512FCA3D9000713006E5A1401B3B3A6123FEA
7F80EAFFC0A44A5A1380D87F005B007C130700385C003C495A6C495A6C495A2603E07EC7
FC3800FFF8EB3FC026407CBD2F>I<B612F8A3000101E0C9FC38007F80B3B0EF0380A517
071800A45FA35FA25F5F5F4C5A160748486C133FB8FCA3313E7DBD39>76
D<B500C093383FFFF0A300016D93387FF800D8007F18E0D977F016EFA3D973F8ED01CFA2
D971FCED038FA3D970FEED070FA26E150E80A26E6C141CA36E6C1438A26E6C1470A36E6C
14E0A26E6CEB01C0A36E6CEB0380A36E6CEB0700A2037F130EA36F6C5AA26F6C5AA36F6C
5AA25FED07F0A2923803F9C0A36FB45AA26F90C7FCA213F8486C147ED807FFEF3FF8B500
F8013C011FB512F0A34C3E7DBD53>I<B56C91B512F88080D8007F030713006EEC01FC6E
6E5A1870EB77FCEB73FEA2EB71FF01707FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E
7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8
A2EE07FCEE03FEA2EE01FF7013F0A2177F173FA2171F170FA2170701F81503487ED807FF
1501B500F81400A218703D3E7DBD44>I<ED7FE0913807FFFE91391FC03F8091397E0007
E04948EB03F8D907F0EB00FE4948147F49486E7E49486E7E49C86C7E01FE6F7E00018349
150300038348486F7EA248486F7EA2001F188049167F003F18C0A3007F18E049163FA300
FF18F0AC007F18E06D167FA4003F18C0A26C6CEEFF80A36C6C4B1300A26C6C4B5A00035F
6D150700015F6C6C4B5A6D5E6D6C4A5A6D6C4A5A6D6C4AC7FC6D6C14FED901FCEB03F8D9
007FEB0FE091391FC03F80912607FFFEC8FC9138007FE03C427BBF47>I<B712F8EEFF80
17E000019039C0003FF86C6C48EB07FCEE01FE707EEF7F80EF3FC018E0A2EF1FF0A218F8
A818F0A2EF3FE0A218C0EF7F80EFFF004C5AEE07FCEE3FF091B612C04CC7FC0280C9FCB3
A73801FFE0B612C0A3353E7DBD3E>I<ED7FE0913807FFFE91391FC03F8091397F000FE0
D901FCEB03F8D907F0EB00FE4948147F49486E7E49486E7E49C86C7E498248486F7E4915
0300038348486F7EA2000F834981001F1880A24848EE7FC0A3007F18E0A249163FA200FF
18F0AC007F18E0A26D167FA3003F18C0A26C6CEEFF80A3000F18006D5D0007DA0F805B6C
6C90393FE003FCED70706C6C496C485A6C6C48486C485A017FD9800E5BD93F819038061F
C0D91FC19038073F80D90FE14AC7FCD907F1EB03FE902601FDC013F8903A007EE007E091
271FF03FC013180207B5FC9139007FE1E0DB0001143883711378A2706C13F0EFFF0318FF
A27113E0A37113C0711380711300715AEF01F83D527BBF47>I<B712C016FCEEFF800001
D9C00013E06C6C48EB1FF0EE07FCEE01FE707E84717EA2717EA284A760177F606017FF95
C7FCEE01FCEE07F8EE1FE0EEFF8091B500FCC8FC16F091388001FCED003FEE1FC0707E70
7E83160383160183A383A484A4F0C004190EA28218E0057F131E2601FFE0161CB600C0EB
3FF094381FF83805071370CA3801FFE09438003F803F407DBD43>I<D907FC130C90391F
FF801C017FEBF03C3901FC03F83A03F0007E7CD807C0EB1FFC4848130F001F140748C712
03003E1401007E1400A2007C157C12FCA2163CA36C151CA27EA26C6C14007F7FEA3FF8EB
FF806C13F86CEBFF806C14F06C14FC6C14FF6C15C0013F14E0010714F0EB007F020713F8
9138007FFC150FED07FE15031501ED00FFA200E0157FA3163FA27EA3163E7E167E6C157C
6C15FC6C15F86D13016DEB03F06DEB07E0D8F9FCEB0FC03AF07F803F8090391FFFFE00D8
E00713F839C0007FC028427BBF33>I<003FB91280A3903AF0007FE001018090393FC000
3F48C7ED1FC0007E1707127C00781703A300701701A548EF00E0A5C81600B3B14B7E4B7E
0107B612FEA33B3D7DBC42>I<B600C090B512F8A3000101E0C70007130026007F80EC01
FC715A1870B3B3A4013F16F06E5DA21701011F5E80010F15036E4A5A010793C7FC6D6C5C
6D6C141E6D6C5C027F14F86E6C485A91390FF00FE00203B51280020049C8FCED1FF03D40
7DBD44>I<B500FE017FB5D88007B5FCA3000301C0010101E0C713F86C90C849EC3FE071
48EC0F807E7215006E143F017F190E84A26D6C60A24D7E6D6C60A2EFE7F86D6C60A29338
01C3FC6E18F001076104037F6E0281140101036104077F17006D6C4D5AA2040EEB7F806D
6C4DC7FCA24CEB3FC0DA7F80160EA24CEB1FE003C0161E023F171C047814F0DBE070010F
133C021F173804F014F84C1307DA0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB80EB01FEDA
03FF6F5AA293C8FCA26E5FA24B157F020094C8FCA24B81037C153EA20378151E0338151C
58407EBD5D>87 D<EAFFFCA4EAF000B3B3B3B3ABEAFFFCA40E5B77C319>91
D<EAFFFCA4EA003CB3B3B3B3ABEAFFFCA40E5B7FC319>93 D<EB0FF8EBFFFE3903F01F80
39078007E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FCA4EC1FFF0103
B5FC90381FF87FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE038012FEA315FF
A3007F5BEC03BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF807FC3A003FC0
01F0292A7DA82D>97 D<EA01FC12FFA3120712031201B1EC03FC91381FFF8091387C07E0
9039FDE001F09039FFC000FC4A137E91C77E49158049141F17C0EE0FE0A217F0A2160717
F8AA17F0A2160FA217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001F89039F1E003
F09039E0780FC09026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F13E090383F00
F8017C131E4848131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FC
A290C9FC5AAB6C7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C13
1E6C6C137890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC15FFA3150715
031501B114FF010713E190381F80F990387E003D49131FD803F81307485A491303484813
01121F123F5B127FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F000714076C6C497E
6C6C497ED8007C017913F890383F01F190380FFFC1903A01FE01FC002D407DBE33>I<EB
01FE90380FFFC090383F03F09038FC01F848486C7E4848137E48487F000F158049131F00
1F15C04848130FA2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E15
01000F15C06C6C13036DEB07806C6C1400C66C131E017E5B90381F80F8903807FFE00100
90C7FC232A7EA828>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0FFEB1FC1EB3F
811401137FEC00FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FFA320407EBF1C
>I<167C903903F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07E0
00FC0600000F6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F803
E03903FE0FC026071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E7E
6C15E06C810003813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C153E
007E157E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0
293D7EA82D>I<EA01FC12FFA3120712031201B1EC01FE913807FFC091381E07E0913878
03F09138E001F8D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497EB5D8F87F13FC
A32E3F7DBE33>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA3120712
031201B3AC487EB512F0A3143E7DBD1A>I<1478EB01FEA2EB03FFA4EB01FEA2EB007814
00AC147FEB7FFFA313017F147FB3B3A5123E127F38FF807E14FEA214FCEB81F8EA7F0138
7C03F0381E07C0380FFF803801FC00185185BD1C>I<EA01FC12FFA3120712031201B292
B51280A392383FFC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4AC8FC143E147F4A7E
13FD9038FFDFC0EC9FE0140F496C7E01FC7F496C7E1401816E7E81826F7E151F826F7EA2
82486C14FEB539F07FFFE0A32B3F7EBE30>I<EA01FC12FFA3120712031201B3B3B1487E
B512F8A3153F7DBE1A>I<2701F801FE14FF00FF902707FFC00313E0913B1E07E00F03F0
913B7803F03C01F80007903BE001F87000FC2603F9C06D487F000101805C01FBD900FF14
7F91C75B13FF4992C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13FEA347287DA7
4C>I<3901F801FE00FF903807FFC091381E07E091387803F000079038E001F82603F9C0
7F0001138001FB6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA32E287DA733>
I<14FF010713E090381F81F890387E007E01F8131F4848EB0F804848EB07C04848EB03E0
000F15F04848EB01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6CEB01FCA3001F
15F86C6CEB03F0A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090383F81FC9038
0FFFF0010090C7FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C0FE09039FDE0
03F03A03FFC001FC6C496C7E91C7127F49EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE
0FF0A4EE1FE0A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE007F09039FC780F
C0DA3FFFC7FCEC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF131C0107EBC03C90
381F80F090397F00387C01FC131CD803F8130E4848EB0FFC150748481303121F485A1501
485AA448C7FCAA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C133DD8007E1379
90383F81F190380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7DA730>I<3901F8
07E000FFEB1FF8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC01FF1330491300
A35BB3A5487EB512FEA31F287EA724>I<90383FC0603901FFF8E03807C03F381F000F00
3E1307003C1303127C0078130112F81400A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE
6C7F6C1480000114C0D8003F13E0010313F0EB001FEC0FF800E01303A214017E1400A27E
15F07E14016C14E06CEB03C0903880078039F3E01F0038E0FFFC38C01FE01D2A7DA824>
I<131CA6133CA4137CA213FCA2120112031207001FB512C0B6FCA2D801FCC7FCB3A215E0
A912009038FE01C0A2EB7F03013F138090381F8700EB07FEEB01F81B397EB723>I<D801
FC14FE00FF147FA3000714030003140100011400B3A51501A31503120015076DEB06FF01
7E010E13806D4913FC90381FC078903807FFE00100903880FE002E297DA733>I<B539E0
0FFFE0A32707FE000313006C48EB00FC5E00015D7F00005DA26D13016D5CA26D6C485AA2
ECC007011F91C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC7801011370A2EC
FEF001005BA2EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3FFFE03FFF8A329
0FFE003FE00013C06C486D48EB3F806C4817006D010F141E00016F131C15076D163C0000
4A6C1338A2017F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE9238707E03D90F
E0017F5BEDE03F02F0140701070387C7FC9138F1C01F02F9148F010315CE9138FB800F02
FF14DE6D15FCED00076D5DA24A1303027E5CA2027C1301023C5C023813003D287EA642>
I<B539F01FFFE0A30003D9C00F1300C690388007F8D97F0013E002805BD93FC05B011F49
C7FC90380FE00EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E8114
7BECF1FC903801E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E130F496D7E01FC
80486C80000F4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A32707FE00031300
6C48EB01FC6F5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C48C7FCA26E5A01
0F130EA26D6C5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8
FCA2140EA2141E141C143C1438A2147800181370127EB45BA2495AA248485AD87E07C9FC
EA780EEA3C3CEA1FF8EA07E02B3A7EA630>I<001FB61280A2EBE0000180140049485A00
1E495A121C4A5A003C495A141F00385C4A5A147F5D4AC7FCC6485AA2495A495A130F5C49
5A90393FC00380A2EB7F80EBFF005A5B484813071207491400485A48485BA248485B4848
137F00FF495A90B6FCA221277EA628>I<B812F0A22C0280982D>I
E /Fk 10 121 df<B812F0A60180C9FCB3A690B71280A60180C9FCB3A890B712F8A72D45
78C43A>69 D<B812C0A60180C9FCB3A790B612FCA60180C9FCB3AE2A4578C437>I<EB07
FE90387FFFC00003B57E000F14F84880819038F803FFEB8001001EC713800018147F0010
EC3FC0C8FC16E0151FA8EC7FFF010FB5FC133F48B6FC5A000FEBF01F381FFE00EA3FF8EA
7FE05B485A90C7FCA4153F7F6C6C137F9038E001FFEBF80F6CB6FC7E15DF6C141F000313
F8C60180C7FC232F7CAD2F>97 D<EAFF80A9C7FCB0EA7F80B3B3A809457AC417>105
D<12FFB3B3B3AF084579C417>108 D<DA7FC0EB0FF827FF01FFF8EB3FFF01076D90B512
80011FD9FE0314C0496D4814E049028F14F0D9FE0390389FC07FD9F8009039FF001FF849
6D48130F496D481307494A14FC031F1403495CA390C75BB3AC3E2D79AC4D>I<EC7FC039
FF01FFF801077F011F7F497F491480EBFE03D9F80013C049137F49133F4914E0151F5BA3
90C7FCB3AC232D79AC32>I<EC7F80903803FFF0010F13FC013F13FF498090B67E4801C0
7F3A03FE001FF048486D7E48486D7E49130348486D7E491300003F814980007F1680A390
C8123F4816C0AA6C6CEC7F80A36D14FF003F16006D5B001F5D6D13036C6C495A6C6C495A
6D131F3A03FFC0FFF06C90B55A6C5D013F91C7FC6D5B010313F09038007F802A2F7DAD31
>I<EA01FEADB612F0A6D801FEC7FCB3AB7F150815386CEB81F8ECFFFC7FA26D13F06D13
8090380FF8001E3A7EB823>116 D<D87FC0EC7FC06C6CECFF80001F16006D5B6C6C495A
6C6C495A6C6C5C00014A5A6C6C131F6E485AD97FC05B6D6C485A011F49C7FCEB0FF19038
07FBFEECFFFC6D5B6D5B7F6E5A5D6E5A4A7E4A7E81497F903803FBFCEB07F990380FF0FE
4A7E011F6D7E49486C7E49486C7EEBFF006F7E48486D7E48488000076E7E48481301496D
7E48481580003FED7FC04848EC3FE04848EC1FF02C2C80AB2D>120
D E /Fl 9 115 df<16C01501A215031507ED0F80151F153F157F913801FF005C140F14
7F903807FCFEEB0FF0EB0700EB00015DA314035DA314075DA3140F5DA3141F5DA3143F5D
A3147F92C7FCA35C5CA313015CA313035CA313075CA2130FA2131F133FB612FCA25D2242
76C132>49 D<9026380FC0131C9038787FE0902671FFF0133C01F3157801EF15F090B5FC
4801E0EB01E09139007003C04848EB380701F8EC1F804848EB1C3F4990381FFF004848EB
07DF49EB001E48C85A121E5E4815F800385D0078140100705D00F01403485D1507C8485A
A24BC7FCA25D153E157E157C15FC5D1401A24A5AA214075D140F5D141FA25D143FA24AC8
FCA314FEA21301A25C1303A25C1307A35C130FA35C5C6D5A2E4472C132>55
D<ED3FC0EDFFF0020313FC91380FE07E91383F803F4A487E02FC14800101140F494814C0
495A495AA2495A133F4A14E0137FA249C7FC161FA24816C05BA2163F12035BA2167F1780
4914FFA34B130012015D5D00005D6D130F017C131D153B6DEB73FC90381F03E3903907FF
83F8903801FC0790C7FC5E150F5E151F5E4B5AA24BC7FCA2001C14FE007F5C48495A4A5A
14074A5A485C00F8013FC8FC48137E5C387C07F0383FFFE06C1380D803FCC9FC2B4476C1
32>57 D<DB03FE130C92390FFF801C037FEBE03C9238FE03F8913A03F0007C7C4A48EB3E
F84A48131F4A48130F4AC7FC027EEC07F05C1703495A18E0495AA213074A15C0A3130F18
80A28094C7FCA280806D7EECFFE015FC6DEBFF806D14F016FC6D14FF023F80020F801403
DA003F7F150703007F163F161F160FA21607A3120716031607A2485EA2120E160F001E5E
A2001F4B5AA2484BC7FC6D143E167E6D5C007F4A5A6D495AD87CF0495AD8787CEB1F8027
F03F807FC8FC90381FFFFCD8E00713F039C0007F80364879C537>83
D<15FCEC03FF91390F83838091393E01CFC091387C00EF4A13FF4948137F010315804948
133F495A131F4A1400133F91C75A5B167E13FE16FE1201495CA215011203495CA21503A2
495CA21507A25EA2150F151F5E0001143F157F6C6C13FF913801DF8090387C039F90383E
0F3FEB0FFCD903F090C7FC90C7FC5DA2157EA215FEA25DA2001C495A127F48495A14074A
5A485C023FC8FC00F8137E387C01F8381FFFE0000390C9FC2A407BAB2D>103
D<143C147E14FE1301A3EB00FC14701400AE137C48B4FC3803C780380703C0000F13E012
0E121C13071238A21278EA700F14C0131F00F0138012E0EA003F1400A25B137EA213FE5B
12015BA212035B141E0007131C13E0A2000F133CEBC038A21478EB807014F014E0EB81C0
EA0783EBC7803803FE00EA00F8174378C11E>105 D<D801F0EB0FE0D803FCEB7FF83A07
1E01F03E3A0E0F03C01F001ED987001380001C018E130F003C139C003801B814C014F838
781FF000705BA25C00F049131FD8E03F158091C7FC1200163F491500137EA25E01FE147E
5B16FE5E12014913015E170F00030203130E4914F0A20307131E0007EDE01C5B173CEEC0
38000F167849157017E0ED03C1001FEDE3C049903801FF000007C8127C302D78AB37>
110 D<D903E0137E903A07F801FF80903A0E3C0783E0903A1C1E0F01F0903A3C1F1C00F8
01385B017849137C01705BA24A48137E01E05BA292C7FC00015B13C0147EC7FC02FE14FE
A25CA20101140117FC5CA20103140317F85CA20107EC07F0A24AEB0FE0A2010F15C0EE1F
80163F1700496C137E5E4B5A9138B803F090393F9C07E091389E0F80DA07FEC7FCEC01F8
49C9FCA2137EA213FEA25BA21201A25BA21203A21207B512F0A25C2F3F7FAB32>112
D<D801F0EB3F803A03FC01FFF03A071E03C0F83A0E0F0F007C001E90389E01FC001C139C
ECB803003813F0A2D91FE013F80078EC00E00070491300A200F05BEAE03F91C8FC1200A2
5B137EA313FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC262D78AB29
>114 D E /Fm 26 118 df<ED0FFF4AB512C0020F14F0027F80903A01FFF803FC499038
C000FE010FEB00034948497E49485B5C495A4C138001FF6E13005CA3705AEE01F893C8FC
A74BB51280B9FCA5C69038E00003B3B0007FD9FFC1B6FCA538467EC53E>12
D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>
49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE0007FFFD81F
806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9
FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC
0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC017C140149
140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<EA07C0EA1FF0EA3FF8EA7F
FCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C0C7FCAEEA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7
EA7FFCEA3FF8EA1FF0EA07C00F2C78AB1F>58 D<EE1F80A24C7EA24C7EA34C7EA24B7FA3
4B7FA24B7FA34B7F169F031F80161F82033F80ED3E07037E80157C8203FC804B7E020181
15F0820203814B137F0207815D173F020F814B7F021F8292C77EA24A82023E80027E8202
7FB7FCA291B87EA2498302F0C8FCA20103834A157F0107834A153FA249488284011F8491
C97E4984133E017E82B6020FB612F0A54C457CC455>65 D<DCFFF01470031F01FF14F04A
B6EAE0010207EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901
C0804990C87E4948814948814948167F4849163F4849161F5A4A160F485B19074890CAFC
19035A5BA2007F1801A34994C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F1903
6C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0
EC07F0010101FEEC1FE06D903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F14
80030001F8C8FC44467AC451>67 D<BA1280A419C026003FFEC7121F1701EF007F183F18
1F180F180719E01803A31801A3EE01E0F000F0A419001603A31607160F167F91B6FCA591
38FE007F160F16071603A31601A693C9FCAFB712F0A53C447CC346>70
D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A>73 D<B500FE067FB512806E
95B6FCA26F5EA2D8003F50C7FC013D6DEE03DFA2013C6DEE079FA26E6CEE0F1FA26E6C16
1EA26E6C163CA36E6C1678A26E6C16F0A26E6DEC01E0A26E6DEC03C0A36E6DEC0780A26F
6CEC0F00A26F6C141EA26F6C5CA36F6C5CA26F6C5CA26F6D485AA26F6D485AA26F6D485A
A3706C48C7FCA293383FF81EA2706C5AA2706C5AA3706C5AA2705BA2705BA2705BA2B605
7FB6128071C7FCA2173E171C61447CC36A>77 D<923807FFC092B512FE0207ECFFC0021F
15F091267FFE0013FC902601FFF0EB1FFF01070180010313C04990C76C7FD91FFC6E6C7E
49486F7E49486F7E01FF8348496F7E48496F1380A248496F13C0A24890C96C13E0A24819
F04982003F19F8A3007F19FC49177FA400FF19FEAD007F19FC6D17FFA3003F19F8A26D5E
6C19F0A26E5D6C19E0A26C6D4B13C06C19806E5D6C6D4B13006C6D4B5A6D6C4B5A6D6C4B
5A6D6C4A5B6D01C001075B6D01F0011F5B010101FE90B5C7FC6D90B65A023F15F8020715
C002004AC8FC030713C047467AC454>79 D<B9FC18F018FE727E19E0D8001F90C7000F7F
05017F716C7E727E727E721380A21AC084A21AE0A91AC0A24E1380A21A00604E5A4E5A4D
485A050F5B92B712C096C7FC18FC18C092CBFCB3A7B712E0A543447DC34D>I<903801FF
E0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7FA36F
7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0000F
1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC03A1F
FF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813
805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0
A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F
14C0010391C7FC9038003FF82A2F7CAD32>99 D<EE03FEED07FFA5ED001F160FB1EC3FE0
903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F48
48141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007
157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007F
C0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007
FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12
FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07
C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7
FC2C2F7DAD33>I<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381F
FC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0
007FEBFFE0A527467DC522>I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048
D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FC
A2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680
D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC
7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177FA46D15FF007F17
006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC01
0F14F8D9007F90C8FC32427DAC38>I<137C48B4FC4813804813C0A24813E0A56C13C0A2
6C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>105
D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>108 D<90277F8007FEEC0FFC
B590263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D
8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7E
A24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB59038
3FFF8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02
F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F001
1F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F00
1F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F
5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C090
26001FFCC8FC312F7DAD38>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC9138
9F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0
A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F381FF003383FC0004913
3F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C
14FC6C800003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA2
7EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E0
07FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF120300
0F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090
391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5
FCA50003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512
C7010F1407010313FE9026007FF0EBFC00372E7CAC3E>I E /Fn
21 122 df<B600F890B612F8A3C601F8C8EBF8006D486F5A6D486F5AB3A891B8FCA302E0
C8123FB3AB496C4B7E496C4B7EB600F890B612F8A345447BC351>72
D<B600F891B512FCA3C601F8C8001F13C06D4892380FFE006D48ED07F819E04E5A96C7FC
181E6060604D5AEF07C04D5A4DC8FC173E5F5F4C5AEE03C04C5A4CC9FC161E5E167CED01
FC4B7E4B7E4B7F5D033E7F4B7FEDF07F9139E1E03FF0DAE3C07F9138E7801F9139EF000F
FC02FE6D7E4A804A7F4A6D7F4A8182717E717E84171F717E841707717E717F8583727E85
183F727E85727E85496C4B1380496C4B13E0B600F80103B6FCA348447BC354>75
D<49B46C13C0010FEBF001013FEBFC039038FF007FD801F8EB0F874848EB03E7D807C0EB
01FF48487F001F157F90C8123F003E151FA2007E150F127C160712FC1603A37E16017EA2
7F6C6C91C7FC7F7FEA3FFCEBFFC06C13FC6CEBFFC015FC6CECFF806C15E0C615F86D8001
1F80010380D9003F1480020314C0EC003F030313E01500EE7FF0161FA2EE0FF8160712E0
1603A21601A37EA217F07E16037E17E06C15076C16C06DEC0F806D141F6DEC3F00D8F8F8
147E017F5C3AF01FE007F00107B55AD8E00191C7FC39C0001FFC2D4879C53D>83
D<003FBAFCA3903BF8000FFE000701C06D48130090C7163F007EF01F80007C180FA20078
1807A300701803A548F001C0A5C893C7FCB3B3A44B7E92383FFF8049B712F0A342437BC2
4E>I<B600F80103B512F8A3C601F8C8001F13006D48ED07FC6D48ED01F0A2725AB3B3A7
18016D6C5EA3010F4C5A800107160796C7FC6D6C5D0101161E6E5D6D6C5D6E6C14F86E6C
495ADA0FE0495ADA07F8EB0F80DA01FF017FC8FC9139007FFFFC031F13F0030190C9FC45
467BC351>I<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A6C
7EA34A6C7EA202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA24981
011CC7121FA2013C810138140FA2496E7EA201F081491403120183486C140100074B7ED8
1FF84A7EB5027F13F8A335357CB43D>97 D<4AB4EB0180021FEBF00391B5EAFC07010390
38007E0FD907F8EB0F9FD91FE0EB03DF4948EB01FF01FFC8FC4848157F4848153FA24848
151F4848150F121F491507123F5BA2007F1603A3484892C7FCAB6C7EEF0380A2123FA27F
001F16076D1600000F5E6C6C150E6C6C151E171C6C6C153C6C6C5DD93FC05C6D6CEB03E0
D907F8495A902703FF807FC7FC0100EBFFFC021F13F00201138031357BB33B>99
D<B7FC16F016FC3A03FE0003FF6C489038007F80EE1FE0707E707E707E1601707E177FA2
1880173F18C0A2EF1FE0A418F0AA18E0A4EF3FC0A21880177F180017FE16015F4C5AEE0F
F04C5AEE7FC0486CD903FFC7FCB712FC16F093C8FC34337BB23E>I<B812F0A3D803FEC7
123F6C48EC07F816011600A21778A21738A3171C1507A31700A25DA25D157F90B6FCA390
38FC007F151F81A2811707A3170E92C7FCA4171EA2173CA2177C17FC16011607486C143F
B812F8A330337BB238>I<B812C0A3D803FEC7FC6C48EC1FE0160716031601A21600A417
70A2150EA21700A3151EA2153E15FE90B5FCA3EBFC00153E151EA2150EA592C8FCAB48B4
FCB512FEA32C337BB235>I<DA03FF1303021FEBE00791B5EAF80F0103903800FE1FD90F
F8EB1F3FD91FE0EB07BFD97F806DB4FC49C77E484880484881484881A2484881121F4981
123F5BA2007F82A25B00FF93C7FCAA4BB512F86C7EA2DB00011380003F6F1300837F121F
7F120F6C7E7F12036C7E6C6C5DEB7FC0D91FE05BD90FF8EB07DF903A03FF803F8F010090
38FFFE07021FEBF80302030180C7FC35357BB340>I<B5D8F803B512E0A3D803FEC7380F
F8006C486E5AB390B7FCA301FCC71207B3A3486C4A7EB5D8F803B512E0A333337BB23D>
I<B512F8A33803FE006C5AB3B3A7487EB512F8A315337BB21E>I<B512FEA3000390C9FC
EA01FCB3A9EE01C0A416031780A41607A2160F161FA2167FEEFF00486C1307B8FCA32A33
7BB233>108 D<D8FFFC91383FFFE07FA2D801FF020713006EEB01FC6E6D5A1770EBDFE0
EBCFF013C780EBC3FC13C180EBC0FF80816E7E6E7EA26E7E6E7E1403816E7E140081ED7F
80ED3FC0A2ED1FE0ED0FF0150716F8ED03FC150116FEED00FF167F17F0163F161FA2160F
1607486C1403487ED81FFC1401B56C1300A2177033337BB23D>110
D<EC07FF023F13E0903901FE03FC903907F0007FD90FC0EB1F80D93F80EB0FE049C76C7E
01FE6E7E48486E7E48486E7E4848157FA24848ED3F80001F17C0A24848ED1FE0A3007F17
F049150FA300FF17F8AA007F17F06D151FA2003F17E0A26D153F001F17C0A26C6CED7F80
000717006D5D00035E6C6C4A5A6C6C4A5A017F4A5A6D6C495AD90FC0EB1F80D907F0017F
C7FC903901FE03FC9039003FFFE0020790C8FC35357BB33F>I<B612F8EDFF8016E03A03
FE000FF86C48EB03FEED00FF707E707E83161FA283A55FA24C5A5F4CC7FC16FEED03FCED
1FF090B6128003FCC8FC9038FC003FED0FC06F7E6F7E6F7E82150082A382A383A4EFC01C
A2167FEFE03C486C023F1338B500F890381FF07893380FF8F0933803FFE0CAEA7F803634
7BB23C>114 D<90390FF0018090387FFE0348B512873907F00FEF390FC001FF48C7FC00
3E143F151F5A150F5A1507A36C1403A27E6C91C7FC6C7E7FEA3FF8EBFF806C13FC6CEBFF
C06C14F06C80C614FE011F7F01031480D9001F13C014019138003FE0151F150FED07F015
0312E01501A37EA216E06C1403A26CEC07C06CEC0F806C6CEB1F0001E0133ED8FBFE13FC
00F0B55AD8E01F13E0D8C00390C7FC24357BB32E>I<007FB812C0A3903A8007FC003F27
7E0003F8130F007C16070078160300701601A200F017E0A2481600A6C71600B3AA4A7E4A
7E010FB512FEA333327CB13B>I<B500E0ECFFFEA3000790C8EA3FF0D803FCED1FC00001
EE0F806D16001200170E6D151E6D151CA26D6C5CA26E1478011F157080010F5DA26E1301
01075D6E130301035DA26D6C49C7FCA26E5B0100140EA2027F5BA2ED803C023F133815C0
021F5BA2EDE0F0020F5B15F102075BA2913803FB80A215FF6E90C8FCA26E5AA3157CA215
3837347DB23D>118 D<B500F091387FFF80A30003018091381FFC006C90C8EA0FE06C6D
5D017F5E6D6C4AC7FC171E6D6C5C6D6C143817786D6C5C6D6C5C16016D6C495A6D6C5C16
076E6C48C8FC91383FC00E161E6E6C5A91380FF03816786E6C5A6E6C5AEDFDC0EC01FF6E
5B93C9FC81B14B7E023F13FEA339337EB23D>121 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4
%%BeginPaperSize: a4
/setpagedevice where {
pop 1 dict dup /PageSize [ 595 842 ] put setpagedevice
} {
statusdict /a4tray known {
statusdict begin a4tray end
/a4 where { pop a4 } if
} {
/a4 where {
pop a4
} {
statusdict /setpage known {
statusdict begin
595 842 0 setpage
end
} if
} ifelse
} ifelse
} ifelse
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 592 399 a Fn(Hong)38 b(K)m(ong)g(University)f(of)h(Science)f
(and)h(Technology)660 538 y Fm(COMP221:)50 b(F)-9 b(undamen)m(tals)38
b(of)g(Arti\014cial)c(In)m(telligence)1635 678 y Fl(Spring)g(1997)1529
818 y Fk(Final)f(Examination)1363 1049 y Fj(17)e(Ma)m(y)h(1997,)g
(9:00{11:30am)873 1471 y Fi(Student)h(Name)p Fj(:)p 1770
1471 1182 6 v 873 1697 a Fi(Student)g(Number)p Fj(:)p
1770 1697 V 873 1923 a Fi(Lecture)g(Section)p Fj(:)p
1770 1923 V 216 2252 a Fm(Instructions)186 2440 y Fj(1.)46
b(This)29 b(is)g(a)i(closed-b)s(o)s(ok,)f(closed-notes)h(examination.)
186 2627 y(2.)46 b(Chec)m(k)31 b(that)g(y)m(ou)g(ha)m(v)m(e)g(all)f(16)
h(pages)g(\(excluding)e(this)g(co)m(v)m(er)j(page\).)186
2815 y(3.)46 b(W)-8 b(rite)31 b(y)m(our)f(name,)h(studen)m(t)f(n)m(um)m
(b)s(er)f(and)h(lecture)g(section)h(on)f(this)f(page.)186
3003 y(4.)46 b(Answ)m(er)35 b(all)f(questions)h(in)f(the)h(space)h(pro)
m(vided.)55 b(Rough)35 b(w)m(ork)g(should)f(b)s(e)g(done)h(on)h(the)f
(bac)m(k)302 3116 y(pages.)186 3303 y(5.)46 b(Mak)m(e)32
b(y)m(our)f(answ)m(ers)f(as)g(concise)h(as)f(p)s(ossible.)1147
3701 y(Question)f(1)i(\(15\045\):)p 1969 3701 709 6 v
1147 3927 a(Question)e(2)i(\(15\045\):)p 1969 3927 V
1147 4152 a(Question)e(3)i(\(10\045\):)p 1969 4152 V
1147 4378 a(Question)e(4)i(\(10\045\):)p 1969 4378 V
1147 4604 a(Question)e(5)i(\(20\045\):)p 1969 4604 V
1147 4830 a(Question)e(6)i(\(15\045\):)p 1969 4830 V
1147 5056 a(Question)e(7)i(\(15\045\):)p 1969 5056 V
1147 5394 a(TOT)-8 b(AL)30 b(\(100\045\):)p 1969 5394
V eop
%%Page: 1 2
1 1 bop 186 399 a Fj(1.)46 b(\(15\045\))32 b Fi(Heuristic)i(Sear)n(ch)
302 549 y Fj(A)27 b(searc)m(h)f(tree)h(is)f(sho)m(wn)f(b)s(elo)m(w)h
(where)f(eac)m(h)j(b)s(o)m(x)e(represen)m(ts)g(a)g(no)s(de)g(corresp)s
(onding)e(to)j(a)g(state)302 662 y(in)33 b(the)h(searc)m(h)h(space.)53
b(The)33 b(estimated)i(cost)g(\(i.e.)f Fh(h)h Fj(function\))e(for)h
(\014nding)e(a)i(solution)f(from)h(a)302 775 y(no)s(de)j(is)f(sho)m(wn)
g(in)g(its)h(b)s(o)m(x.)61 b(The)36 b(three)i(no)s(des)e(with)g
Fh(h)h Fj(=)f(0)h(are)h(goal)f(states)i(and)d(the)i(other)302
888 y(terminal)26 b(no)s(des)h(are)g(dead-ends)g(\(i.e.)h(states)g
(that)g(can)g(nev)m(er)f(reac)m(h)h(a)g(goal\).)40 b(Actual)28
b(link)d(costs)302 1000 y(are)33 b(mark)m(ed)f(on)f(the)h(links)e(b)s
(et)m(w)m(een)j(no)s(des.)44 b(Th)m(us)31 b(the)h(path)g(cost)h(\(i.e.)
f Fh(g)j Fj(function\))c(of)h(a)h(no)s(de)302 1113 y(is)d(equal)g(to)h
(the)f(sum)g(of)g(the)h(link)d(costs)j(from)f(the)h(ro)s(ot)f(to)i
(that)f(no)s(de.)968 2828 y @beginspecial 85 @llx 388
@lly 454 @urx 700 @ury 2267 @rwi @setspecial
%%BeginDocument: astar.eps
% 0000000000000000000000000000000000000000003ffffffe00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000400200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000c00200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000e00200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002001200200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002001200200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002001f00200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002002100200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002003380200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004780200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004480200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004840200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004840200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004840200000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000203f840200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004480200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002004780200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002000000200000000470000000000000000000000000000000000
% 00000000000000000000000000000003870000000020000002000000004c8000000000000000000000000000000000
% 0000000000000000000000000000000649000000002000000200000000408000000000000000000000000000000000
% 0000000000000000000000000000000049000000002000000200000000408000000000000000000000000000000000
% 0000000000000000000000000000000046000000003ffffffe00000000410000000000000000000000000000000000
% 000000000000000000000000000000008f00000000f000800780000003f30000000000000000000000000000000000
% 00000000000000000000000000000001890000000f0000800078000000400000000000000000000000000000000000
% 0000000000000000000000000000000009000000f0000080000700000047c000000000000000000000000000000000
% 00000000000000000000000000000003ef000007000000800000f00000000000000000000000000000000000000000
% 00000000000000000000000000000000000000780000008000000f0000000000000000000000000000000000000000
% 0000000000000000000000000000000000000780000000831c0000f000000000000000000000000000000000000000
% 0000000000000000000000000000000000007800000000813200000f00000000000000000000000000000000000000
% 00000000000000000000000000000000000780000000008102000000f0000000000000000000000000000000000000
% 000000000000000000000000000000000078000000000081020000000e000000000000000000000000000000000000
% 0000000000000000000000000000000007800000000000810400000001e00000000000000000000000000000000000
% 0000000000000000000000000000000078000000000000810c000000001e0000000000000000000000000000000000
% 000000000000000000000000000000038000000000000081000000000001e000000000000000000000000000000000
% 0000000000000000000000000000003c00000000000000839f00000000001e00000000000000000000000000000000
% 000000000000000000000000000003c0000000000000008000000000000001e0000000000000000000000000000000
% 00000000000000000000000000003c000000000000000080000000000000001c000000000000000000000000000000
% 0000000000000000000000000003c00000000000000007f00000000000000003c00000000000000000000000000000
% 000000000000000000000000003c000000000000000007f000000000000000003c0000000000000000000000000000
% 00000000000000000000000003c0000000000000000007e0000000000000000003c000000000000000000000000000
% 0000000000000000000000003c00000000000000000003e00000000000000000003c00000000000000000000000000
% 000000000000000000000001c000000000000000000003e000000000000000000003c0000000000000000000000000
% 00000000000000000000001e0000000000000000000003c00000000000000000000038000000000000000000000000
% 0000000000000000000c01e00000000000000000000003c00000000000000000000007807000000000000000000000
% 0000000000000000001e1e000000000000000000000001c00000000000000000000000787800000000000000000000
% 0000000000000000007fe000000000000000000000000180000000000000000000000007fe00000000000000000000
% 000000000000000001fe00000000000000000000000001800000000000000000000000007f80000000000000000000
% 000000000000000003ff00000000000000000000000001800000000000000000000000007fe0000000000000000000
% 00000000000000000fff00000000000000000000000000000000000000000000000000007ff8000000000000000000
% 000000000000007ffffffc000000000000000000003ffffffe000000000000000000000fffffff8000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 00000000000000400fc004000000000000000000002001f002000000000000000000000800f8008000000000000000
% 0000000000000040046004000000000000000000002003180200000000000000000000080084008000000000000000
% 0000000000000040042004000000000000000000002002000200000000000000000000080082008000000000000000
% 000000000000004007c004000000000000000000002002000200000000000000000000080082008000000000000000
% 000000000000004004e004000000000000000000002002000200000000000000000000080082008000000000000000
% 0000000000000040042004000000000000000000002002000200000000000000000000080082008000000000000000
% 0000000000000040042004000000000000000000002003000200000000000000000000080084008000000000000000
% 000000000000004007c004000000000000000000002001f002000000000000000000000800f8008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 000000000000004018f00400000000000000000000201e780200000000000000000000080060008000000000000000
% 0000000000000040081004000000000000000000002002480200000000000000000000080040008000000000000000
% 0000000000000040081004000000000000000000002002840200000000000000000000080080008000000000000000
% 000000000000004008600400000000000000000000200c8402000000000000000000000801f0008000000000000000
% 0000000000000040083004000000000000000000002006840200000000000000000000080118008000000000000000
% 0000000000000040081004000000000000000000002002840200000000000000000000080108008000000000000000
% 0000000000000040081004000000000000000000002002480200000000000000000000080088008000000000000000
% 00000000000000401ce00400000000000000000000201c7802000000000000000000000800f0008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 0000000000000040000004000000000000000000002000000200000000000000000000080000008000000000000000
% 000000000000007ffffffc000000000000000000003ffffffe000000000000000000000fffffff8000000000000000
% 0000000000000010010000000000000000000000000400801000000000000000000000000020080000000000000000
% 0000000000000060010000000000000000000000001800800c00000000000000000000000020060000000000000000
% 0000000000000080010000000000000000000000006000800200000000000000000000000020018000000000000000
% 00000000000003000100000000000000000000000080008001800000000000000000000000200040001c0000000000
% 00000018e0000c00010000000000000000061800030000800060000000000000000000003820003000200000000000
% 000000099000100001031e0000000000000210000400008e1c10000e00000000000000006420000800380000000000
% 000000081000600001010200000000000002200018000099200c0019000000000000000046200006001c0000000000
% 0000000810008000010102000000000000027c00600000813802001180000000000000006620000180040000000000
% 000000082003000001010c000000000000024600800000811c01801980000000000000003e20000040040000000000
% 00000008600c0000010106000000000000024203000000820400600f80000000000000000420000030040000000000
% 000000080010000001010200000000000002220c00000086040010010000000000000000082000000c780000000000
% 0000001cf8600000010102000000000000073c100000008004000c0200000000000000003820000002000000000000
% 000000000080000001039c0000000000000000600000008ff800020e00000000000000000020000001800000000000
% 0000000003000000010000000000000000000180000000800000018000000000000000000020000000600000000000
% 0000000004000000010000000000000000000200000000800000004000000000000000000020000000100000000000
% 00000000180000000fc000000000000000000c00000007f000000030000000000000000003f80000000c0000000000
% 00000000600000000fc000000000000000001000000007f00000000c000000000000000003f8000000020000000000
% 00000000800000000fc000000000000000006000000007e000000002000000000000000003f8000000018000000000
% 000000c300000000078000000000000000618000000003e000000001860000000000000001f0000000006180000000
% 000001c400000000078000000000000000e20000000003e000000000470000000000000001f00000000011c0000000
% 000003f800000000078000000000000001fc0000000003c0000000003f8000000000000001f0000000000fe0000000
% 000007f000000000078000000000000003f80000000003c0000000001fc000000000000000f00000000007f0000000
% 000007f000000000030000000000000003f80000000001c0000000001fc000000000000000e00000000007f0000000
% 00000ff800000000030000000000000007fc000000000180000000001fe000000000000000e0000000000ff8000000
% 00001ff00000000003000000000000000ff8000000000180000000000ff000000000000000600000000007fc000000
% 00003f000000000003000000000000001f800000000001800000000001f8000000000000006000000000007e000000
% 00007000000000000000000000000000380000000000000000000000001c0000000000000040000000000007000000
% fffffff80000007ffffffc0000007ffffffe0000003ffffffe0000001fffffff0000000fffffff8000000fffffffc0
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 800fc0080000004007e0040000004001f8020000002003180200000010038001000000080060008000000800660040
% 8008000800000040040004000000400108020000002002100200000010010001000000080040008000000800240040
% 8008000800000040040004000000400200020000002002100200000010010001000000080040008000000800280040
% 800f80080000004007c004000000400210020000002003f00200000010010001000000080040008000000800300040
% 8008800800000040044004000000400208020000002002100200000010010001000000080040008000000800380040
% 80080008000000400400040000004002080200000020021002000000100100010000000800400080000008002c0040
% 8008400800000040040004000000400308020000002002100200000010010001000000080040008000000800260040
% 800fc008000000400700040000004001f802000000200318020000001001c0010000000801c0008000000800678040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8010c00800000040078004000000401e300200000020038002000000100e38010000000800f00080000008010e0040
% 8010800800000040048004000000400210020000002006400200000010196401000000080090008000000801100040
% 80110008000000400840040000004002100200000020004002000000100146010000000801080080000008011c0040
% 8013e00800000040084004000000400c100200000020004002000000100166010000000801080080000008010e0040
% 8012300800000040084004000000400610020000002000800200000010023e01000000080108008000000801020040
% 80fe10080000004008400400000040021002000000200180020000001006040100000008010800800000080fc20040
% 8011100800000040048004000000400210020000002000000200000010000801000000080090008000000801020040
% 8011e00800000040078004000000401c38020000002003e002000000100fb8010000000800f00080000008013c0040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% 8000000800000040000004000000400000020000002000000200000010000001000000080000008000000800000040
% fffffff80000007ffffffc0000007ffffffe0000003ffffffe0000001fffffff0000000fffffff8000000fffffffc0
% 0000000000000000000000000000000000000000000100004000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000200002000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000400001000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000400001000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000800000800000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000070080000081e700000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000c81000000402c80000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000082000000202080000000000000000000000000000000000000000
% 000000000000000000000000000000000000000008200000020c080000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000104000000106100000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000308000000082300000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000008000000082000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000007d000000005c7c0000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000010000000040000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000020000000020000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000240000000012000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000007c000000001f000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000007c000000001f000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000007f000000007f000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000007f000000007f000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000fe000000003f800000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000fc000000001f800000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000f8000000000f800000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000e00000000003800000000000000000000000000000000000000000
% 0000000000000000000000000000000000000001c00000000001c00000000000000000000000000000000000000000
% 0000000000000000000000000000000000000001800000000000c00000000000000000000000000000000000000000
% 0000000000000000000000000000000000000001000000000000400000000000000000000000000000000000000000
% 000000000000000000000000000000000003ffffffe0000003fffffff0000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020030002000000200383010000000000000000000000000000000000000
% 0000000000000000000000000000000000020020002000000200186010000000000000000000000000000000000000
% 00000000000000000000000000000000000200200020000002001c6010000000000000000000000000000000000000
% 000000000000000000000000000000000002002000200000020014a010000000000000000000000000000000000000
% 000000000000000000000000000000000002002000200000020016a010000000000000000000000000000000000000
% 0000000000000000000000000000000000020020002000000200132010000000000000000000000000000000000000
% 0000000000000000000000000000000000020021002000000200132010000000000000000000000000000000000000
% 000000000000000000000000000000000002003f0020000002001a3010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 000000000000000000000000000000000002003c002000000200f18010000000000000000000000000000000000000
% 0000000000000000000000000000000000020024002000000200110010000000000000000000000000000000000000
% 0000000000000000000000000000000000020042002000000200120010000000000000000000000000000000000000
% 000000000000000000000000000000000002004200200000020067c010000000000000000000000000000000000000
% 0000000000000000000000000000000000020042002000000200346010000000000000000000000000000000000000
% 0000000000000000000000000000000000020042002000000200142010000000000000000000000000000000000000
% 0000000000000000000000000000000000020024002000000200122010000000000000000000000000000000000000
% 000000000000000000000000000000000002003c002000000200e3c010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 0000000000000000000000000000000000020000002000000200000010000000000000000000000000000000000000
% 000000000000000000000000000000000003ffffffe0000003fffffff0000000000000000000000000000000000000
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 595.28 841.89 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.28 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
272.6 626.65 269.29 615.12 265.98 626.65 269.29 626.65 4 Y
0 X
0 0 0 1 0 0 0 K
V
269.29 643.47 269.29 626.65 2 L
0.5 H
2 Z
N
291.7 456.64 294.8 445.05 286.03 453.24 288.86 454.94 4 Y
V
277.8 473.39 288.87 454.93 2 L
N
252.55 453.24 243.77 445.05 246.87 456.64 249.71 454.94 4 Y
V
260.79 473.39 249.71 454.93 2 L
N
226.77 388.35 255.12 445.04 R
7 X
V
1 H
0 X
N
428.5 539 436.53 530.08 424.99 533.39 426.75 536.2 4 Y
V
391.18 558.43 426.75 536.19 2 L
0.5 H
N
113.58 533.39 102.05 530.08 110.07 539 111.83 536.2 4 Y
V
147.4 558.43 111.83 536.19 2 L
N
385.98 541.61 382.68 530.08 379.37 541.61 382.68 541.61 4 Y
V
382.68 558.43 382.68 541.61 2 L
N
165.07 614.86 153.07 615.12 163.38 621.26 164.22 618.06 4 Y
V
260.79 643.47 164.23 618.05 2 L
N
255.12 643.47 283.46 700.16 R
7 X
V
1 H
0 X
N
141.73 558.43 170.08 615.12 R
7 X
V
0 X
N
368.5 558.43 396.85 615.12 R
7 X
V
0 X
N
311.81 473.39 340.16 530.08 R
7 X
V
0 X
N
425.2 473.39 453.54 530.08 R
7 X
V
0 X
N
198.43 473.39 226.77 530.08 R
7 X
V
0 X
N
85.04 473.39 113.39 530.08 R
7 X
V
0 X
N
255.12 473.39 283.46 530.08 R
7 X
V
0 X
N
368.5 473.39 396.85 530.08 R
7 X
V
0 X
N
141.73 473.39 170.08 530.08 R
7 X
V
0 X
N
255.12 558.43 283.46 615.12 R
7 X
V
0 X
N
283.46 388.35 311.81 445.04 R
7 X
V
0 X
N
375.19 621.26 385.51 615.12 373.51 614.86 374.35 618.06 4 Y
V
277.8 643.47 374.36 618.05 2 L
0.5 H
N
0 12 Q
(A) 266.46 677.48 T
(B) 153.07 592.44 T
(D) 379.84 592.44 T
(E) 96.38 507.4 T
(G) 209.76 507.4 T
(I) 323.15 507.4 T
(K) 436.54 507.4 T
260.79 649.13 277.79 666.14 R
7 X
V
0 X
(40) 263.29 658.14 T
147.4 564.1 164.41 581.1 R
7 X
V
0 X
(13) 149.9 573.1 T
374.17 564.1 391.18 581.1 R
7 X
V
0 X
(6) 379.68 573.1 T
430.86 479.06 447.87 496.06 R
7 X
V
0 X
(45) 433.37 488.06 T
317.48 479.06 334.49 496.06 R
7 X
V
0 X
(29) 319.98 488.06 T
204.09 479.06 221.1 496.06 R
7 X
V
0 X
(31) 206.6 488.06 T
90.71 479.06 107.72 496.06 R
7 X
V
0 X
(46) 93.21 488.06 T
260.79 479.06 277.79 496.06 R
7 X
V
0 X
(2) 266.29 488.06 T
147.4 479.06 164.41 496.06 R
7 X
V
0 X
(0) 152.9 488.06 T
260.79 564.1 277.79 581.1 R
7 X
V
0 X
(30) 263.29 573.1 T
232.44 394.02 249.45 411.03 R
7 X
V
0 X
(0) 237.94 403.03 T
289.13 394.02 306.14 411.03 R
7 X
V
0 X
(36) 291.64 403.03 T
374.17 479.06 391.18 496.06 R
7 X
V
0 X
(0) 379.68 488.06 T
(28) 209.76 637.8 T
(42) 315.15 638.8 T
315.12 539 323.14 530.08 311.61 533.39 313.36 536.2 4 Y
V
277.8 558.43 313.37 536.19 2 L
N
226.96 533.39 215.43 530.08 223.46 539 225.21 536.2 4 Y
V
260.79 558.43 225.21 536.19 2 L
N
272.6 541.61 269.29 530.08 265.98 541.61 269.29 541.61 4 Y
V
269.29 558.43 269.29 541.61 2 L
N
159.21 541.61 155.9 530.08 152.6 541.61 155.9 541.61 4 Y
V
155.9 558.43 155.9 541.61 2 L
N
(C) 266.46 592.44 T
(F) 153.07 507.4 T
(H) 266.46 507.4 T
(J) 379.84 507.4 T
(L) 238.11 422.36 T
(M) 294.8 422.36 T
(12) 273 628.89 T
(12) 110 544.89 T
(13) 161 543.89 T
(16) 224 544.89 T
(25) 272 543.89 T
(9) 304 543.89 T
(9) 374 544.89 T
(5) 414 545.89 T
(2) 245 458.89 T
(32) 287 458.89 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 341 3086 a(\(a\))46 b([5\045])29 b(Using)f(the)h(A)1179
3053 y Fg(\003)1247 3086 y Fj(searc)m(h)g(algorithm,)f(giv)m(e)h(the)g
(sequence)f(of)h(no)s(des)f(expanded)f(b)s(efore)i(a)502
3199 y(goal)i(state)h(is)d(reac)m(hed.)42 b(What)31 b(is)e(the)i
(solution)e(path)h(and)g(what)g(is)f(its)h(path)g(cost?)1890
5841 y(1)p eop
%%Page: 2 3
2 2 bop 336 399 a Fj(\(b\))45 b([2\045])31 b(Is)f(the)h(solution)e
(found)g(in)g(\(a\))i(optimal?)346 1490 y(\(c\))46 b([8\045])28
b(If)e(y)m(our)h(answ)m(er)g(to)h(\(b\))f(is)f(y)m(es,)i(then)f
(explain)e(wh)m(y)h(A)2580 1457 y Fg(\003)2647 1490 y
Fj(can)h(guaran)m(tee)h(optimalit)m(y)-8 b(.)39 b(If)502
1602 y(y)m(our)31 b(answ)m(er)f(to)h(\(b\))f(is)g(no,)g(then)g(explain)
f(wh)m(y)h(A)2299 1569 y Fg(\003)2369 1602 y Fj(cannot)h(return)e(an)i
(optimal)e(solution.)1890 5841 y(2)p eop
%%Page: 3 4
3 3 bop 186 399 a Fj(2.)46 b(\(15\045\))32 b Fi(Logical)i(Reasoning)302
549 y Fj(Consider)29 b(the)h(follo)m(wing)f(English)f(sen)m(tences:)576
703 y(i.)45 b(All)29 b(p)s(eople)h(who)g(are)g(ric)m(h)g(and)g(are)g
(smart)h(are)f(happ)m(y)-8 b(.)551 833 y(ii.)44 b(All)29
b(p)s(eople)h(who)g(read)g(are)h(smart.)526 962 y(iii.)43
b(John)30 b(reads)g(and)g(is)f(ric)m(h.)528 1092 y(iv.)45
b(Da)m(vid)31 b(is)e(ric)m(h)h(but)f(do)s(es)h(not)h(read.)554
1221 y(v.)45 b(Jac)m(k)32 b(is)d(smart)h(but)g(is)f(not)i(ric)m(h.)528
1351 y(vi.)45 b(Happ)m(y)31 b(p)s(eople)e(ha)m(v)m(e)j(exciting)e(liv)m
(es.)341 1563 y(\(a\))46 b([6\045])31 b(Express)f(the)g(ab)s(o)m(v)m(e)
i(English)c(sen)m(tences)j(as)g(\014rst-order)e(logic)i(sen)m(tences.)
1890 5841 y(3)p eop
%%Page: 4 5
4 4 bop 336 399 a Fj(\(b\))45 b([2\045])27 b(Con)m(v)m(ert)h(the)f
(\014rst-order)e(logic)i(sen)m(tences)g(obtained)f(in)f(\(a\))j(in)m
(to)e(normal)g(form)g(ready)502 511 y(to)31 b(b)s(e)f(used)g(next)g
(for)g(resolution)f(pro)s(of.)1890 5841 y(4)p eop
%%Page: 5 6
5 5 bop 346 399 a Fj(\(c\))46 b([7\045])29 b(Using)f(resolution)e
(\(optionally)h(with)g(refutation\),)i(sho)m(w)f(that)h(there)f(exists)
g(someone)502 511 y(whose)38 b(life)e(is)h(exciting.)63
b(\(Note)40 b(that)e(y)m(ou)h(need)e(to)i(represen)m(t)f(the)g(query)f
(in)g(\014rst-order)502 624 y(logic.\))1890 5841 y(5)p
eop
%%Page: 6 7
6 6 bop 186 399 a Fj(3.)46 b(\(10\045\))32 b Fi(Pr)n(obabilistic)i
(Reasoning)302 549 y Fj(Supp)s(ose)29 b Fh(A)p Fj(,)i
Fh(B)5 b Fj(,)30 b(and)f Fh(C)37 b Fj(are)31 b(three)g(random)e(v)-5
b(ariables.)341 761 y(\(a\))46 b([1\045])e(When)e(are)h
Fh(A)g Fj(and)f Fh(B)47 b Fj(conditionally)40 b(indep)s(enden)m(t)h
(giv)m(en)i Fh(C)7 b Fj(?)76 b(Answ)m(er)43 b(with)e(an)502
874 y(equation.)336 1493 y(\(b\))k([3\045])33 b(Using)e(the)h(equation)
f(in)g(\(a\),)i(sho)m(w)f(that)g(the)g(notion)f(of)h(conditional)e
(indep)s(endence)502 1606 y(is)i(symmetric.)47 b(That)32
b(is,)h(sho)m(w)g(that)g Fh(A)g Fj(is)e(indep)s(enden)m(t)g(of)i
Fh(B)k Fj(giv)m(en)32 b Fh(C)39 b Fj(if)32 b(and)g(only)g(if)f
Fh(B)502 1719 y Fj(is)f(indep)s(enden)m(t)e(of)i Fh(A)h
Fj(giv)m(en)f Fh(C)7 b Fj(.)346 3046 y(\(c\))46 b([3\045])31
b(In)m(tuitiv)m(ely)-8 b(,)30 b(when)f(are)i Fh(A)g Fj(and)e
Fh(B)35 b Fj(conditionally)28 b(indep)s(enden)m(t)g(giv)m(en)j
Fh(C)7 b Fj(?)336 4373 y(\(d\))45 b([3\045])32 b(Giv)m(e)f(a)g
(real-life)f(example)g(\(other)h(than)g(the)g(examples)f(in)g(the)h
(lecture)g(and)f(tutorial)502 4486 y(notes\))i(of)e(conditional)f
(indep)s(endence.)1890 5841 y(6)p eop
%%Page: 7 8
7 7 bop 186 399 a Fj(4.)46 b(\(10\045\))32 b Fi(Ba)-6
b(yesian)33 b(Netw)n(orks)302 549 y Fj(Consider)c(the)h(follo)m(wing)f
(Ba)m(y)m(esian)j(net)m(w)m(ork)f(where)f(all)f(v)-5
b(ariables)29 b(are)i(binary:)1679 1139 y @beginspecial
198 @llx 445 @lly 283 @urx 531 @ury 566 @rhi @setspecial
%%BeginDocument: bnet.eps
% 0003000000000000030000
% 003cf800000000003cf800
% 00c0040000000000c00400
% 0300030000000003000300
% 0400008000000004000080
% 0800004000000008000040
% 1000002000000010000020
% 1000001000000010000010
% 2000001000000020000010
% 2000000800000020000008
% 40008008000000400fc008
% 4001800800000040046008
% 4001c00800038040042008
% 400240040003f84007c004
% 800240040003ff8004e004
% 8003e007ffffff80042004
% 400420040003f840042004
% 4006700c0003804007c00c
% 4000000800000040000008
% 4000000800000040000008
% 4000000800000040000008
% 2000001000000020000010
% 1000001000000010000010
% 1000002000000010000020
% 0800004000000008000040
% 0400008000000004000080
% 0200010000000002000100
% 0180060000000001800600
% 0078780000000000787800
% 0007c0000000000017c000
% 0000400000000000100000
% 0000200000000000200000
% 0000200000000000200000
% 0000100000000000400000
% 0000100000000000400000
% 0000080000000000400000
% 0000080000000000800000
% 0000040000000000800000
% 0000040000000001000000
% 0000020000000001000000
% 0000020000000002000000
% 0000010000000002000000
% 0000010000000004000000
% 0000008000000004000000
% 0000008000000008000000
% 0000004000000008000000
% 0000004000000010000000
% 0000002000000010000000
% 0000002000000010000000
% 0000001000000020000000
% 0000001000000020000000
% 0000000900000240000000
% 0000000f800007c0000000
% 0000003f800007e0000000
% 0000003f800007f0000000
% 0000001f800007e0000000
% 0000000f80000fc0000000
% 0000000780300f80000000
% 00000003c3cf8f00000000
% 00000003cc004e00000000
% 00000001f0003c00000000
% 00000000c0000800000000
% 0000000080000400000000
% 0000000100000200000000
% 0000000100000100000000
% 0000000200000100000000
% 0000000200000080000000
% 00000004003e0080000000
% 0000000400630080000000
% 0000000400400080000000
% 0000000400400040000000
% 0000000800400040000000
% 0000000800400040000000
% 0000000400600040000000
% 00000004003e00c0000000
% 0000000400000080000000
% 0000000400000080000000
% 0000000400000080000000
% 0000000200000100000000
% 0000000100000100000000
% 0000000100000200000000
% 0000000080000400000000
% 0000000040000800000000
% 0000000020001000000000
% 0000000018006000000000
% 0000000007878000000000
% 00000000007c0000000000
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 595.28 841.89 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.28 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.58 519.21 255.12 515.91 243.58 512.6 243.58 515.91 4 Y
0 X
0 0 0 1 0 0 0 K
V
226.77 515.91 243.58 515.91 2 L
0.5 H
2 Z
N
230.24 479.52 232.44 467.72 224.32 476.56 227.28 478.04 4 Y
V
215.43 501.73 227.28 478.04 2 L
N
257.56 476.56 249.45 467.72 251.65 479.52 254.6 478.04 4 Y
V
266.46 501.73 254.61 478.04 2 L
N
7 X
90 450 14.17 14.17 212.6 515.91 G
1 H
0 X
90 450 14.17 14.17 212.6 515.91 A
7 X
90 450 14.17 14.17 240.94 459.21 G
0 X
90 450 14.17 14.17 240.94 459.21 A
7 X
90 450 14.17 14.17 269.29 515.91 G
0 X
90 450 14.17 14.17 269.29 515.91 A
0 12 Q
(A) 209.76 513.07 T
(B) 266.46 513.07 T
(C) 238.11 456.38 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 341 1433 a(\(a\))46 b([4\045])35 b(What)g(probabilities)c
(and)i(conditional)f(probabilities)f(should)h(b)s(e)i(sp)s(eci\014ed)e
(for)i(this)502 1546 y(net)m(w)m(ork?)52 b(What)34 b(is)f(the)h(minim)m
(um)d(total)j(n)m(um)m(b)s(er)f(of)h(parameters)g(\(probabilit)m(y)d(v)
-5 b(alues\))502 1659 y(needed?)336 4167 y(\(b\))45 b([2\045])36
b(Supp)s(ose)d(it)i(is)f(no)m(w)h(kno)m(wn)g(that)h Fh(C)41
b Fj(is)34 b(indep)s(enden)m(t)f(of)i Fh(A)h Fj(giv)m(en)f
Fh(B)5 b Fj(.)54 b(Ho)m(w)36 b(should)502 4280 y(this)30
b(piece)g(of)g(kno)m(wledge)h(c)m(hange)g(the)g(net)m(w)m(ork)g
(structure?)1890 5841 y(7)p eop
%%Page: 8 9
8 8 bop 346 399 a Fj(\(c\))46 b([4\045])37 b(What)g(probabilities)c
(and)i(conditional)g(probabilities)e(should)h(b)s(e)h(sp)s(eci\014ed)g
(for)h(the)502 511 y(net)m(w)m(ork)k(resulting)c(from)i(\(b\)?)65
b(What)39 b(is)f(the)h(minim)m(um)c(total)40 b(n)m(um)m(b)s(er)d(of)i
(parameters)502 624 y(\(probabilit)m(y)29 b(v)-5 b(alues\))30
b(needed?)1890 5841 y(8)p eop
%%Page: 9 10
9 9 bop 186 399 a Fj(5.)46 b(\(20\045\))32 b Fi(Decision)i(Netw)n(orks)
302 549 y Fj(Consider)29 b(the)h(follo)m(wing)f(t)m(w)m(o)j(decision)d
(net)m(w)m(orks)i(where)f(all)f(v)-5 b(ariables)29 b(are)i(binary:)981
1375 y @beginspecial 141 @llx 480 @lly 425 @urx 588 @ury
850 @rhi @setspecial
%%BeginDocument: dnets.eps
% 00030000000000000180000000000000000000000000000000000c000000000000060000
% 003cf800000000001e7c00000000000000000000000000000000f3e0000000000079f000
% 00c004000000000060020000000000000000000000000000000300100000000001800800
% 030003000000000180018000000000000000000000000000000c000c0000000006000600
% 040000800000000200004000000000000000000000000000001000020000000008000100
% 080000400000000400002000000000000000000000000000002000010000000010000080
% 100000200000000800001000000000000000000000000000004000008000000020000040
% 100000100000000800000800000000000000000000000000004000004000000020000020
% 200000100000001000000800000000000000000000000000008000004000000040000020
% 200000080000001000000400000000000000000000000000008000002000000040000010
% 4003e0080000002001f0040000000000000000000000000001000f80200000008007c010
% 400630080000002003180400000000000000000000000000010018c020000000800c6010
% 40041008038000200200040000000000000000000000000001001040200e000080080010
% 400410043f800020020002000000000000000000000000000100104010fe000080080008
% 80041007ff800040020002000000000000000000000000000200104017fe000100080008
% 80041007ffffffc002000200000000000000000000000000020010401fffffff00080008
% 40062004ff800020030002000000000000000000000000000100188011fe0000800c0008
% 4003c00c1f80002001f0060000000000000000000000000001000f00303e00008007c018
% 400000080380002000000400000000000000000000000000010000002006000080000010
% 400000080000002000000400000000000000000000000000010000002000000080000010
% 400000080000002000000400000000000000000000000000010000002000000080000010
% 200000100000001000000800000000000000000000000000008000004000000040000020
% 100000100000000800000800000000000000000000000000004000004000000020000020
% 100000200000000800001000000000000000000000000000004000008000000020000040
% 080000400000000400002000000000000000000000000000002000010000000010000080
% 040000800000000200004000000000000000000000000000001000020000000008000100
% 020001000000000100008000000000000000000000000000000800040000000004000200
% 0180060000000000c0030000000000000000000000000000000600180000000003000c00
% 00787800000000003c3c00000000000000000000000000000001e1e00000000000f0f000
% 0007c0000000000003e0000000000000000000000000000000001f0000000000000f8000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000100000000000000800000000000000000000000000000000000000000000000020000
% 000fc000000000000fe000000000000000000000000000000000000000000000001f8000
% 000fc000000000000fe000000000000000000000000000000000000000000000001f8000
% 000fc000000000000fe000000000000000000000000000000000000000000000001f8000
% 000780000000000007c000000000000000000000000000000000000000000000000f0000
% 000780000000000007c000000000000000000000000000000000000000000000000f0000
% 000780000000000007c000000000000000000000000000000000000000000000000f0000
% 000780000000000003c000000000000000000000000000000000000000000000000f0000
% 000300000000000003800000000000000000000000000000000000000000000000060000
% 000300000000000003800000000000000000000000000000000000000000000000060000
% 000300000000000001800000000000000000000000000000000000000000000000060000
% 000300000000000001800000000000000000000000000000000000000000000000060000
% 000000000000000001000000000000000000000000000000000000000000000000000000
% 7ffffffc000000000180000000000000000000000000000001fffffff800000000060000
% 400000040000000002400000000000000000000000000000010000000800000000090000
% 400000040000000004200000000000000000000000000000010000000800000000108000
% 400000040000000008100000000000000000000000000000010000000800000000204000
% 400000040000000010080000000000000000000000000000010000000800000000402000
% 400000040000000020040000000000000000000000000000010000000800000000801000
% 4000000400000000c0020000000000000000000000000000010000000800000001000800
% 400000040000000100010000000000000000000000000000010000000800000002000400
% 400000040000000200008000000000000000000000000000010000000800000004000200
% 4007c004000000040318400000000000000000000000000001001f0008000000080c6100
% 400420040000000802082000000000000000000000000000010010800800000010082080
% 4004100400038010020810000000000000000000000000000100104008000e0020082040
% 400410040003f820020808000000000000000000000000000100104008000fe040082020
% 400410040003ff40020804000000000000000000000000000100104008000ffe80082010
% 40041007ffffff4002080400000000000000000000000000010010400ffffffe80082010
% 400420040003f820031008000000000000000000000000000100108008000fe0400c4020
% 4007c0040003801001f0100000000000000000000000000001001f0008000e002007c040
% 400000040000000800002000000000000000000000000000010000000800000010000080
% 400000040000000400004000000000000000000000000000010000000800000008000100
% 400000040000000200008000000000000000000000000000010000000800000004000200
% 400000040000000180010000000000000000000000000000010000000800000002000400
% 400000040000000040020000000000000000000000000000010000000800000001000800
% 400000040000000020040000000000000000000000000000010000000800000000801000
% 400000040000000010080000000000000000000000000000010000000800000000402000
% 400000040000000008100000000000000000000000000000010000000800000000204000
% 400000040000000004200000000000000000000000000000010000000800000000108000
% 400000040000000002400000000000000000000000000000010000000800000000090000
% 400000040000000001800000000000000000000000000000010000000800000000060000
% 7ffffffc000000000000000000000000000000000000000001fffffff800000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000
% 000038c00000010060000000000000000000000000000000000000e30000000403800000
% 000018404000010020000000000000000000000000000000000000610100000406400000
% 00001440c000110020000000000000000000000000000000000000510300004400400000
% 0000165ec9279d7020000000000000000000000000000000000000593f249e75c0400000
% 0000137e49285180200000000000000000000000000000000000004d7d24a14600800000
% 000011f047c851c02000000000000000000000000000000000000047611f214701800000
% 000010f246cc51402000000000000000000000000000000000000043651b314500000000
% 0000185c648799e0700000000000000000000000000000000000006139921e6783e00000
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		}{ }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 595.28 841.89 0 1 1 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
595.28 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.89 519.21 198.43 515.91 186.89 512.6 186.89 515.91 4 Y
0 X
0 0 0 1 0 0 0 K
V
170.08 515.91 186.89 515.91 2 L
0.5 H
2 Z
N
181.61 569.29 170.08 572.6 181.61 575.91 181.61 572.6 4 Y
V
198.43 572.6 181.61 572.6 2 L
N
159.21 541.61 155.9 530.08 152.6 541.61 155.9 541.61 4 Y
V
155.9 558.43 155.9 541.61 2 L
N
215.91 541.61 212.6 530.08 209.29 541.61 212.6 541.61 4 Y
V
212.6 558.43 212.6 541.61 2 L
N
7 X
90 450 14.17 14.17 155.9 572.6 G
1 H
0 X
90 450 14.17 14.17 155.9 572.6 A
7 X
90 450 14.17 14.17 212.6 572.6 G
0 X
90 450 14.17 14.17 212.6 572.6 A
141.73 501.73 170.08 530.08 R
7 X
V
0 X
N
212.6 530.08 198.43 515.91 212.6 501.73 226.77 515.91 4 Y
7 X
V
0 X
N
385.32 519.21 396.85 515.91 385.32 512.6 385.32 515.91 4 Y
V
368.5 515.91 385.32 515.91 2 L
0.5 H
N
380.04 569.29 368.5 572.6 380.04 575.91 380.04 572.6 4 Y
V
396.85 572.6 380.04 572.6 2 L
N
414.33 541.61 411.02 530.08 407.72 541.61 411.02 541.61 4 Y
V
411.02 558.43 411.02 541.61 2 L
N
7 X
90 450 14.17 14.17 354.33 572.6 G
1 H
0 X
90 450 14.17 14.17 354.33 572.6 A
7 X
90 450 14.17 14.17 411.02 572.6 G
0 X
90 450 14.17 14.17 411.02 572.6 A
340.16 501.73 368.5 530.08 R
7 X
V
0 X
N
411.02 530.08 396.85 515.91 411.02 501.73 425.2 515.91 4 Y
7 X
V
0 X
N
0 12 Q
(O) 153.07 569.77 T
(C) 209.76 569.77 T
(D) 153.07 513.07 T
(U) 209.76 513.07 T
(O) 351.49 569.77 T
(C) 408.19 569.77 T
(D) 351.49 513.07 T
(U) 408.19 513.07 T
(Network 1) 158.74 479.06 T
(Network 2) 357.17 479.06 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument
 @endspecial 302 1607 a(The)f(probabilities)d(are)k(giv)m(en)f(b)m(y)
1787 1811 y Ff(Pr)10 b Fj(\()p Fh(C)32 b Fj(=)25 b(0\))84
b(=)f(0)p Fh(:)p Fj(5)1787 1949 y Ff(Pr)10 b Fj(\()p
Fh(C)32 b Fj(=)25 b(1\))84 b(=)f(0)p Fh(:)p Fj(5)1493
2087 y Ff(Pr)10 b Fj(\()p Fh(O)29 b Fj(=)c(0)15 b Fe(j)g
Fh(C)32 b Fj(=)25 b(0\))84 b(=)f(1)1493 2225 y Ff(Pr)10
b Fj(\()p Fh(O)29 b Fj(=)c(1)15 b Fe(j)g Fh(C)32 b Fj(=)25
b(1\))84 b(=)f(1)302 2429 y(and)30 b(the)h(utilit)m(y)d(function)h(is)h
(giv)m(en)g(b)m(y)1561 2633 y Fh(f)10 b Fj(\()p Fh(D)28
b Fj(=)d(0)p Fh(;)15 b(C)32 b Fj(=)25 b(0\))84 b(=)f(1)1561
2771 y Fh(f)10 b Fj(\()p Fh(D)28 b Fj(=)d(0)p Fh(;)15
b(C)32 b Fj(=)25 b(1\))84 b(=)f(0)1561 2909 y Fh(f)10
b Fj(\()p Fh(D)28 b Fj(=)d(1)p Fh(;)15 b(C)32 b Fj(=)25
b(0\))84 b(=)f(0)1561 3047 y Fh(f)10 b Fj(\()p Fh(D)28
b Fj(=)d(1)p Fh(;)15 b(C)32 b Fj(=)25 b(1\))84 b(=)f(2)341
3259 y(\(a\))46 b([10\045])22 b(F)-8 b(or)22 b(net)m(w)m(ork)g(1,)i
(\(i\))d(list)e(all)h(the)i(p)s(ossible)c(decision)i(rules;)j(\(ii\))d
(compute)h(the)h(exp)s(ected)502 3372 y(utilit)m(y)29
b(for)h(eac)m(h)i(p)s(ossible)c(decision)h(rule;)g(and)h(\(iii\))e
(\014nd)h(the)i(optimal)e(decision)g(rule.)1890 5841
y(9)p eop
%%Page: 10 11
10 10 bop 502 399 a Fj(\(a\))32 b([con)m(t'd])1867 5841
y(10)p eop
%%Page: 11 12
11 11 bop 336 399 a Fj(\(b\))45 b([6\045])31 b(Rep)s(eat)g(\(a\))h(for)
e(net)m(w)m(ork)h(2.)1867 5841 y(11)p eop
%%Page: 12 13
12 12 bop 346 399 a Fj(\(c\))46 b([4\045])28 b(Compare)f(the)g(optimal)
f(exp)s(ected)h(utilities)d(\(exp)s(ected)k(utilities)c(of)j(optimal)f
(decision)502 511 y(rules\))k(of)g(the)h(t)m(w)m(o)g(net)m(w)m(orks.)42
b(Whic)m(h)30 b(one)g(is)g(larger?)40 b(Giv)m(e)31 b(in)m(tuitiv)m(e)e
(explanations.)1867 5841 y(12)p eop
%%Page: 13 14
13 13 bop 186 399 a Fj(6.)46 b(\(15\045\))32 b Fi(Decision)i(Trees)302
549 y Fj(Consider)29 b(the)h(follo)m(wing)f(set)i(of)g(14)g(training)e
(examples)g(with)h(\014v)m(e)g(attributes:)p 729 690
2595 4 v 727 803 4 113 v 1667 769 a(A)m(ttributes)p 3014
803 V 988 w(Class)p 3322 803 V 729 806 2287 4 v 727 916
4 113 v 779 882 a(Studen)m(t)99 b(Outlo)s(ok)g(T)-8 b(emp)s(erature)99
b(Humidit)m(y)f(Windy)p 3014 916 V 3322 916 V 729 919
2595 4 v 727 1032 4 113 v 863 998 a(ada)230 b(sunn)m(y)334
b(hot)391 b(high)248 b(false)p 3014 1032 V 215 w(N)p
3322 1032 V 727 1145 V 829 1111 a(b)s(ett)m(y)196 b(sunn)m(y)334
b(hot)391 b(high)254 b(true)p 3014 1145 V 222 w(N)p 3322
1145 V 727 1258 V 799 1224 a(c)m(harles)120 b(o)m(v)m(ercast)293
b(hot)391 b(high)248 b(false)p 3014 1258 V 218 w(P)p
3322 1258 V 727 1371 V 826 1337 a(da)m(vid)228 b(rain)349
b(mild)366 b(high)248 b(false)p 3014 1371 V 218 w(P)p
3322 1371 V 727 1484 V 870 1450 a(ev)-5 b(a)274 b(rain)358
b(co)s(ol)324 b(normal)195 b(false)p 3014 1484 V 218
w(P)p 3322 1484 V 727 1597 V 857 1563 a(fred)260 b(rain)358
b(co)s(ol)324 b(normal)201 b(true)p 3014 1597 V 222 w(N)p
3322 1597 V 727 1710 V 847 1676 a(gary)169 b(o)m(v)m(ercast)279
b(co)s(ol)324 b(normal)201 b(true)p 3014 1710 V 225 w(P)p
3322 1710 V 727 1823 V 831 1789 a(helen)195 b(sunn)m(y)311
b(mild)366 b(high)248 b(false)p 3014 1823 V 215 w(N)p
3322 1823 V 727 1935 V 874 1902 a(ivy)238 b(sunn)m(y)320
b(co)s(ol)k(normal)195 b(false)p 3014 1935 V 218 w(P)p
3322 1935 V 727 2048 V 855 2015 a(jac)m(k)259 b(rain)349
b(mild)313 b(normal)195 b(false)p 3014 2048 V 218 w(P)p
3322 2048 V 727 2161 V 817 2127 a(k)m(elvin)181 b(sunn)m(y)311
b(mild)i(normal)201 b(true)p 3014 2161 V 225 w(P)p 3322
2161 V 727 2274 V 872 2240 a(lily)192 b(o)m(v)m(ercast)270
b(mild)366 b(high)254 b(true)p 3014 2274 V 225 w(P)p
3322 2274 V 727 2387 V 832 2353 a(mary)153 b(o)m(v)m(ercast)293
b(hot)338 b(normal)195 b(false)p 3014 2387 V 218 w(P)p
3322 2387 V 727 2500 V 817 2466 a(nancy)220 b(rain)349
b(mild)366 b(high)254 b(true)p 3014 2500 V 222 w(N)p
3322 2500 V 729 2503 2595 4 v 341 2679 a(\(a\))46 b([5\045])26
b(Compute)e(the)h(information)e(gain)i(for)g(eac)m(h)h(of)f(the)g
(\014v)m(e)g(attributes.)38 b(Using)24 b(this)g(infor-)502
2792 y(mation)29 b(gain)h(criterion,)e(\014nd)g(the)i(most)g(relev)-5
b(an)m(t)30 b(attribute)f(that)h(splits)d(the)j(14)g(examples)502
2905 y(according)e(to)h(their)f(attribute)f(v)-5 b(alues.)40
b(\(Note)30 b(that)e(y)m(ou)h(are)g(not)f(required)e(to)j(expand)f(the)
502 3018 y(en)m(tire)j(decision)e(tree)i(but)e(just)h(one)h(lev)m(el)f
(from)g(the)g(ro)s(ot)h(no)s(de.\))1867 5841 y(13)p eop
%%Page: 14 15
14 14 bop 336 399 a Fj(\(b\))45 b([2\045])26 b(F)-8 b(rom)26
b(the)f(result)f(of)h(\(a\),)j(discuss)23 b(the)i(limitation)e(of)i
(the)h(information)d(gain)i(criterion.)346 2075 y(\(c\))46
b([8\045])29 b(Let)f(us)g(no)m(w)g(de\014ne)f(a)h(di\013eren)m(t)g
(criterion)f(for)g(c)m(ho)s(osing)h(attributes.)40 b(The)27
b(new)h(crite-)502 2188 y(rion,)j(called)f Ff(gain)k(r)-5
b(atio)p Fj(,)33 b(of)e(an)g(attribute)g Fh(A)h Fj(is)e(de\014ned)g(as)
h(the)h(ratio)f(of)g(the)h(information)502 2301 y(gain)d(of)g
Fh(A)g Fj(to)g(its)f(a)m(v)m(erage)k(information)27 b(con)m(ten)m(t.)42
b(\(Recall)29 b(that)g(the)g(a)m(v)m(erage)j(information)502
2414 y(con)m(ten)m(t)j(of)f(attribute)f Fh(A)g Fj(is)f
Fd(de\014ned)i Fj(in)e(class)h(as)g Fe(\000)2404 2349
y Fc(P)2492 2376 y Fb(m)2492 2437 y(i)p Fa(=1)2625 2414
y Ff(Pr)10 b Fj(\()p Fh(v)2814 2428 y Fb(i)2842 2414
y Fj(\))15 b(log)3010 2435 y Fa(2)3065 2414 y Ff(Pr)10
b Fj(\()p Fh(v)3254 2428 y Fb(i)3282 2414 y Fj(\))34
b(where)f Fh(v)3661 2428 y Fb(i)3689 2414 y Fj('s)502
2526 y(are)d(the)f(p)s(ossible)d(v)-5 b(alues)28 b(of)h
Fh(A)g Fj(with)f(corresp)s(onding)f(o)s(ccurrence)i(probabilities)d
Ff(Pr)9 b Fj(\()p Fh(v)3564 2540 y Fb(i)3593 2526 y Fj(\)'s.\))502
2639 y(Rep)s(eat)22 b(part)f(\(a\))h(to)g(expand)f(one)h(lev)m(el)e
(from)h(the)h(ro)s(ot)f(no)s(de)g(using)f(the)h(gain)g(ratio)g
(criterion)502 2752 y(instead)30 b(of)g(the)h(information)e(gain)h
(criterion.)1867 5841 y(14)p eop
%%Page: 15 16
15 15 bop 186 399 a Fj(7.)46 b(\(15\045\))32 b Fi(Per)n(ceptr)n(ons)341
611 y Fj(\(a\))46 b([6\045])31 b(Consider)e(the)h(follo)m(wing)f(four)h
(training)f(examples:)p 1755 699 743 4 v 1753 812 4 113
v 1804 778 a Fh(x)1856 792 y Fa(1)2020 778 y Fh(x)2072
792 y Fa(2)2211 778 y Fh(x)2263 792 y Fa(3)p 2351 812
V 2415 778 a Fh(t)p 2496 812 V 1755 816 743 4 v 1753
928 4 113 v 1850 895 a Fj(1)101 b Fe(\000)p Fj(1)145
b(3)p 2351 928 V 100 w(1)p 2496 928 V 1753 1041 V 1850
1008 a(1)171 b(0)146 b(3)p 2351 1041 V 100 w(0)p 2496
1041 V 1753 1154 V 1850 1120 a(2)101 b Fe(\000)p Fj(1)145
b(2)p 2351 1154 V 100 w(0)p 2496 1154 V 1753 1267 V 1850
1233 a(2)171 b(0)146 b(2)p 2351 1267 V 100 w(1)p 2496
1267 V 1755 1271 743 4 v 502 1396 a(Sho)m(w)31 b(that)g(there)g(do)s
(es)f(not)h(exist)g(a)g(simple)d(p)s(erceptron)i(that)i(can)f(linearly)
d(separate)k(the)502 1509 y(four)e(examples)g(in)f(3-dimensional)f
(space)j(in)m(to)f(t)m(w)m(o)i(classes)f(correctly)-8
b(.)1867 5841 y(15)p eop
%%Page: 16 17
16 16 bop 336 399 a Fj(\(b\))45 b([9\045])31 b(Consider)e(the)h(follo)m
(wing)f(four)h(training)f(examples)g(whic)m(h)h(are)g(lineary)f
(separable:)p 1634 487 984 4 v 1632 600 4 113 v 1684
566 a Fh(x)1736 580 y Fa(1)1900 566 y Fh(x)1952 580 y
Fa(2)2116 566 y Fh(x)2168 580 y Fa(3)2332 566 y Fh(x)2384
580 y Fa(4)p 2471 600 V 2535 566 a Fh(t)p 2616 600 V
1634 603 984 4 v 1632 716 4 113 v 1730 682 a Fj(1)171
b(1)100 b Fe(\000)p Fj(2)g Fe(\000)p Fj(4)p 2471 716
V 100 w(1)p 2616 716 V 1632 829 V 1730 795 a(2)g Fe(\000)p
Fj(1)171 b(2)g(3)p 2471 829 V 100 w(0)p 2616 829 V 1632
942 V 1730 908 a(5)g(2)100 b Fe(\000)p Fj(5)171 b(0)p
2471 942 V 100 w(0)p 2616 942 V 1632 1055 V 1730 1021
a(0)g(2)g(1)g(2)p 2471 1055 V 100 w(1)p 2616 1055 V 1634
1058 984 4 v 502 1183 a(A)35 b(simple)d(p)s(erceptron)h(is)h(trained)f
(to)i(\014nd)e(a)h(solution.)51 b(Supp)s(ose)33 b(all)g(the)i(w)m(eigh)
m(ts)f(of)h(the)502 1296 y(p)s(erceptron)24 b(are)g(initialized)d(to)k
(0.)39 b(Sho)m(w)24 b(the)h(execution)f(trace)h(of)g(the)f(p)s
(erceptron)g(learning)502 1409 y(algorithm)30 b(b)m(y)g(listing)e(the)j
(sequence)f(of)h(w)m(eigh)m(t)g(c)m(hanges)g(un)m(til)e(a)i(solution)e
(is)g(found.)1867 5841 y(16)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
