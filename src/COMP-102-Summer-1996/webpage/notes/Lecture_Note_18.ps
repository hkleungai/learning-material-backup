%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 29 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Times-Italic FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
8 0 /Palatino-Bold FMFONTDEFINE
9 0 /Palatino-Roman FMFONTDEFINE
10 0 /Courier FMFONTDEFINE
11 0 /Courier-BoldOblique FMFONTDEFINE
12 0 /Courier-Oblique FMFONTDEFINE
13 1 /ZapfDingbats FMFONTDEFINE
14 0 /Palatino-BoldItalic FMFONTDEFINE
15 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 1) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Analysis of Algorithm Ef\336ciency) 163.81 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Compare) 89.65 683.62 T
3 F
(ef\336ciency) 152.13 683.62 T
2 F
( of algorithm) 219.04 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example:  Searching an ordered array of integers) 117.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 63.65 611.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(How to compare?) 89.65 611.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90.65 585.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(algorithm\325) 117.65 585.62 T
(s) 183.77 585.62 T
3 F
(execution time increases with the input size) 194.14 585.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(-) 117.65 559.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example:) 144.65 559.62 T
4 F
(array size) 213.63 559.62 T
2 F
( for Searching) 276.6 559.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90.65 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dif\336cult to get a precise measure) 117.65 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(o) 90.65 507.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(approximate) 117.65 507.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(-) 117.65 481.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(largest contributing factor) 144.65 481.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 16 Q
(log n     n     2n     n*n) 163.25 352.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(1) 185.76 319.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 257.76 319.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 329.76 319.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 401.76 319.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 185.76 295.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 257.76 295.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 329.76 295.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 397.86 295.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 185.76 271.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 257.76 271.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 325.86 271.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 397.86 271.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 185.76 247.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 253.86 247.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 325.86 247.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 393.97 247.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 185.76 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 253.86 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 325.86 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1024) 390.08 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 185.76 199.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 253.86 199.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 321.97 199.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4096) 390.08 199.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 185.76 175.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 249.97 175.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 321.97 175.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16384) 386.19 175.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 185.76 151.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(256) 249.97 151.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(512) 321.97 151.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65536) 386.19 151.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
225.65 335.95 225.65 142.7 2 L
V
N
297.65 335.95 297.65 142.7 2 L
V
N
369.65 335.95 369.65 142.7 2 L
V
N
153.65 334.95 441.65 334.95 2 L
V
2 H
N
153.65 310.95 441.65 310.95 2 L
V
0.5 H
N
153.65 286.95 441.65 286.95 2 L
V
N
153.65 262.95 441.65 262.95 2 L
V
N
153.65 238.95 441.65 238.95 2 L
V
N
153.65 214.95 441.65 214.95 2 L
V
N
153.65 190.95 441.65 190.95 2 L
V
N
153.65 166.95 441.65 166.95 2 L
V
N
153.65 142.95 441.65 142.95 2 L
V
N
63.65 96.95 531.65 744.95 C
0 0 0 1 0 0 0 K
69.65 437.95 525.65 476.95 C
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(2) 261.11 452.95 T
6 F
(n) 268.94 452.95 T
0 12 Q
(2) 276.47 461.8 T
0 14 Q
(5) 297.36 452.95 T
6 F
(n) 305.19 452.95 T
0 F
(7) 326.18 452.95 T
(\320) 315.68 452.95 T
(+) 285.97 452.95 T
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
69.65 392.95 525.65 437.95 C
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(B) 227.12 410.95 T
(i) 236.46 410.95 T
(g) 240.35 410.95 T
(-) 247.35 410.95 T
(O) 252.01 410.95 T
(n) 265.62 410.95 T
(o) 272.62 410.95 T
(t) 279.62 410.95 T
(a) 283.51 410.95 T
(t) 289.73 410.95 T
(i) 293.62 410.95 T
(o) 297.51 410.95 T
(n) 304.51 410.95 T
(:) 311.51 410.95 T
6 F
(O) 326.73 410.95 T
(n) 346 410.95 T
0 12 Q
(2) 353.54 419.8 T
7 14 Q
(\350) 337.66 408.1 T
(\370) 360.18 408.1 T
(\346) 337.66 420.1 T
(\366) 360.18 420.1 T
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 2) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 22 Q
(The Complexity of the Search Problem) 103.01 730.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 20 Q
(\245) 63.65 679.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 88.85 679.62 T
(e can describe the) 107.01 679.62 T
0 0 0 1 0 0 0 K
302.25 676.8 263.37 676.8 2 L
V
0.76 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( size) 263.37 679.62 T
( of a sear) 302.25 679.62 T
(ching pr) 380.43 679.62 T
(oblem) 454.09 679.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(by the) 88.85 653.62 T
0 0 0 1 0 0 0 K
449.29 650.8 148.77 650.8 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(number of comparison operations) 148.77 653.62 T
( needed) 449.29 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to \336nd the one we want.) 88.85 627.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 63.65 571.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is also called the) 88.85 571.62 T
0 0 0 1 0 0 0 K
380.29 568.8 281.63 568.8 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(complexity) 281.63 571.62 T
( of the sear) 380.29 571.62 T
(ching) 476.21 571.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(algorithm.) 88.85 545.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 63.65 489.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ther) 88.85 489.62 T
(e ar) 129.87 489.62 T
(e thr) 161.99 489.62 T
(ee cases to be consider) 202.27 489.62 T
(ed:) 400.01 489.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 18 Q
(\245) 88.85 452.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Best-case) 106.85 452.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 88.85 425.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 106.85 425.95 T
(orst-case) 123.19 425.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 88.85 398.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A) 106.85 398.95 T
(verage-case) 119.2 398.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 3) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Linear Search) 238.61 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Problem De\336nition:) 63.65 701.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.62 (Search an) 63.65 669.62 P
4 F
-0.62 ( ordered) 127.85 669.62 P
2 F
-0.62 ( array of integers for a value and return its index if the) 180.09 669.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value is found.  Otherwise, return -1.) 63.65 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(// Searches an) 63.65 600.29 T
11 F
(ordered) 207.65 600.29 T
10 F
( array of integers) 274.85 600.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int lsearch\050int data[], // input: array) 63.65 582.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            int size,   // input: array size) 63.65 564.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            int value   // input: value to f) 63.65 546.29 T
(ind) 486.05 546.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            \051    // output: index if found) 63.65 528.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                 //         otherwise return -1) 63.65 510.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 63.65 492.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     int index = 0;    // initialize index to 0) 63.65 474.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     while \050\050data[index]) 63.65 438.29 T
5 F
(<) 303.65 438.29 T
10 F
( value\051 &&) 313.25 438.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(            \050index < size\051\051) 63.65 420.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          index++;) 63.65 402.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     if \050data[index] != value\051) 63.65 366.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          return -1;) 63.65 348.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     else) 63.65 330.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          return index;) 63.65 312.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // search) 63.65 294.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 229.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.37 (Given an array of size n, what is the) 89.65 229.62 P
4 F
1.37 (average) 340.54 229.62 P
2 F
1.37 (  number of elements) 390.04 229.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the algorithm has to examine?) 90.65 213.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 4) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Binary Search) 237.86 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Same Problem De\336nition:) 63.65 701.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.62 (Search an) 63.65 669.62 P
4 F
-0.62 ( ordered) 127.85 669.62 P
2 F
-0.62 ( array of integers for a value and return its index if the) 180.09 669.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value is found.  Otherwise, return -1.) 63.65 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
63.65 375.95 531.65 614.95 C
0 0 0 1 0 0 0 K
133.4 538.95 421.4 574.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
169.4 574.95 169.4 538.95 2 L
N
205.4 574.95 205.4 538.95 2 L
N
241.4 574.95 241.4 538.95 2 L
N
277.4 574.95 277.4 538.95 2 L
N
313.4 574.95 313.4 538.95 2 L
N
349.4 574.95 349.4 538.95 2 L
N
385.4 574.95 385.4 538.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(7   9  10  17  30  37  46 60) 142.4 556.95 T
(0   1  2   3   4  5   6   7) 151.4 583.95 T
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
63.65 118.95 531.65 357.95 C
0 0 0 1 0 0 0 K
133.4 281.95 421.4 317.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
169.4 317.95 169.4 281.95 2 L
N
205.4 317.95 205.4 281.95 2 L
N
241.4 317.95 241.4 281.95 2 L
N
277.4 317.95 277.4 281.95 2 L
N
313.4 317.95 313.4 281.95 2 L
N
349.4 317.95 349.4 281.95 2 L
N
385.4 317.95 385.4 281.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(7   9  10  17  30  37  46 60) 142.4 299.95 T
(0   1  2   3   4  5   6   7) 151.4 326.95 T
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 5) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Binary Search \050Cont\325d\051) 202.08 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 20 Q
(\245) 63.65 679.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binary sear) 88.85 679.62 T
(ch is based on the) 188.15 679.62 T
0 0 0 1 0 0 0 K
527.61 676.8 349.61 676.8 2 L
V
0.76 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(divide and conquer) 349.61 679.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
157.29 650.8 88.85 650.8 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(concept) 88.85 653.62 T
( and works as follows:) 157.29 653.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 18 Q
(\245) 88.85 616.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Start by looking at the middle component.) 106.85 616.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( -) 114.05 589.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.58 (If the value it holds is too high, go to the middle of) 132.05 589.95 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the bottom half) 132.05 568.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.) 253.96 568.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( -) 114.05 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If the value it holds is too low) 132.05 541.95 T
(, go to the middle of) 366.55 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the upper half) 132.05 520.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.) 244.94 520.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 88.85 493.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Repeat this \324split the r) 106.85 493.95 T
(emainder) 280.57 493.95 T
(\325 until you \336nd the) 357.86 493.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value you want, or decide that it does not exist.) 106.85 472.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Solution Outline \050Algorithm\051:) 63.65 424.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(Set lower and upper bound;) 63.65 393.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (While) 63.65 363.29 P
12 F
-0.27 (value) 120.98 363.29 P
10 F
-0.27 ( not found and more to search do begin) 168.98 363.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Compute subscript of middle element) 81.65 333.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with repect to lower and uppper bound;) 99.65 318.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If middle element equals) 81.65 288.29 T
12 F
(value) 321.65 288.29 T
10 F
(\050found\051 then) 379.25 288.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return middle element position) 99.65 273.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else if lower is greater than upper bound then) 81.65 243.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050no more to search\051) 99.65 228.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return position = -1) 99.65 213.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else if) 81.65 183.29 T
12 F
(value) 158.45 183.29 T
10 F
( is less than middle element then) 206.45 183.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set upper bound to middle element position-1) 99.65 168.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Else) 81.65 153.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set lower bound to middle element position+1) 99.65 138.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(End;) 63.65 108.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 6) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Binary Search \050Cont\325d\051) 202.08 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(// Searches an ordered array of integers) 63.65 706.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int binary\050int data[], // input: array) 63.65 690.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           int size,   // input: array size) 63.65 674.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           int value   // input: value to f) 63.65 658.29 T
(ind) 476.45 658.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(           \051    // output: index if found) 63.65 642.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(                //         otherwise return -1) 63.65 626.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 63.65 610.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     enum state {searching,found,absent} status;) 63.65 594.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     int lower, middle, upper, index;) 63.65 578.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     status = searching;) 63.65 546.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     lower = 0;) 63.65 530.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     upper = size - 1;) 63.65 514.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     index = -1;) 63.65 498.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     while \050status == searching\051 {) 63.65 466.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          middle = \050lower + upper\051 / 2;) 63.65 450.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          if \050data[middle] == value\051 {) 63.65 434.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               status = found;) 63.65 418.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               index = middle;) 63.65 402.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else if \050lower > upper\051 {) 63.65 386.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               status = absent;) 63.65 370.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else if \050value < data[middle]\051 {) 63.65 354.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               upper = middle - 1;) 63.65 338.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          } else {) 63.65 322.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(               lower = middle + 1;) 63.65 306.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(          }) 63.65 290.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     }) 63.65 274.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     return index;) 63.65 258.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} // binary) 63.65 242.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 179.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.37 (Given an array of size n, what is the) 89.65 179.62 P
4 F
1.37 (average) 340.54 179.62 P
2 F
1.37 (  number of elements) 390.04 179.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the algorithm has to examine?) 90.65 163.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 7) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 22 Q
(The Struct T) 217.98 730.29 T
(ype) 340.65 730.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 678.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Scienti\336c problems tend to revolve around just) 88.85 678.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two data types: real and integer) 88.85 652.29 T
(. For such) 363.19 652.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(application arrays work well because they carry) 88.85 626.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instants of) 88.85 600.29 T
0 0 0 1 0 0 0 K
307.62 597.89 185.41 597.89 2 L
V
1.08 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(homogeneous) 185.41 600.29 T
( \050same\051 type of data.) 307.62 600.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 548.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(For non-scienti\336c problems, special kinds of) 88.85 548.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(structure are required that use) 88.85 522.29 T
0 0 0 1 0 0 0 K
482.89 519.89 355.82 519.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(heterogeneous) 355.82 522.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050dif) 88.85 496.29 T
(ferent types\051 types of data. These dif) 120.22 496.29 T
(ferent) 441.79 496.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types of data can be related and are packed) 88.85 470.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(together) 88.85 444.29 T
(.) 159.73 444.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 392.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(V) 88.85 392.29 T
(ery often, arrays of structs are used together to) 102.29 392.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(take advantage of both arrays and structs.) 88.85 366.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 8) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 22 Q
(What is a) 192.31 730.29 T
14 F
(struct) 290.67 730.29 T
8 F
( T) 348.12 730.29 T
(ype) 366.31 730.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 678.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(struct) 88.85 678.29 T
0 F
( is a data type that can have) 138.96 678.29 T
0 0 0 1 0 0 0 K
411.46 675.89 387.01 675.89 2 L
V
1.08 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dif) 387.01 678.29 T
0 0 0 1 0 0 0 K
462.36 675.89 411.06 675.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ferent) 411.06 678.29 T
( data) 462.36 678.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types in it.) 88.85 652.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 600.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.53 (The values in a) 88.85 600.29 P
6 F
-0.53 (struct) 226.02 600.29 P
0 F
-0.53 ( type can be of dif) 276.13 600.29 P
-0.53 (ferent type) 432.53 600.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(- basic or enumerated. Therefore, a struct is) 88.85 574.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
215.92 545.89 88.85 545.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(heterogeneous) 88.85 548.29 T
( in that it can be composed of) 215.92 548.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dif) 88.85 522.29 T
(ferent kinds of values. In contrast, array is) 112.89 522.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
211.06 493.89 88.85 493.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.97 (homogeneous) 88.85 496.29 P
-0.97 ( since it can contain only one type of) 211.06 496.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values.) 88.85 470.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 418.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(A struct type is often called) 88.85 418.29 T
0 0 0 1 0 0 0 K
393.11 415.89 336.92 415.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(record) 336.92 418.29 T
( in database) 393.11 418.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applications.) 88.85 392.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 340.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Individual components of a struct type are called) 88.85 340.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
169.5 311.89 88.85 311.89 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(members) 88.85 314.29 T
(.) 169.5 314.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 262.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(members can be of dif) 88.85 262.29 T
(ferent types \050simple, array) 285.18 262.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or struct\051) 88.85 236.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(*) 63.65 184.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(A struct is named as a whole and then individual) 88.85 184.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(members are named using identi\336ers.) 88.85 158.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 9) 551.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 22 Q
(Syntax of) 194.48 730.29 T
14 F
(struct) 294.71 730.29 T
9 F
(type) 357.65 730.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 16 Q
(struct) 99.65 682.29 T
10 F
( <) 157.25 682.29 T
12 F
(struct-type) 176.45 682.29 T
10 F
(>) 282.05 682.29 T
5 F
({) 301.25 682.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(<) 135.65 664.29 T
12 F
(type> <id-list>) 145.25 664.29 T
10 F
(;) 289.25 664.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245\245\245) 189.65 646.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<) 135.65 628.29 T
12 F
(type> <id-list>) 145.25 628.29 T
10 F
(;) 289.25 628.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(};) 99.65 610.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(<struct-type> <struct-variable>) 99.65 592.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 20 Q
(Example:) 63.65 550.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(struct StudentRecord {) 99.65 511.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char Name[15];) 135.65 493.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int Id;) 135.65 475.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char Department[5];) 135.65 457.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char sex;) 135.65 439.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};  // StudentRecord) 99.65 421.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.92 (StudentRecord Student1, Student2) 99.65 382.62 P
5 20 Q
-2.4 (;) 403.01 382.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(T) 63.65 341.62 T
(wo variables,) 74.47 341.62 T
6 F
(Student1) 186.11 341.62 T
0 F
( and) 256.11 341.62 T
6 F
(Student2) 294.99 341.62 T
0 F
(, of) 364.99 341.62 T
6 F
(StudentRecor) 396.65 341.62 T
(d) 503.67 341.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(type are de\336ned; each has four \336elds:) 63.65 320.62 T
6 F
(Name, Id, Depart-) 367.47 320.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment and sex) 63.65 299.62 T
0 F
(.) 168.07 299.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(These \336elds are being referred to as:) 63.65 257.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.Name,  Student2.Name,) 99.65 215.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.Id,  Student2.Id) 99.65 194.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.Department,  Student2.Department) 99.65 173.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.sex,  Student2.sex) 99.65 152.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 10) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Access to struct members) 192.08 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Using the member access operator) 89.65 683.62 T
(, a period) 311.32 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntax) 117.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(<) 117.65 630.29 T
12 F
(struct-variable) 127.25 630.29 T
10 F
(>.<) 271.25 630.29 T
12 F
(member name) 300.05 630.29 T
10 F
(>) 405.65 630.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(o) 90.65 595.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 117.65 595.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(strcpy \050Student.Name, "CHAN Tai Man"\051;) 117.65 568.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student.Id = 12345;) 117.65 550.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strcpy \050Student.Department, "COMP"\051;) 117.65 532.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student.sex = \325M\325;) 117.65 514.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cout << "The student is ";) 117.65 460.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(switch \050Student.sex\051 {) 117.65 442.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(case \325F\325: case \325f\325:) 153.65 424.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cout << "Ms. ";) 171.65 406.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(break;) 171.65 388.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(case \325M\325: case \325m\325:) 153.65 370.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cout << "Mr. ";) 171.65 352.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(break;) 171.65 334.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 117.65 316.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cout << Student.Name << endl;) 117.65 298.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 11) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(struct-to-struct Assignment) 183.35 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(both structs must be of the same type) 89.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o) 90.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 117.65 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(StudentRecord Student1, Student2;) 117.65 630.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strcpy \050Student1.Name, "CHAN Tai Man"\051;) 117.65 594.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.Id = 12345;) 117.65 576.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strcpy \050Student1.Department, "COMP"\051;) 117.65 558.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student1.sex = \325M\325;) 117.65 540.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student2 = Student1;) 117.65 504.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(o) 90.65 451.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(More Example) 117.65 451.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(StudentRecord Class[200];) 117.65 424.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strcpy \050Class[10].Name, "CHAN Tai Man"\051;) 117.65 388.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class[10].Id = 12345;) 117.65 370.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strcpy \050Class[10].Department, "COMP"\051;) 117.65 352.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class[10].sex = \325M\325;) 117.65 334.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class[0] = Class[10];) 117.65 298.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 12) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 22 Q
-0.24 (The dif) 67.46 730.29 P
-0.24 (ference between an ordinary array and) 140.77 730.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(array of structs) 223.1 708.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 96.95 531.65 744.95 C
0 0 0 1 0 0 0 K
63.65 240.95 531.65 700.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
47.9 240.95 547.4 700.95 R
7 X
0 0 0 1 0 0 0 K
V
74.9 610.95 524.9 664.95 R
V
1 H
2 Z
0 X
N
290.9 664.95 290.9 610.95 2 L
N
407.9 664.95 407.9 610.95 2 L
N
461.9 664.95 461.9 610.95 2 L
N
353.9 664.95 353.9 610.95 2 L
N
182.9 664.95 182.9 610.95 2 L
N
236.9 664.95 236.9 610.95 2 L
N
128.9 664.95 128.9 610.95 2 L
N
69.5 427.68 519.5 481.68 R
7 X
V
0 X
N
285.5 481.68 285.5 427.68 2 L
N
402.5 481.68 402.5 427.68 2 L
N
456.5 481.68 456.5 427.68 2 L
N
348.5 481.68 348.5 427.68 2 L
N
177.5 481.68 177.5 427.68 2 L
N
231.5 481.68 231.5 427.68 2 L
N
123.5 481.68 123.5 427.68 2 L
N
119.9 529.95 182.9 583.95 R
5 X
V
0 X
N
112.7 250.95 263.9 351.75 R
N
112.7 326.55 263.9 326.55 2 L
4 X
V
0 X
N
112.7 288.75 263.9 288.75 2 L
N
220.7 326.55 220.7 288.75 2 L
N
112.7 326.55 263.9 351.75 R
4 X
V
0 X
N
112.7 288.76 220.7 326.55 R
5 X
V
0 X
N
220.7 288.76 263.9 326.55 R
7 X
V
0 X
N
112.7 250.95 177.5 288.75 R
V
N
177.5 250.95 263.9 288.75 R
2 X
V
0 X
N
0 18 Q
(1          2           3        4           5           6          7            8) 83.9 589.68 T
134.75 591.31 137.9 583.96 129.95 584.91 132.35 588.11 4 Y
V
101.9 610.95 132.36 588.11 2 L
N
131.09 368.75 130.7 360.76 123.97 365.09 127.53 366.92 4 Y
V
98.3 423.75 127.53 366.91 2 L
N
(1          2           3        4           5           6          7            8) 83.9 404.28 T
(An ordinary array) 218.9 673.95 T
(One type of data) 200.9 538.95 T
(Multiple types of data) 292.69 310.68 T
134.3 326.55 134.3 351.75 2 L
0.5 H
N
155.9 326.55 155.9 351.75 2 L
N
177.5 326.55 177.5 351.75 2 L
N
199.1 326.55 199.1 351.75 2 L
N
220.7 326.55 220.7 351.75 2 L
N
242.3 326.55 242.3 351.75 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An array of structs) 195.5 490.68 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 13) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Nested Structure) 226.3 734.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(More Example) 89.65 683.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(struct point {) 99.65 656.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(f) 135.65 638.29 T
(loat X,Y;) 145.25 638.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};) 99.65 620.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a line is def) 99.65 584.29 T
(ined as two points) 253.25 584.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(struct line {) 99.65 566.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(point p1,p2;) 135.65 548.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 99.65 530.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a triangle is def) 99.65 494.29 T
(ined by three points) 291.65 494.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(struct triangle {) 99.65 476.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(point p1,p2,p3;) 135.65 458.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};) 99.65 440.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// a square is def) 99.65 404.29 T
(ined by) 272.45 404.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// an) 99.65 386.29 T
11 F
(array) 157.25 386.29 T
10 F
( of four points) 205.25 386.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(struct square {) 99.65 368.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(point vertex[4];) 135.65 350.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};) 99.65 332.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(point P;) 99.65 296.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(line L;) 99.65 278.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(triangle polygon3;) 99.65 260.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(square polygon4;) 99.65 242.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 14 Q
(\245) 63.65 195.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Access to members of nested structure) 89.65 195.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 16 Q
(L.p1.x = 1.0;   L.p1.y = 2.0;) 99.65 168.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(polygon4.vertex[0].x = 1.0;) 99.65 132.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(polygon4.vertex[0].y = 2.0;) 99.65 114.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 14) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 14 Q
(Given the following de\336nitions for) 63.65 735.62 T
8 F
(Date, Student, Classlist) 282.02 735.62 T
9 F
(and) 434.79 735.62 T
8 F
(Class102) 461.99 735.62 T
9 F
(:) 517.19 735.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(str) 99.65 697.62 T
(uct) 115.57 697.62 T
8 F
(Date) 138.29 697.62 T
9 F
( {) 168.61 697.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(int day;) 117.65 680.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// day of a Date) 243.65 680.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ASSUME: 1 <= day <= 31) 351.65 680.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int month;) 117.65 663.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// month of a Date) 243.65 663.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ASSUME: 1 <= month <= 12) 351.65 663.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int year;) 117.65 646.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// year of a Date) 243.65 646.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ASSUME: 1 <= year <= 2000) 351.65 646.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(} ;) 99.65 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(struct) 99.65 595.62 T
15 F
(Student) 134.26 595.62 T
0 F
( {) 180.93 595.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char name[20];) 117.65 578.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Student\325) 243.65 578.62 T
(s name) 301.61 578.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Date birthdate;) 117.65 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Date of a student\325) 243.65 561.62 T
(s birthday) 354.08 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int score[5]) 117.65 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Student\325) 243.65 544.62 T
(s test scores) 301.61 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};) 99.65 527.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(struct) 99.65 493.62 T
15 F
(Classlist) 134.26 493.62 T
0 F
( {) 184.04 493.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Student clist[50];) 117.65 476.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Current list of students in the class) 243.65 476.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int no_tests;) 117.65 459.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Number of tests students have taken) 243.65 459.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int size;) 117.65 442.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Number of students currently enrolled) 243.65 442.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(};) 99.65 425.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Classlist) 99.65 391.62 T
15 F
(Class102) 150.61 391.62 T
0 F
(;) 203.5 391.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer 96\051) 36.65 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lectures 18) 274.18 61.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.25 ( 15) 546.15 61.61 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(// The function in_class reads the student records from the input stream ins) 63.65 735.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// and stores them in the Classlist Class.) 63.65 718.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(void) 63.65 684.62 T
15 F
(in_class) 92.04 684.62 T
0 F
(\050ifstream& ins, Classlist& Class\051 {) 142.22 684.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char temp, j;) 81.65 667.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050int i=0; i<Class.size; i++\051 {) 81.65 633.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read student records into Class) 315.65 633.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins.get\050temp\051;) 99.65 616.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read student names) 315.65 616.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(j = 0;) 99.65 599.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while \050temp != '/' && j < 19\051 {) 99.65 582.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Student names ends with '/') 315.65 582.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class.clist[i].name[j] = temp;) 117.65 565.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins.get\050temp\051;) 117.65 548.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(j++;) 117.65 531.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 99.65 514.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class.clist[i].name[j] = '\1340';) 99.65 497.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// End the string with null char) 315.65 497.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins >> Class.clist[i].birthdate.day;) 99.65 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read day of birth) 315.65 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins >> Class.clist[i].birthdate.month;) 99.65 446.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read month of birth) 315.65 446.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins >> Class.clist[i].birthdate.year;) 99.65 429.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read year of birth) 315.65 429.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050int k=0; k < Class.no_tests; k++\051) 99.65 395.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read in scores) 315.65 395.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins >> Class.clist[i].score[k];) 117.65 378.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ins.get\050temp\051;) 99.65 344.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Read newline character) 315.65 344.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 81.65 327.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(}) 63.65 310.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
15 F
(Input file:) 63.65 276.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Chan Tai Man/ 10 9 1975 60 70 80) 63.65 259.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cheng Hong Chung/ 5 8 1976 70 84 65) 63.65 242.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chung Lok Hang/ 12 7 1973 81 87 98) 63.65 225.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fung Kwok Kay/ 26 12 1972 100 100 100) 63.65 208.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lam Yuk Yee/ 8 5 1971 91 86 83) 63.65 191.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Poon Wai Wah/ 7 8 1975 56 77 74) 63.65 174.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pang Wing Sum/ 30 8 1973 84 59 74) 63.65 157.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Tam Ka Hung/ 19 11 1975 100 95 99) 63.65 140.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wong Tak Sun/ 20 3 1974 83 54 71) 63.65 123.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wong Siu Wing/ 4 5 1972 75 85 95) 63.65 106.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 15
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-BoldItalic
%%+ NewCenturySchlbk-Italic
%%+ Courier-Bold
%%+ Times-Italic
%%+ Symbol
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Courier
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ ZapfDingbats
%%+ Palatino-BoldItalic
%%+ Times-Bold
%%EOF
