%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Courier-BoldOblique FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
8 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 1) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Example) 261.35 734.29 T
2 14 Q
(// Read in 5 scores and show how much each score differs from the) 63.65 701.62 T
(// average  score.) 63.65 685.62 T
(#include <iostream.h>) 63.65 669.62 T
(void  main\050 \051  {) 63.65 637.62 T
(    int i,  score[5], sum=0;) 63.65 621.62 T
(    \337oat average;) 63.65 605.62 T
(    cout << "Enter 5 scores:\134n";) 63.65 573.62 T
(    for \050i = 0;  i < 5;  i++\051  {) 63.65 541.62 T
(          cin >> score[i];) 63.65 525.62 T
(          sum = sum + score[i];) 63.65 509.62 T
(    }) 63.65 493.62 T
(    average = \337oat\050sum\051 / 5 ;) 63.65 477.62 T
(    cout << "The average  score is " << max << endl) 63.65 445.62 T
(              << "The differences from average are:\134n";) 63.65 429.62 T
(    for \050i = 0;  i < 5;  i++\051) 63.65 397.62 T
(        cout <<  score[i] <<  " off by "  <<  \050average - score[i]\051  << endl;) 63.65 381.62 T
(    return;) 63.65 349.62 T
(}) 63.65 333.62 T
1 F
(Sample output:) 63.65 301.62 T
2 F
(Enter 5 scores:) 99.65 269.62 T
1 F
(5  9  3  10  8) 99.65 253.62 T
2 F
(The average  score is  7) 99.65 237.62 T
(The differences from the highest are:) 99.65 221.62 T
(5  off by  2) 99.65 205.62 T
(9  off by  -2) 99.65 189.62 T
(3  off by  4) 99.65 173.62 T
(10  off by -3) 99.65 157.62 T
(8  off by 1) 99.65 141.62 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 2) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Linear Search) 238.61 734.29 T
1 14 Q
(Problem De\336nition:) 63.65 701.62 T
2 F
-0.62 (Search an) 63.65 669.62 P
3 F
-0.62 ( ordered) 127.85 669.62 P
2 F
-0.62 ( array of integers for a value and return its index if the) 180.09 669.62 P
(value is found.  Otherwise, return -1.) 63.65 653.62 T
1 F
(Solution Outline:) 63.65 303.62 T
4 16 Q
(Start with the f) 63.65 270.29 T
(irst array element \050index 0\051.) 217.25 270.29 T
(While) 63.65 234.29 T
5 F
(array element) 121.25 234.29 T
(is less than) 255.65 234.29 T
6 F
(value) 380.45 234.29 T
4 F
(      and more array element do) 63.65 216.29 T
(Try next element \050increment index\051;) 81.65 198.29 T
(If) 63.65 162.29 T
7 F
(value) 92.45 162.29 T
4 F
(not found then) 150.05 162.29 T
(return -1) 81.65 144.29 T
(else) 63.65 126.29 T
(return index) 81.65 108.29 T
63.65 96.95 531.65 744.95 C
63.65 330.95 531.65 614.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
133.4 470.95 421.4 506.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
169.4 506.95 169.4 470.95 2 L
N
205.4 506.95 205.4 470.95 2 L
N
241.4 506.95 241.4 470.95 2 L
N
277.4 506.95 277.4 470.95 2 L
N
313.4 506.95 313.4 470.95 2 L
N
349.4 506.95 349.4 470.95 2 L
N
385.4 506.95 385.4 470.95 2 L
N
4 16 Q
(7   9  10  17  30  37  46 60) 142.4 488.95 T
(0   1  2   3   4  5   6   7) 151.4 515.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 3) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Linear Search \050Cont\325d\051) 202.82 734.29 T
4 F
(// Searches an) 63.65 700.29 T
6 F
(ordered) 207.65 700.29 T
4 F
( array of integers) 274.85 700.29 T
(int lsearch\050int data[], // input: array) 63.65 682.29 T
(            int size,   // input: array size) 63.65 664.29 T
(            int value   // input: value to f) 63.65 646.29 T
(ind) 486.05 646.29 T
(            \051    // output: index if found) 63.65 628.29 T
(                 //         otherwise return -1) 63.65 610.29 T
({) 63.65 592.29 T
(     int index = 0;    // initialize index to 0) 63.65 574.29 T
(     while \050\050data[index]) 63.65 538.29 T
5 F
(<) 303.65 538.29 T
4 F
( value\051 &&) 313.25 538.29 T
(            \050index < size\051\051) 63.65 520.29 T
(          index++;) 63.65 502.29 T
(     if \050data[index] != value\051) 63.65 466.29 T
(          return -1;) 63.65 448.29 T
(     else) 63.65 430.29 T
(          return index;) 63.65 412.29 T
(} // search) 63.65 394.29 T
(#include <iostream.h>) 63.65 340.29 T
(int main\050\051 {) 63.65 322.29 T
(     int A[10] = { 2,2,3,4,5,5,6,9,18,25 };) 63.65 304.29 T
(     int x;) 63.65 286.29 T
(     cin >> x;) 63.65 250.29 T
(     cout << lsearch\050A,10,x\051 << endl;) 63.65 232.29 T
(     return 0;) 63.65 196.29 T
(}) 63.65 178.29 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 4) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Example) 261.35 734.29 T
2 14 Q
(//Reads quiz scores for each student into the two-dimensional array) 63.65 701.62 T
(//Computes the average score for each student and the average score for) 63.65 685.62 T
(// each quiz. Displays the quiz scores and the averages.) 63.65 669.62 T
(#include <iostream.h>) 63.65 637.62 T
(#include <fstream.h>) 63.65 621.62 T
(#include <iomanip.h>) 63.65 605.62 T
(// Global constant NO_STUDENTS and NO_QUIZZES are the) 63.65 573.62 T
(// dimensions of the array grade) 63.65 557.62 T
(const int NO_STUDENTS = 4,  NO_QUIZZES = 3;) 63.65 541.62 T
(void) 63.65 493.62 T
1 F
(std_ave) 94.5 493.62 T
2 F
(\050const int grade[ ][NO_QUIZZES], double st_ave[ ]\051;) 148.95 493.62 T
(//Pre:) 63.65 477.62 T
(Each of the indexed variable grade[st_num-1, quiz_num-1]) 108.65 477.62 T
(//) 63.65 461.62 T
(contains the score for student st_num on quiz quiz_num.) 108.65 461.62 T
(//Post:) 63.65 445.62 T
(Each st_ave[st_num-1] contains the average for student number) 108.65 445.62 T
(//) 63.65 429.62 T
( stu_num.) 108.65 429.62 T
(void) 63.65 381.62 T
1 F
(quiz_ave) 94.5 381.62 T
2 F
(\050const int grade[ ][NO_QUIZZES], double quiz_ave[ ]\051;) 158.01 381.62 T
(//Pre:) 63.65 365.62 T
(Each of the indexed variables grade[st_num-1, quiz_num-1]) 108.65 365.62 T
(//) 63.65 349.62 T
(contains the score for student st_num on quiz quiz_num.) 108.65 349.62 T
(//Post:) 63.65 333.62 T
(Each quiz_ave[quiz_num-1] contains the average for quiz) 108.65 333.62 T
(//) 63.65 317.62 T
(numbered quiz_num.) 108.65 317.62 T
(void) 63.65 269.62 T
1 F
(display) 94.5 269.62 T
2 F
(\050const int grade[ ][NO_QUIZZES],) 147.4 269.62 T
(                             const double st_ave[], const double quiz_ave[ ]\051;) 63.65 253.62 T
(//Pre:) 63.65 237.62 T
(Each of the indexed variables grade[st_num-1, quiz_num-1]) 108.65 237.62 T
(//) 63.65 221.62 T
(contains the score for student st_num on quiz quiz_num. Each) 108.65 221.62 T
(//) 63.65 205.62 T
(st_ave[st_num-1] contains the average for student stu_num.) 108.65 205.62 T
(//) 63.65 189.62 T
(Each quiz_ave[quiz_num-1] contains the average for quiz) 108.65 189.62 T
(//) 63.65 173.62 T
(numbered quiz_num.) 108.65 173.62 T
(//Post: All the data in grade, st_ave, and quiz_ave have been output.) 63.65 157.62 T
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 5) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
2 14 Q
(void  main\050 \051  {) 63.65 735.62 T
(    int grade[NO_STUDENTS][NO_QUIZZES];) 63.65 719.62 T
(    double st_ave[NO_STUDENTS];) 63.65 703.62 T
(    double quiz_ave[NO_QUIZZES];) 63.65 687.62 T
(    ifstream ins;) 63.65 671.62 T
(    ins.open\050"in_\336le.dat"\051;) 63.65 639.62 T
(    for  \050 int  i = 1;  i <= NO_STUDENTS;  i++ \051) 63.65 607.62 T
(           for \050 int  j = 1;  j <= NO_QUIZZES;  j++ \051) 63.65 591.62 T
(                  ins   >>  grade [ i-1 ] [ j-1 ] ;) 63.65 575.62 T
(    st_ave\050grade, st_ave\051;) 63.65 543.62 T
(    quiz_ave\050grade, quiz_ave\051;) 63.65 527.62 T
(    display\050grade, st_ave, quiz_ave\051;) 63.65 511.62 T
(    ins.close\050 \051;) 63.65 479.62 T
(    return;) 63.65 463.62 T
(}) 63.65 447.62 T
(void) 63.65 415.62 T
1 F
(st_ave) 94.5 415.62 T
2 F
(\050const int grade[ ][NO_QUIZZES], double st_ave[ ]\051  {) 139.61 415.62 T
(    double sum;) 63.65 399.62 T
(    for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051 {) 63.65 383.62 T
(        sum = 0;) 63.65 367.62 T
(        for \050int quiz_num = 1; quiz_num <= NO_QUIZZES; quiz_num++\051) 63.65 351.62 T
(            sum = sum + grade[st_num-1][quiz_num-1];) 63.65 335.62 T
(         st_ave[st_num-1] = sum/NO_QUIZZES;) 63.65 303.62 T
(    }) 63.65 287.62 T
(}) 63.65 271.62 T
(void) 63.65 239.62 T
1 F
(quiz_ave) 94.5 239.62 T
2 F
(\050const int grade[ ][NO_QUIZZES],double quiz_ave[ ]\051 {) 158.01 239.62 T
(    double sum;) 63.65 223.62 T
(    for \050int quiz_num = 1; quiz_num <= NO_QUIZZES; quiz_num++\051  {) 63.65 207.62 T
(        sum = 0;) 63.65 191.62 T
(        for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051) 63.65 175.62 T
(            sum = sum + grade[st_num-1][quiz_num-1];) 63.65 159.62 T
(        quiz_ave[quiz_num-1] = sum/NO_STUDENTS;     }) 63.65 127.62 T
(}) 63.65 111.62 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 6) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
2 14 Q
(void) 63.65 735.62 T
1 F
(display) 94.5 735.62 T
2 F
(\050const int grade[][NO_QUIZZES],) 147.4 735.62 T
(                           const double st_ave[], const double quiz_ave[]\051   {) 63.65 719.62 T
(    cout.setf\050ios::\336xed\051;) 63.65 703.62 T
(    cout.setf\050ios::showpoint\051;) 63.65 687.62 T
(    cout.precision\0501\051;) 63.65 671.62 T
(    cout << setw\05010\051 << "Student") 63.65 639.62 T
(         << setw\0505\051 << "A) 63.65 623.62 T
(ve") 205.73 623.62 T
(         << setw\05015\051 << "Quizzes\134n";) 63.65 607.62 T
(    for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051  {) 63.65 591.62 T
(        cout << setw\05010\051 << st_num) 63.65 575.62 T
(                  << setw\0505\051 << st_ave[st_num-1] << " ";) 63.65 559.62 T
(        for \050int quiz_num = 1; quiz_num <= NO_QUIZZES; quiz_num++\051) 63.65 527.62 T
(                 cout << setw\0505\051 << grade[st_num-1][quiz_num-1];) 63.65 511.62 T
(        cout << endl;) 63.65 495.62 T
(    }) 63.65 479.62 T
(    cout << "Quiz averages = ";) 63.65 447.62 T
(    for \050int quiz_num = 1; quiz_num <= NO_QUIZZES; quiz_num++\051) 63.65 431.62 T
(                cout << setw\0505\051 << quiz_ave[quiz_num-1];) 63.65 415.62 T
(    cout << endl;) 63.65 399.62 T
(}) 63.65 383.62 T
1 F
(Sample output:) 63.65 303.62 T
2 F
(Student) 63.65 271.62 T
( A) 126.65 271.62 T
(ve) 139.61 271.62 T
(Quizzes) 225.65 271.62 T
(1) 108.65 255.62 T
(10.0) 126.65 255.62 T
(10) 198.65 255.62 T
(10) 234.65 255.62 T
(10) 270.65 255.62 T
(2) 108.65 239.62 T
(   1.0) 126.65 239.62 T
(   2) 198.65 239.62 T
(   0) 234.65 239.62 T
(   1) 270.65 239.62 T
(3) 108.65 223.62 T
(   7.7) 126.65 223.62 T
(   8) 198.65 223.62 T
(   6) 234.65 223.62 T
(   9) 270.65 223.62 T
(4) 108.65 207.62 T
(   7.3) 126.65 207.62 T
(   8) 198.65 207.62 T
(   4) 234.65 207.62 T
(10) 270.65 207.62 T
(Quiz A) 63.65 191.62 T
(verage =) 107.2 191.62 T
(7.0) 198.65 191.62 T
(5.0) 234.65 191.62 T
(7.5) 270.65 191.62 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 7) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Character Strings) 222.9 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(sequence of characters) 89.65 683.62 T
(\245) 63.65 637.62 T
(stored in arrays of type) 89.65 637.62 T
3 F
(char) 243.91 637.62 T
2 F
(\050ends with the  null character \325\1340\325\051) 276.83 637.62 T
(\245) 63.65 591.62 T
(difference between string and character) 89.65 591.62 T
(o) 90.65 565.62 T
(double quotes                                       single quotes) 117.65 565.62 T
4 16 Q
("a" \050string\051         \325a\325 \050character\051) 117.65 538.29 T
2 14 Q
(o) 90.65 503.62 T
(storage) 117.65 503.62 T
4 16 Q
(     2-element array       byte) 63.65 476.29 T
2 14 Q
(o) 90.65 443.62 T
(content) 117.65 443.62 T
(\245) 63.65 352.62 T
(example) 89.65 352.62 T
4 16 Q
(cout << "Hello world") 99.65 325.29 T
(char string1[12];) 99.65 237.29 T
(cin >> string1;    // type "Hello" as input) 99.65 219.29 T
(char string1[12] = "Hello";) 99.65 113.29 T
63.65 96.95 531.65 744.95 C
81.65 393.95 513.65 438.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 402.95 144.65 429.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
324.65 402.95 351.65 429.95 R
N
144.65 402.95 171.65 429.95 R
N
2 14 Q
(a    \1340) 126.65 411.95 T
(a) 333.65 411.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
81.65 267.95 513.65 319.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 281.95 126.65 308.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
126.65 281.95 153.65 308.95 R
N
153.65 281.95 180.65 308.95 R
N
180.65 281.95 207.65 308.95 R
N
207.65 281.95 234.65 308.95 R
N
234.65 281.95 261.65 308.95 R
N
261.65 281.95 288.65 308.95 R
N
288.65 281.95 315.65 308.95 R
N
315.65 281.95 342.65 308.95 R
N
342.65 281.95 369.65 308.95 R
N
369.65 281.95 396.65 308.95 R
N
396.65 281.95 423.65 308.95 R
N
4 16 Q
(H  e  l  l  o    w  o  r l  d  \1340) 108.65 290.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
81.65 161.95 513.65 213.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 175.95 126.65 202.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
126.65 175.95 153.65 202.95 R
N
153.65 175.95 180.65 202.95 R
N
180.65 175.95 207.65 202.95 R
N
207.65 175.95 234.65 202.95 R
N
234.65 175.95 261.65 202.95 R
N
261.65 175.95 288.65 202.95 R
N
288.65 175.95 315.65 202.95 R
N
315.65 175.95 342.65 202.95 R
N
342.65 175.95 369.65 202.95 R
N
369.65 175.95 396.65 202.95 R
N
396.65 175.95 423.65 202.95 R
N
4 16 Q
(H  e  l  l  o \1340 ?  ?  ? ?  ?  ?) 108.65 184.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 8) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(String I/O) 256.69 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(String can be output using the operator <<) 89.65 683.62 T
(Ex:) 90.65 651.62 T
4 16 Q
(char name[16] = "Chan Tai Man") 99.65 624.29 T
(cout << endl << name;) 99.65 588.29 T
(cout << endl << setw\05016\051 << name;) 99.65 500.29 T
(cout << endl << setiosf) 99.65 412.29 T
(lags\050ios::left\051) 320.45 412.29 T
(     << setw\05016\051 << name;) 99.65 394.29 T
63.65 96.95 531.65 744.95 C
68.15 530.95 527.15 582.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 544.95 113.15 571.95 R
0.5 H
2 Z
4 X
0 0 0 1 0 0 0 K
N
113.15 544.95 140.15 571.95 R
N
140.15 544.95 167.15 571.95 R
N
167.15 544.95 194.15 571.95 R
N
194.15 544.95 221.15 571.95 R
N
221.15 544.95 248.15 571.95 R
N
248.15 544.95 275.15 571.95 R
N
275.15 544.95 302.15 571.95 R
N
302.15 544.95 329.15 571.95 R
N
329.15 544.95 356.15 571.95 R
N
356.15 544.95 383.15 571.95 R
N
383.15 544.95 410.15 571.95 R
N
4 16 Q
0 X
(C  h  a  n    T  a  i    M  a  n) 95.15 553.95 T
410.15 544.95 437.15 571.95 R
4 X
N
437.15 544.95 464.15 571.95 R
N
464.15 544.95 491.15 571.95 R
N
491.15 544.95 518.15 571.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
68.15 442.95 527.15 494.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 456.95 113.15 483.95 R
0.5 H
2 Z
4 X
0 0 0 1 0 0 0 K
N
113.15 456.95 140.15 483.95 R
N
140.15 456.95 167.15 483.95 R
N
167.15 456.95 194.15 483.95 R
N
194.15 456.95 221.15 483.95 R
N
221.15 456.95 248.15 483.95 R
N
248.15 456.95 275.15 483.95 R
N
275.15 456.95 302.15 483.95 R
N
302.15 456.95 329.15 483.95 R
N
329.15 456.95 356.15 483.95 R
N
356.15 456.95 383.15 483.95 R
N
383.15 456.95 410.15 483.95 R
N
4 16 Q
0 X
(           C  h  a  n    T  a  i     M  a  n) 95.15 465.95 T
410.15 456.95 437.15 483.95 R
4 X
N
437.15 456.95 464.15 483.95 R
N
464.15 456.95 491.15 483.95 R
N
491.15 456.95 518.15 483.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
68.15 336.95 527.15 388.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 350.95 113.15 377.95 R
0.5 H
2 Z
4 X
0 0 0 1 0 0 0 K
N
113.15 350.95 140.15 377.95 R
N
140.15 350.95 167.15 377.95 R
N
167.15 350.95 194.15 377.95 R
N
194.15 350.95 221.15 377.95 R
N
221.15 350.95 248.15 377.95 R
N
248.15 350.95 275.15 377.95 R
N
275.15 350.95 302.15 377.95 R
N
302.15 350.95 329.15 377.95 R
N
329.15 350.95 356.15 377.95 R
N
356.15 350.95 383.15 377.95 R
N
383.15 350.95 410.15 377.95 R
N
4 16 Q
0 X
(C  h  a  n    T  a  i    M  a  n) 95.15 359.95 T
410.15 350.95 437.15 377.95 R
4 X
N
437.15 350.95 464.15 377.95 R
N
464.15 350.95 491.15 377.95 R
N
491.15 350.95 518.15 377.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 9) 551.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(String I/O) 256.69 734.29 T
2 14 Q
(\245) 63.65 683.62 T
1.5 (String can be input using the operator  >>,  but  white spaces are) 89.65 683.62 P
(skipped when strings are read this way) 90.65 667.62 T
(.) 343.98 667.62 T
(Ex.) 90.65 635.62 T
(char a[80], b[80];) 126.65 619.62 T
(cout  <<  "Enter a string:\134n" ;) 126.65 603.62 T
(cin  >>  a  >> b;) 126.65 587.62 T
(cout  <<  a  <<  b  <<  "END OF OUTPUT\134n";) 126.65 571.62 T
(Output:) 90.65 539.62 T
(Enter a string:) 126.65 523.62 T
(This  is  a  test.) 126.65 507.62 T
(ThisisEND  OF OUTPUT) 126.65 491.62 T
(\245) 63.65 429.62 T
-0.35 (The function) 89.65 429.62 P
1 F
-0.36 (getline) 178.56 429.62 P
2 F
-0.35 (  can be used to read an entire line of input into) 228.85 429.62 P
(a string variable.) 90.65 413.62 T
(Ex.) 90.65 381.62 T
(char a[80];) 126.65 365.62 T
(cout <<  "Enter a string:\134n" ;) 126.65 349.62 T
(cin.getline \050 a, 80 \051;) 126.65 333.62 T
(// The 2nd argument is the size of a) 250.09 333.62 T
(cout  <<  a  <<   "END OF OUTPUT\134n";) 126.65 317.62 T
(Output:) 90.65 285.62 T
(Enter a string:) 126.65 269.62 T
(This  is  a  test.) 126.65 253.62 T
(This  is  a  test.END  OF OUTPUT) 126.65 237.62 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 10) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(String Copy) 247.79 734.29 T
8 14 Q
(\245) 63.65 683.62 T
(strcpy\050dest, src\051) 89.65 683.62 T
2 F
(o) 90.65 657.62 T
(copies string) 117.65 657.62 T
3 F
(src) 203.2 657.62 T
2 F
( into string) 221.85 657.62 T
3 F
(dest) 297.56 657.62 T
2 F
(o) 90.65 631.62 T
(example:) 117.65 631.62 T
4 16 Q
(char name1[16], name2[16];) 99.65 604.29 T
(strcpy\050name1,"Chan Tai Man"\051;) 99.65 568.29 T
(strcpy\050name2,"999999999999999"\051;) 99.65 480.29 T
(strcpy\050name2,name1\051;) 99.65 392.29 T
8 14 Q
(\245) 63.65 275.62 T
(strncpy\050dest, src, n\051) 89.65 275.62 T
2 F
(o) 90.65 249.62 T
(copies \336rst) 117.65 249.62 T
3 F
(n) 191.27 249.62 T
2 F
(characters of) 203.72 249.62 T
3 F
(src) 291.08 249.62 T
2 F
( into) 309.73 249.62 T
3 F
(dest) 342.92 249.62 T
4 16 Q
(char name1[16];) 99.65 222.29 T
(strncpy\050name1,"Chan Tai Man",16\051;) 99.65 186.29 T
63.65 96.95 531.65 744.95 C
68.15 510.95 527.15 562.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 524.95 113.15 551.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
113.15 524.95 140.15 551.95 R
N
140.15 524.95 167.15 551.95 R
N
167.15 524.95 194.15 551.95 R
N
194.15 524.95 221.15 551.95 R
N
221.15 524.95 248.15 551.95 R
N
248.15 524.95 275.15 551.95 R
N
275.15 524.95 302.15 551.95 R
N
302.15 524.95 329.15 551.95 R
N
329.15 524.95 356.15 551.95 R
N
356.15 524.95 383.15 551.95 R
N
383.15 524.95 410.15 551.95 R
N
4 16 Q
(C  h  a  n    T  a  i    M  a  n \1340  ? ?  ?) 95.15 533.95 T
410.15 524.95 437.15 551.95 R
N
437.15 524.95 464.15 551.95 R
N
464.15 524.95 491.15 551.95 R
N
491.15 524.95 518.15 551.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
68.15 422.95 527.15 474.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 436.95 113.15 463.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
113.15 436.95 140.15 463.95 R
N
140.15 436.95 167.15 463.95 R
N
167.15 436.95 194.15 463.95 R
N
194.15 436.95 221.15 463.95 R
N
221.15 436.95 248.15 463.95 R
N
248.15 436.95 275.15 463.95 R
N
275.15 436.95 302.15 463.95 R
N
302.15 436.95 329.15 463.95 R
N
329.15 436.95 356.15 463.95 R
N
356.15 436.95 383.15 463.95 R
N
383.15 436.95 410.15 463.95 R
N
4 16 Q
(9  9  9  9 9  9  9  9  9 9  9  9  9  9  9 \1340) 95.15 445.95 T
410.15 436.95 437.15 463.95 R
N
437.15 436.95 464.15 463.95 R
N
464.15 436.95 491.15 463.95 R
N
491.15 436.95 518.15 463.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
68.15 334.95 527.15 386.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 348.95 113.15 375.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
113.15 348.95 140.15 375.95 R
N
140.15 348.95 167.15 375.95 R
N
167.15 348.95 194.15 375.95 R
N
194.15 348.95 221.15 375.95 R
N
221.15 348.95 248.15 375.95 R
N
248.15 348.95 275.15 375.95 R
N
275.15 348.95 302.15 375.95 R
N
302.15 348.95 329.15 375.95 R
N
329.15 348.95 356.15 375.95 R
N
356.15 348.95 383.15 375.95 R
N
383.15 348.95 410.15 375.95 R
N
4 16 Q
(C  h  a  n    T  a  i    M  a  n \1340  9 9  \1340) 95.15 357.95 T
410.15 348.95 437.15 375.95 R
N
437.15 348.95 464.15 375.95 R
N
464.15 348.95 491.15 375.95 R
N
491.15 348.95 518.15 375.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
68.15 128.95 527.15 180.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
86.15 142.95 113.15 169.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
113.15 142.95 140.15 169.95 R
N
140.15 142.95 167.15 169.95 R
N
167.15 142.95 194.15 169.95 R
N
194.15 142.95 221.15 169.95 R
N
221.15 142.95 248.15 169.95 R
N
248.15 142.95 275.15 169.95 R
N
275.15 142.95 302.15 169.95 R
N
302.15 142.95 329.15 169.95 R
N
329.15 142.95 356.15 169.95 R
N
356.15 142.95 383.15 169.95 R
N
383.15 142.95 410.15 169.95 R
N
4 16 Q
(C  h  a  n    T  a  i    M  a  n \1340 \1340 \1340 \1340) 95.15 151.95 T
410.15 142.95 437.15 169.95 R
N
437.15 142.95 464.15 169.95 R
N
464.15 142.95 491.15 169.95 R
N
491.15 142.95 518.15 169.95 R
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 11) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
4 14 Q
(//Copy the value of a string to a string variable) 63.65 735.62 T
(#include <iostream.h>) 63.65 719.62 T
(#include <string.h>) 63.65 703.62 T
5 F
(void string_copy\050char target[], const char source[],) 63.65 671.62 T
( int target_size\051;) 207.65 655.62 T
4 F
(//) 63.65 639.62 T
5 F
(Pre:) 80.45 639.62 T
4 F
(target_size is the declared size of target.) 135.65 639.62 T
(//) 63.65 623.62 T
(source contains a string ends with '\1340'.) 135.65 623.62 T
(//) 63.65 607.62 T
5 F
(Post:) 80.45 607.62 T
4 F
( The value of target has been set to the string) 122.45 607.62 T
(//) 63.65 591.62 T
(value in source, provided the declared size of) 135.65 591.62 T
(//) 63.65 575.62 T
(target is large enough. If target is not large) 135.65 575.62 T
(//) 63.65 559.62 T
(enough to hold the entire string, a string) 135.65 559.62 T
(//) 63.65 543.62 T
(equal to the lenght of source will be stored.) 135.65 543.62 T
(int main\050 \051) 63.65 511.62 T
({) 63.65 495.62 T
(    char short_string[11];) 63.65 479.62 T
(char long_string[] = "This is rather long.";) 99.65 463.62 T
(    string_copy\050short_string, "Hello", 11\051;) 63.65 431.62 T
(    cout << short_string << "STRING ENDS HERE.\134n";) 63.65 415.62 T
(    string_copy\050short_string, long_string, 11\051;) 63.65 383.62 T
(    cout << short_string << "STRING ENDS HERE.\134n";) 63.65 367.62 T
(    return 0;) 63.65 351.62 T
(}) 63.65 335.62 T
(//Uses string.h:) 63.65 303.62 T
5 F
(void string_copy\050char target[], const char source[],) 63.65 287.62 T
( int target_size\051) 207.65 271.62 T
4 F
({) 63.65 255.62 T
(    int new_length = strlen\050source\051;) 63.65 239.62 T
(    if \050new_length > \050target_size - 1\051\051) 63.65 207.62 T
(        new_length = target_size - 1;) 63.65 191.62 T
(    for \050int index = 0; index < new_length; index++\051) 63.65 159.62 T
(        target[index] = source[index];) 63.65 143.62 T
(    target[index] = '\1340';) 63.65 127.62 T
(}) 63.65 111.62 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 12) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(String Comparison) 218.61 734.29 T
8 14 Q
(\245) 63.65 683.62 T
(strcmp\050s1, s2\051) 89.65 683.62 T
2 F
(o) 90.65 657.62 T
(compares strings) 117.65 657.62 T
3 F
(s1) 231.72 657.62 T
2 F
( and) 245.72 657.62 T
3 F
(s2) 277.88 657.62 T
2 F
(, returns) 291.88 657.62 T
(-) 117.65 631.62 T
(< 0) 144.65 631.62 T
(if) 189.65 631.62 T
3 F
(s1 <  s2) 206.5 631.62 T
2 F
(-) 117.65 605.62 T
(= 0) 144.65 605.62 T
(if) 189.65 605.62 T
3 F
(s1) 206.5 605.62 T
2 F
( ==) 220.5 605.62 T
3 F
(s2       \050i.e.) 245.26 605.62 T
8 F
(strcmp) 313.72 605.62 T
2 F
(returns) 367.11 605.62 T
1 F
(false) 419.47 605.62 T
3 F
(\051) 453.44 605.62 T
2 F
(-) 117.65 579.62 T
(> 0) 144.65 579.62 T
(if) 189.65 579.62 T
3 F
( s1 >  s2) 202.61 579.62 T
2 F
(o) 90.65 553.62 T
(lexicographical comparison) 117.65 553.62 T
8 F
(\245) 63.65 307.62 T
(strncmp\050s1, s2, n\051) 89.65 307.62 T
2 F
(o) 90.65 281.62 T
(make at most) 117.65 281.62 T
3 F
(n) 209.46 281.62 T
2 F
( comparisons) 218.01 281.62 T
4 16 Q
(strncmp\050"abcdefg", "abc123", 3\051) 117.65 254.29 T
7 F
(returns 0) 117.65 236.29 T
8 14 Q
(\245) 63.65 189.62 T
(strlen\050s\051) 89.65 189.62 T
2 F
(o) 90.65 163.62 T
(return length of string \050not including \325\1340\325\051) 117.65 163.62 T
4 16 Q
(strlen\050"abcde"\051) 117.65 136.29 T
7 F
(returns 5) 117.65 118.29 T
8 14 Q
(str1) 125.38 511.62 T
(str2) 211.78 511.62 T
(return) 281.51 519.62 T
(value) 285.14 503.62 T
(reason) 395.93 511.62 T
2 F
("AAAA") 113.59 477.62 T
("ABCD") 199.59 477.62 T
(< 0) 294.77 477.62 T
(\325A) 396.61 477.62 T
(\325 < \325B\325) 408.54 477.62 T
("B123") 117.07 453.62 T
("A089") 203.47 453.62 T
(> 0) 294.77 453.62 T
(\325B\325 > \325A) 396.61 453.62 T
(\325) 440.63 453.62 T
("127") 122.13 429.62 T
("409") 208.53 429.62 T
(< 0) 294.77 429.62 T
(\3251\325 < \3254\325) 398.42 429.62 T
("abc12") 115.13 405.62 T
("abc12") 201.53 405.62 T
(= 0) 294.77 405.62 T
(equal strings) 377.78 405.62 T
("abc") 122.91 381.62 T
("abcde") 201.79 381.62 T
(< 0) 294.77 381.62 T
(str1 a substring of st2) 349 381.62 T
("3") 129.91 357.62 T
("12345") 200.74 357.62 T
(> 0) 294.77 357.62 T
(\3253\325 > \3251\325) 398.42 357.62 T
182.45 537.95 182.45 348.7 2 L
V
N
268.85 537.95 268.85 348.7 2 L
V
N
340.85 537.95 340.85 348.7 2 L
V
N
96.05 536.95 499.25 536.95 2 L
V
2 H
N
96.05 492.95 499.25 492.95 2 L
V
N
96.05 468.95 499.25 468.95 2 L
V
0.5 H
N
96.05 444.95 499.25 444.95 2 L
V
N
96.05 420.95 499.25 420.95 2 L
V
N
96.05 396.95 499.25 396.95 2 L
V
N
96.05 372.95 499.25 372.95 2 L
V
N
96.05 348.95 499.25 348.95 2 L
V
N
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 13) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 16 Q
(Some Common Errors) 206.23 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Illegal to assign a value to a atring variable \050except at declaration\051.) 89.65 683.62 T
(Ex.) 90.65 651.62 T
(char a_string[10];) 126.65 651.62 T
(a_string = "Hello" ;             //  illegal assignment) 126.65 635.62 T
(Use  strcpy \050 a_string,  "Hello" \051   instead.) 90.65 603.62 T
(\245) 63.65 557.62 T
(The operator ==  doesn\325) 89.65 557.62 T
(t test two strings for equality) 241.45 557.62 T
(.) 428.41 557.62 T
3.69 (Use  strcmp \050 string1, string2 \051 instead  \050but note that strcmp) 90.65 525.62 P
(returns false if the two strings are the same\051.) 90.65 509.62 T
(\245) 63.65 463.62 T
2.87 (strcpy will let you assign a string that is too long for the string) 89.65 463.62 P
(variable to store the value.) 90.65 447.62 T
(Ex.) 90.65 415.62 T
(char  short_string[3];) 126.65 415.62 T
(strcpy \050 short_string,  "This string is too long." \051;) 126.65 399.62 T
(The memory locations follows the memory allocated for) 126.65 367.62 T
(short_string will be \336lled.) 126.65 351.62 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 14) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
2 14 Q
(#include <iostream.h>) 63.65 735.62 T
(#include <stdlib.h>) 63.65 719.62 T
(#include <ctype.h>) 63.65 703.62 T
1 F
(void read_and_clean\050int&  n\051;) 63.65 671.62 T
2 F
(//Reads a line of input. Discards all symbols except the digits. Converts) 63.65 655.62 T
(//the digit string to an integer and sets n to the value of this integer) 63.65 639.62 T
(.) 499.01 639.62 T
1 F
(void new_line\050 \051;) 63.65 607.62 T
2 F
(//Discards all the input remaining on the current  line \050including '\134n'\051.) 63.65 591.62 T
(int main\050  \051  {) 63.65 559.62 T
(    int n;) 63.65 543.62 T
(    char ans;) 63.65 527.62 T
(    do  {) 63.65 495.62 T
(        cout << "Enter an integer and press return: ";) 63.65 479.62 T
(        read_and_clean\050n\051;) 63.65 463.62 T
(        cout << "The string converts to the integer " << n << endl;) 63.65 431.62 T
(        cout << "Again? \050yes/no\051: ";) 63.65 415.62 T
(        cin >> ans;) 63.65 399.62 T
(        new_line\050 \051;) 63.65 367.62 T
(    }  while \050 \050ans != 'n'\051 && \050ans != 'N'\051 \051;) 63.65 351.62 T
(    return 0;) 63.65 319.62 T
(}) 63.65 303.62 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP102 \050Summer  96\051) 36.65 61.61 T
(Lecture 16) 276.13 61.61 T
( 15) 546.15 61.61 T
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
2 14 Q
(//Reads a line of input. Discards all symbols except the digits. Converts) 63.65 735.62 T
(//the digit string to an integer and sets n to the value of this integer) 63.65 719.62 T
(.) 499.01 719.62 T
1 F
(void read_and_clean\050int& n\051) 63.65 703.62 T
2 F
(  {) 270.02 703.62 T
(    const int ARRA) 63.65 687.62 T
(Y_SIZE = 6;) 178.25 687.62 T
(    char digit_string[ARRA) 63.65 671.62 T
(Y_SIZE];) 231.13 671.62 T
(    char next;) 63.65 655.62 T
(    int index = 0;) 63.65 639.62 T
(    cin.get\050next\051;) 63.65 607.62 T
(    while \050next != '\134n'\051  {) 63.65 591.62 T
(        if \050 \050isdigit\050next\051\051 && \050index < ARRA) 63.65 575.62 T
(Y_SIZE - 1\051 \051  {) 330.38 575.62 T
(digit_string[index] = next;) 117.65 559.62 T
(index++;) 117.65 543.62 T
(        }) 63.65 527.62 T
(        cin.get\050next\051;) 63.65 511.62 T
(    }) 63.65 495.62 T
(    digit_string[index] = '\1340';) 63.65 479.62 T
(    n =) 63.65 447.62 T
1 F
( atoi) 100.15 447.62 T
2 F
(\050digit_string\051;) 132.42 447.62 T
(// the function) 234.65 447.62 T
1 F
(atoi) 328.5 447.62 T
2 F
( convert a string to integer) 356.76 447.62 T
(}) 63.65 431.62 T
(//Discards all the input remaining on the current  line \050including '\134n'\051.) 63.65 399.62 T
1 F
(void new_line\050 \051   {) 63.65 383.62 T
2 F
(    char symbol;) 63.65 367.62 T
(    do    {) 63.65 351.62 T
(        cin.get\050symbol\051;) 63.65 335.62 T
(    } while \050symbol != '\134n'\051;) 63.65 319.62 T
(}) 63.65 303.62 T
1 F
(Sample output:) 63.65 255.62 T
2 F
(Enter an integer and press return:) 63.65 239.62 T
1 F
($  100) 299.06 239.62 T
2 F
(The string converts to the integer 100) 63.65 223.62 T
(Again? \050yes/no\051:) 63.65 207.62 T
1 F
(yes) 173.58 207.62 T
2 F
(Enter an integer and press return:) 63.65 191.62 T
1 F
(99%) 291.27 191.62 T
2 F
(The string converts to the integer 99) 63.65 175.62 T
(Again? \050yes/no\051:) 63.65 159.62 T
1 F
(yes) 173.58 159.62 T
2 F
(Enter an integer and press return:) 63.65 143.62 T
1 F
(23% &*5  * 13) 291.27 143.62 T
2 F
(The string converts to the integer 23513) 63.65 127.62 T
(Again? \050yes/no\051:) 63.65 111.62 T
1 F
(no) 173.58 111.62 T
FMENDPAGE
%%EndPage: "15" 15
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 15
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Courier-Bold
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ NewCenturySchlbk-BoldItalic
%%EOF
