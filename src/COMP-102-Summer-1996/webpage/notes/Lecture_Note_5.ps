%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 19 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
8 0 /Times-Italic FMFONTDEFINE
9 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (1) 561.65 61.95 P
1 24 Q
(Arithmetic rules:) 63.65 728.95 T
0 20 Q
(Operand types) 63.65 678.62 T
(Result type) 279.65 678.62 T
(int & int) 63.65 636.62 T
(int) 279.65 636.62 T
(real & int) 63.65 594.62 T
(real) 279.65 594.62 T
(real & real) 63.65 552.62 T
(real) 279.65 552.62 T
1 24 Q
(T) 63.65 434.95 T
(ype conversion \050casting\051) 77.88 434.95 T
0 20 Q
(type \050variable\051;) 63.65 384.62 T
(type \050expression\051;) 63.65 342.62 T
(e.g.) 63.65 300.62 T
(\337oat \050int_var1\051 / int_var2) 99.65 258.62 T
(int \050total_HK_dollars * DOLLAR2CENTS\051) 99.65 216.62 T
63.65 663.95 378.65 663.95 2 L
N
225.65 699.95 225.65 537.95 2 L
N
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (2) 561.65 61.95 P
1 24 Q
(How to Run a Pr) 171.88 728.95 T
(ogram?) 344.77 728.95 T
63.65 96.95 531.65 744.95 C
63.65 128.95 531.65 671.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
202.2 593.95 310.2 665.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
202.2 431.95 310.2 503.95 R
N
274.2 269.95 382.2 341.95 R
N
259.5 515.49 256.2 503.95 252.89 515.49 256.2 515.49 4 Y
V
256.2 593.95 256.2 515.49 2 L
N
307.09 353.55 310.19 341.96 301.42 350.15 304.26 351.85 4 Y
V
256.2 431.95 304.26 351.84 2 L
N
346.2 431.95 454.2 503.95 R
N
354.96 350.15 346.19 341.96 349.29 353.55 352.13 351.85 4 Y
V
400.2 431.95 352.13 351.84 2 L
N
331.5 227.49 328.2 215.95 324.89 227.49 328.2 227.49 4 Y
V
328.2 269.95 328.2 227.49 2 L
N
2 14 Q
(Source) 229.2 638.95 T
(Program) 229.2 624.95 T
(Object) 229.2 476.95 T
(Module) 229.2 462.95 T
(Object/Library) 355.2 470.82 T
(Module) 355.2 457.64 T
(Load) 301.2 305.95 T
(Module) 301.2 291.95 T
(Linker) 301.2 386.95 T
(Compiler) 274.2 548.95 T
274.2 161.95 382.2 215.95 18 RR
N
(Execute) 301.2 187.64 T
262.66 192.26 274.2 188.95 262.66 185.64 262.66 188.95 4 Y
V
103.2 188.95 262.66 188.95 2 L
N
469.66 192.26 481.2 188.95 469.66 185.64 469.66 188.95 4 Y
V
382.2 188.95 469.66 188.95 2 L
N
(Input) 67.2 187.64 T
(Output) 481.2 187.64 T
(High-) 121.2 638.95 T
(Level) 121.2 624.95 T
(Language) 121.2 610.95 T
(Machine) 121.2 476.95 T
(Language) 121.2 462.95 T
112.2 134.95 472.2 575.95 18 RR
0 Z
3 X
N
0 X
(RUN) 418.2 587.82 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (3) 561.65 61.95 P
3 16 Q
(Functions) 255.73 700.29 T
2 14 Q
(o) 135.22 667.62 T
(facilitate top-down design) 161.85 667.62 T
(-) 178.85 641.62 T
(decomposition) 200.45 641.62 T
(-) 178.85 615.62 T
(information hiding) 200.45 615.62 T
(-) 178.85 589.62 T
(easily understandable) 200.45 589.62 T
(-) 178.85 563.62 T
(easily modi\336able) 200.45 563.62 T
(o) 135.22 537.62 T
(reusability) 161.85 537.62 T
63.65 96.95 531.65 744.95 C
63.65 319.95 531.65 532.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.65 336.95 351.65 417.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
232.11 412.26 243.65 408.95 232.11 405.65 232.11 408.95 4 Y
V
153.65 408.95 232.11 408.95 2 L
N
232.11 403.26 243.65 399.95 232.11 396.65 232.11 399.95 4 Y
V
153.65 399.95 232.11 399.95 2 L
N
232.11 349.26 243.65 345.95 232.11 342.65 232.11 345.95 4 Y
V
153.65 345.95 232.11 345.95 2 L
N
4 14 Q
(\245) 189.65 381.95 T
(\245) 189.65 367.95 T
(\245) 189.65 353.95 T
412.11 376.26 423.65 372.95 412.11 369.65 412.11 372.95 4 Y
V
351.65 372.95 412.11 372.95 2 L
N
2 F
(Function) 270.65 372.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (4) 561.65 61.95 P
3 16 Q
(Functions \050Cont\325d\051) 219.94 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Function Prototype \050) 89.65 683.62 T
3 F
(.h) 223.17 683.62 T
2 F
( \336les\051) 236.65 683.62 T
5 16 Q
(<type> <function identif) 99.65 656.29 T
(ier>\050<type list>\051;) 330.05 656.29 T
2 14 Q
(\245) 63.65 532.62 T
(Function De\336nition\050) 89.65 532.62 T
3 F
(.cpp) 221.09 532.62 T
2 F
( \336les\051) 251.45 532.62 T
5 16 Q
(<type> <function identif) 99.65 505.29 T
(ier>\050<parameters>\051) 330.05 505.29 T
({) 99.65 487.29 T
(<local declarations>) 117.65 469.29 T
(<sequences of statements>) 117.65 451.29 T
(}) 99.65 433.29 T
2 14 Q
(\245) 63.65 309.62 T
(Call) 89.65 309.62 T
5 16 Q
(<function name>\050<arguments>\051) 99.65 282.29 T
2 14 Q
(o) 135.22 247.62 T
(result of function call is a value of type <type>) 161.85 247.62 T
(o) 135.22 221.62 T
(arguments match parameters) 161.85 221.62 T
63.65 96.95 531.65 744.95 C
63.65 573.95 531.65 632.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135.65 578.95 495.65 623.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
5 16 Q
(<type>, <type>, \245\245\245) 180.65 601.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
63.65 350.95 531.65 409.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135.65 355.95 495.65 400.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
5 16 Q
(<type> <identif) 180.65 378.95 T
(ier>, \245\245\245) 324.65 378.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (5) 561.65 61.95 P
3 16 Q
(Some  Mathematical Functions in math.h) 126.78 734.29 T
3 14 Q
(Purpose) 207.65 685.62 T
2 F
(\245) 63.65 639.62 T
(log\050x\051) 89.65 639.62 T
(ln\050x\051 - natural log of x \050base e\051 for x>0.) 207.65 639.62 T
(\245) 63.65 593.62 T
(log10\050x\051) 89.65 593.62 T
(base 10 log of x for x>0.) 207.65 593.62 T
(\245) 63.65 547.62 T
(exp\050x\051) 89.65 547.62 T
(e to the power x, where e=2.71823) 207.65 547.62 T
(\245) 63.65 501.62 T
(pow\050x,y\051) 89.65 501.62 T
(x to the power y) 207.65 501.62 T
(\245) 63.65 455.62 T
(sqrt\050x\051) 89.65 455.62 T
(positive square root of x) 207.65 455.62 T
(\245) 63.65 409.62 T
(ceil\050x\051) 89.65 409.62 T
(smallest integer not less than x) 207.65 409.62 T
(\245) 63.65 363.62 T
(\337oor\050x\051) 89.65 363.62 T
(largest integer not greater than x) 207.65 363.62 T
(\245) 63.65 317.62 T
(sin\050x\051, cos\050x\051, tan\050x\051,\245\245\245) 89.65 317.62 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (6) 561.65 61.95 P
3 16 Q
(Example) 261.35 734.29 T
2 14 Q
(\245) 63.65 683.62 T
(Example program:) 89.65 683.62 T
5 16 Q
(// Convert inches to feet and inches) 63.65 638.29 T
(// Input: inches) 63.65 620.29 T
(// Output: feet and inches) 63.65 602.29 T
(#include <iostream.h>) 63.65 566.29 T
(void main\050\051 {) 63.65 530.29 T
(     /* inches to feet conversion factor */) 63.65 494.29 T
(     const int in2feet = 12;) 63.65 476.29 T
(     int  inches; /* number of inches */) 63.65 440.29 T
(     cout<< "Enter number in inches: ";) 63.65 404.29 T
(     cin >> inches;) 63.65 386.29 T
(     cout<< inches / in2feet << " feet ") 63.65 350.29 T
(         << inches % in2feet << " inches ") 63.65 332.29 T
(         << endl;) 63.65 314.29 T
(}) 63.65 296.29 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (7) 561.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Example \050Cont\325d\051) 220.71 731.62 T
0 0 0 1 0 0 0 K
6 16 Q
0 0 0 1 0 0 0 K
(// File main.cpp) 63.65 672.29 T
5 F
(// Input  inches) 63.65 654.29 T
(// Output feet and inches) 63.65 636.29 T
(#include <iostream.h>) 63.65 600.29 T
(// Function Prototype) 63.65 564.29 T
(int) 63.65 546.29 T
6 F
(feet) 102.05 546.29 T
5 F
(\050int\051;) 140.45 546.29 T
(int) 63.65 528.29 T
6 F
(rinches) 102.05 528.29 T
5 F
(\050int\051;) 169.25 528.29 T
(void) 63.65 474.29 T
6 F
(main) 111.65 474.29 T
5 F
(\050\051 {) 150.05 474.29 T
(     int  inches;       // Number of inches) 63.65 456.29 T
(     cout << "Inches: ";) 63.65 420.29 T
(     cin >> inches;) 63.65 402.29 T
(     cout <<) 63.65 384.29 T
6 F
(feet) 188.45 384.29 T
5 F
(\050inches\051 << " feet  ") 226.85 384.29 T
(          <<) 63.65 366.29 T
6 F
(rinches) 188.45 366.29 T
5 F
(\050inches\051 << " inches") 255.65 366.29 T
(          << endl;) 63.65 348.29 T
(}) 63.65 330.29 T
(// Functions for Converting inches to feet) 63.65 294.29 T
(const int i2ffactor = 12;  // conversion factor) 63.65 276.29 T
(int) 63.65 258.29 T
6 F
(feet) 102.05 258.29 T
5 F
(\050int inches\051 {) 140.45 258.29 T
(     return inches / i2ffactor;) 63.65 240.29 T
(}) 63.65 222.29 T
(int) 63.65 204.29 T
6 F
(rinches) 102.05 204.29 T
5 F
(\050int inches\051 {) 169.25 204.29 T
(     return inches % i2ffactor;) 63.65 186.29 T
(}) 63.65 168.29 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (8) 561.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Example \050Cont\325d\051) 220.71 731.62 T
0 0 0 1 0 0 0 K
6 16 Q
0 0 0 1 0 0 0 K
(// File i2f.h) 63.65 690.29 T
5 F
(int) 63.65 672.29 T
6 F
(feet) 102.05 672.29 T
5 F
(\050int\051;) 140.45 672.29 T
(int) 63.65 654.29 T
6 F
(rinches) 102.05 654.29 T
5 F
(\050int\051;) 169.25 654.29 T
6 F
(// File i2f.cpp) 63.65 600.29 T
5 F
(// Functions for Converting inches to feet) 63.65 582.29 T
(const int i2ffactor = 12;  // conversion factor) 63.65 564.29 T
(int) 63.65 546.29 T
6 F
(feet) 102.05 546.29 T
5 F
(\050int inches\051 {) 140.45 546.29 T
(     return inches / i2ffactor;) 63.65 528.29 T
(}) 63.65 510.29 T
(int) 63.65 492.29 T
6 F
(rinches) 102.05 492.29 T
5 F
(\050int inches\051 {) 169.25 492.29 T
(     return inches % i2ffactor;) 63.65 474.29 T
(}) 63.65 456.29 T
6 F
(// File main.cpp) 63.65 402.29 T
5 F
(// Input  inches) 63.65 384.29 T
(// Output feet and inches) 63.65 366.29 T
(#include <iostream.h>) 63.65 330.29 T
(#include "i2f.h") 63.65 312.29 T
(void) 63.65 276.29 T
6 F
( main) 102.05 276.29 T
5 F
(\050\051 {) 150.05 276.29 T
(     int  inches;       // Number of inches) 63.65 258.29 T
(     cout << "Inches: ";) 63.65 222.29 T
(     cin >> inches;) 63.65 204.29 T
(     cout <<) 63.65 186.29 T
6 F
(feet) 188.45 186.29 T
5 F
(\050inches\051 << " feet  ") 226.85 186.29 T
(          <<) 63.65 168.29 T
6 F
(rinches) 188.45 168.29 T
5 F
(\050inches\051 << " inches") 255.65 168.29 T
(          << endl;) 63.65 150.29 T
(}) 63.65 132.29 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (9) 561.65 61.95 P
1 24 Q
( Structur) 164.1 728.95 T
(ed Pr) 257.65 728.95 T
(ogramming) 312.54 728.95 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 652.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( disciplined approach to programming) 77.39 652.62 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 601.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( easy to read and understand) 77.39 601.62 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 550.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( less likely to contain errors) 77.39 550.62 T
(Structured programming utilizes) 63.65 448.62 T
1 F
(contr) 328.63 448.62 T
(ol structur) 373.81 448.62 T
(es) 463.99 448.62 T
0 F
(to) 485.65 448.62 T
(control the \337ow of statement execution in a program.) 63.65 412.62 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 368.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( sequence) 77.39 368.62 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 317.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( selection) 77.39 317.62 T
0 1 1 0 1 0 0 K
6 16 Q
0 1 1 0 1 0 0 K
(\245) 63.65 266.62 T
0 0 0 1 0 0 0 K
0 20 Q
0 0 0 1 0 0 0 K
( iteration) 77.39 266.62 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (10) 555.65 61.95 P
63.65 114.95 531.65 762.95 C
63.65 114.95 531.65 738.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 20 Q
0 X
0 0 0 1 0 0 0 K
(W) 63.65 719.62 T
(rite a program as a sequence of control structures rather) 81.73 719.62 T
(than as a sequence of individual statements.) 63.65 683.62 T
207.65 521.29 351.65 593.29 R
7 X
V
3 H
2 Z
0 X
N
207.65 377.29 351.65 449.29 R
7 X
V
0 X
N
207.65 215.29 351.65 287.29 R
7 X
V
0 X
N
284.61 610.6 279.65 593.29 274.69 610.6 279.65 610.6 4 Y
V
279.65 656.29 279.65 610.6 2 L
2 H
N
284.61 466.6 279.65 449.29 274.69 466.6 279.65 466.6 4 Y
V
279.65 521.29 279.65 466.6 2 L
N
284.61 178.6 279.65 161.29 274.69 178.6 279.65 178.6 4 Y
V
279.65 215.29 279.65 178.6 2 L
N
0 18 Q
(Control) 225.65 561.2 T
(Structure  1) 225.65 536.02 T
(Control) 224.64 419.02 T
(Structure  2) 225.65 392.02 T
(Control) 225.65 255.2 T
(Structure  n) 225.65 228.2 T
284.61 304.6 279.65 287.29 274.69 304.6 279.65 304.6 4 Y
V
279.65 314.29 279.65 304.6 2 L
N
J
279.65 377.29 279.65 314.29 2 L
J
279.65 377.29 279.65 374.29 2 L
N
[5.344 7.125] 5.344 I
279.65 374.29 279.65 317.29 2 L
N
J
279.65 317.29 279.65 314.29 2 L
N
J
0 20 Q
(                one entry point and one exit point.) 63.65 143.29 T
63.65 114.95 531.65 762.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (1) 556.09 61.95 P
-3 (1) 561.65 61.95 P
3 18 Q
(The three basic sequences of processing) 63.65 732.95 T
2 F
(1\051 Sequence) 63.65 695.95 T
2 14 Q
(       For example:) 63.65 677.62 T
(            Add 1 to page_count) 63.65 645.62 T
(            Print heading line) 63.65 629.62 T
(            Set linecount to zero) 63.65 613.62 T
(            Read customer record) 63.65 597.62 T
(       Generic example:) 63.65 565.62 T
(            do  T) 63.65 533.62 T
(ask P) 141.64 533.62 T
(            do  T) 63.65 517.62 T
(ask Q) 141.64 517.62 T
(            do  T) 63.65 501.62 T
(ask R) 141.64 501.62 T
2 18 Q
(2\051 Selection) 63.65 450.95 T
2 14 Q
(       Generic example:) 63.65 411.62 T
(          if condition  is true then) 63.65 379.62 T
(              perform P) 63.65 363.62 T
(          otherwise) 63.65 347.62 T
(              perform Q) 63.65 331.62 T
(          end) 63.65 315.62 T
(          if condition  then) 63.65 283.62 T
(              perform R) 63.65 267.62 T
(           end) 63.65 251.62 T
2 18 Q
(3\051 Repetition) 63.65 200.95 T
2 14 Q
(     while condition is true) 63.65 166.62 T
(          do  T) 63.65 150.62 T
(ask  P) 133.86 150.62 T
(          do  T) 63.65 134.62 T
(ask  Q) 133.86 134.62 T
(          do  T) 63.65 118.62 T
(ask  R) 133.86 118.62 T
(      end) 63.65 102.62 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (12) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Relational Expr) 204.21 731.62 T
(ession) 339.97 731.62 T
0 0 0 1 0 0 0 K
0 16 Q
0 0 0 1 0 0 0 K
(Examples:) 117.65 690.29 T
(NumberOfStudents < 200) 135.65 657.29 T
(10 > 20) 135.65 624.29 T
(20 * J == 10 + I) 135.65 591.29 T
(Relational Operators:) 117.65 548.29 T
169.42 513.54 135.65 513.54 2 L
V
0.78 H
0 Z
N
(Math) 135.65 515.29 T
308.37 513.54 279.65 513.54 2 L
V
N
(C++) 279.65 515.29 T
(=) 135.65 482.29 T
(==) 279.65 482.29 T
(<) 135.65 449.29 T
(<) 279.65 449.29 T
7 14 Q
(\243) 135.65 416.29 T
0 16 Q
(<=) 279.65 416.29 T
(>) 135.65 383.29 T
(>) 279.65 383.29 T
7 14 Q
(\263) 135.65 350.29 T
0 16 Q
(>=) 279.65 350.29 T
7 14 Q
(\271) 135.65 317.29 T
0 16 Q
(!=) 279.65 317.29 T
(Operator precedence:) 135.65 274.29 T
(*   /   %) 135.65 241.29 T
(+   -) 135.65 208.29 T
(<    <=     >=     >) 135.65 175.29 T
(==   !=) 135.65 142.29 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (13) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Logical Operator) 223.49 731.62 T
0 0 0 1 0 0 0 K
0 16 Q
0 0 0 1 0 0 0 K
(T) 117.65 690.29 T
(o form more complex logical expressions or conditions.) 126.3 690.29 T
(Example:) 117.65 624.29 T
(\050NumberOfStudent > 100\051 && \050NumberOf Student < 200\051) 135.65 591.29 T
(! \050NumberOfStudent < 100\051) 135.65 558.29 T
(\050I >= 10\051 | | \050I <= 0\051) 135.65 525.29 T
(T) 117.65 459.29 T
(ruth table for \322&&\323:) 126.86 459.29 T
198.74 424.54 135.65 424.54 2 L
V
0.78 H
0 Z
N
(Operand1) 135.65 426.29 T
306.74 424.54 243.65 424.54 2 L
V
N
(Operand2) 243.65 426.29 T
510.72 424.54 351.65 424.54 2 L
V
N
(Operand1 && Operand2) 351.65 426.29 T
(1 \050T) 135.65 393.29 T
(rue\051) 162.19 393.29 T
(1 \050T) 243.65 393.29 T
(rue\051) 270.19 393.29 T
(1 \050T) 351.65 393.29 T
(rue\051) 378.19 393.29 T
(1 \050T) 135.65 360.29 T
(rue\051) 162.19 360.29 T
(0 \050False\051) 243.65 360.29 T
(0 \050False\051) 351.65 360.29 T
(0 \050False\051) 135.65 327.29 T
(1 \050T) 243.65 327.29 T
(rue\051) 270.19 327.29 T
(0 \050False\051) 351.65 327.29 T
(0 \050False\051) 135.65 294.29 T
(0 \050False\051) 243.65 294.29 T
(0 \050False\051) 351.65 294.29 T
(T) 117.65 195.29 T
(ruth table for \322or\323 and \322not\323:) 126.86 195.29 T
(\245\245\245) 135.65 162.29 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (14) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Logical Equivalence) 211.25 731.62 T
0 0 0 1 0 0 0 K
0 16 Q
0 0 0 1 0 0 0 K
(Example:) 117.65 690.29 T
(! \050\050I >= 10\051 | | \050I <= 0\051\051) 135.65 657.29 T
(is the same as) 135.65 624.29 T
(       ?      and     ?) 135.65 591.29 T
(! \050\050I > 10\051 && \050I <= 20\051\051) 135.65 492.29 T
(is the same as) 135.65 459.29 T
(      ?       or        ?) 135.65 426.29 T
(V) 117.65 327.29 T
(alue of logical expression) 127.42 327.29 T
(! \050X | | Y\051               is the same as       \050! X\051 && \050! Y\051) 135.65 294.29 T
(! \050X && Y\051           is the same as       \050! X\051 | | \050! Y\051) 135.65 261.29 T
(! \050! X\051                    is the same as      X) 135.65 228.29 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (15) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(Operator Pr) 207.03 731.62 T
(ecedence) 312.75 731.62 T
0 0 0 1 0 0 0 K
0 16 Q
0 0 0 1 0 0 0 K
(!) 117.65 690.29 T
(*     /        %) 117.65 657.29 T
(+     -) 117.65 624.29 T
(             <     <=      >=      >) 63.65 591.29 T
(==   !=) 117.65 558.29 T
(&&) 117.65 525.29 T
(| |) 117.65 492.29 T
(=) 117.65 459.29 T
(Examples:) 117.65 426.29 T
(\050I > 0\051 && \050I <= 10\051 | | \050I > 20\051 && \050I <= 30\051) 135.65 393.29 T
(is the same as) 135.65 360.29 T
(\050\050I > 0\051 && \050I <= 10\051\051 | | \050\050I > 20\051 && \050I <= 30\051\051) 135.65 327.29 T
(Suppose X, Min and Max are are of type \337oat,) 135.65 261.29 T
(Min <= X && X <= Max) 135.65 228.29 T
(is the same as) 135.65 195.29 T
(?) 135.65 162.29 T
(Again,) 135.65 129.29 T
8 F
(use par) 182.75 129.29 T
(entheses) 229.71 129.29 T
0 F
( to clarify) 283.92 129.29 T
(.) 345.09 129.29 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (16) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(If Statement) 244.61 731.62 T
0 0 0 1 0 0 0 K
5 16 Q
0 0 0 1 0 0 0 K
(if \050<) 99.65 672.29 T
9 F
(condition) 147.65 672.29 T
5 F
(>\051 {) 234.05 672.29 T
(<) 117.65 654.29 T
9 F
(sequence of statements) 127.25 654.29 T
5 F
(>) 338.45 654.29 T
(}) 99.65 636.29 T
(if \050<) 99.65 403.23 T
9 F
(condition) 147.65 403.23 T
5 F
(>\051 {) 234.05 403.23 T
(<) 117.65 385.23 T
9 F
(sequence of statements) 127.25 385.23 T
5 F
(>) 338.45 385.23 T
(} else {) 99.65 367.23 T
(<) 117.65 349.23 T
9 F
(sequence of statements) 127.25 349.23 T
5 F
(>) 338.45 349.23 T
(}) 99.65 331.23 T
63.65 96.95 531.65 744.95 C
231.1 451.9 364.19 630.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
300.11 588.95 282.11 570.95 300.11 552.95 318.11 570.95 4 Y
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
303.41 600.49 300.11 588.95 296.8 600.49 300.11 600.49 4 Y
V
300.11 624.95 300.11 600.49 2 L
N
317.35 495.93 305.82 499.24 317.35 502.55 317.35 499.24 4 Y
V
316.25 571.24 337.11 571.24 337.11 553.24 337.11 499.24 317.35 499.24 5 L
N
90 450 4.5 4.5 301.48 498.65 A
285.71 501.55 297.25 498.24 285.71 494.93 285.71 498.24 4 Y
V
280.68 570.95 264.11 570.95 264.11 498.24 285.71 498.24 4 L
N
304.66 469.43 301.36 457.9 298.05 469.43 301.36 469.43 4 Y
V
301.36 494.33 301.36 469.43 2 L
N
318.11 525.95 354.11 543.95 R
7 X
V
0 X
N
2 16 Q
(true) 327.11 579.95 T
(false) 237.1 579.95 T
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
63.65 96.95 531.65 744.95 C
231.1 128.84 364.19 307.9 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
300.11 265.9 282.11 247.9 300.11 229.9 318.11 247.9 4 Y
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
303.41 277.43 300.11 265.9 296.8 277.43 300.11 277.43 4 Y
V
300.11 301.9 300.11 277.43 2 L
N
317.35 172.88 305.82 176.18 317.35 179.49 317.35 176.18 4 Y
V
316.25 248.18 337.11 248.18 337.11 230.18 337.11 176.18 317.35 176.18 5 L
N
90 450 4.5 4.5 301.48 175.59 A
285.71 178.49 297.25 175.18 285.71 171.88 285.71 175.18 4 Y
V
280.68 247.9 264.11 247.9 264.11 175.18 285.71 175.18 4 L
N
304.66 146.38 301.36 134.84 298.05 146.38 301.36 146.38 4 Y
V
301.36 171.27 301.36 146.38 2 L
N
318.11 202.9 354.11 220.9 R
7 X
V
0 X
N
2 16 Q
(true) 327.11 256.9 T
(false) 237.1 256.9 T
247.1 202.47 283.1 220.47 R
7 X
V
0 X
N
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 87.95 567.65 771.95 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
27.65 51.95 567.65 69.95 R
7 X
V
0 12 Q
0 X
(COMP102 \050Summer 96\051) 27.65 61.95 T
(Lecture 5) 274.82 61.95 T
-3 (17) 555.65 61.95 P
1 1 0 0 0 0 1 K
1 20 Q
1 1 0 0 0 0 1 K
(If Statement \050Cont\325d\051) 205.45 731.62 T
0 0 0 1 0 0 0 K
0 16 Q
0 0 0 1 0 0 0 K
(Example:) 63.65 690.29 T
5 14 Q
(// Compare two input integers) 63.65 640.62 T
(#include <iostream.h>) 63.65 598.62 T
(main\050\051 {) 63.65 556.62 T
(     int First,     // input f) 63.65 535.62 T
(irst number) 315.65 535.62 T
(         Second;    // input second number) 63.65 514.62 T
(     cout << \322Input two numbers: \322;) 63.65 472.62 T
(     cin >> First >> Second;) 63.65 451.62 T
(     if \050First > Second\051) 63.65 409.62 T
(          cout << First) 63.65 388.62 T
(               << \322 is greater than \322) 63.65 367.62 T
(               << Second << endl;) 63.65 346.62 T
(     else if \050First < Second\051) 63.65 325.62 T
(          cout << First) 63.65 304.62 T
(               << \322 is less than \322) 63.65 283.62 T
(               << Second << endl;) 63.65 262.62 T
(     else) 63.65 241.62 T
(          cout << First) 63.65 220.62 T
(               << \322 is equal to \322) 63.65 199.62 T
(               << Second << endl;) 63.65 178.62 T
(     return 0;) 63.65 136.62 T
(}) 63.65 115.62 T
FMENDPAGE
%%EndPage: "17" 17
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 17
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-BoldItalic
%%+ Courier
%%+ Courier-Bold
%%+ Symbol
%%+ Times-Italic
%%+ Courier-Oblique
%%EOF
