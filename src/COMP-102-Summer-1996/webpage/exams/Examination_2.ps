%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 11 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
8 0 /Courier-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(1 of 12) 371.92 318.1 T
1 10.3 Q
(The Hong Kong University of Science & T) 86.23 773.61 T
(echnology) 307.17 773.61 T
1 9.01 Q
(COMP 102: Computer Fundamentals & Programming) 99.78 755.81 T
0 7.72 Q
(Spring Semester) 189.05 739.29 T
(, 1996) 239.59 739.29 T
(FINAL EXAMINA) 184.61 728.34 T
(TION) 244.89 728.34 T
(29 May) 170.95 717.4 T
(, 1996 \0508:30am - 1) 194.26 717.4 T
(1:30am\051) 251.26 717.4 T
(STUDENT NAME:) 119.7 673.63 T
(___________________________) 212.39 673.63 T
(STUDENT NUMBER:) 119.7 662.69 T
(___________________________) 212.39 662.69 T
(DEP) 119.7 651.74 T
(AR) 133.58 651.74 T
(TMENT) 143.84 651.74 T
(:) 170.06 651.74 T
(___________________________) 212.39 651.74 T
(LAB. SECTION:) 119.7 640.8 T
(___________________________) 212.39 640.8 T
(Instructions to Students) 55.97 607.97 T
2 F
(\245) 55.97 597.03 T
(Check that you have all 12 pages.) 67.56 597.03 T
(\245) 55.97 586.09 T
(W) 67.56 586.09 T
(rite your name, student number) 74.71 586.09 T
(, department, and lab. section on this page.) 188.72 586.09 T
(\245) 55.97 575.14 T
(W) 67.56 575.14 T
(rite your student number on top right hand corner of each page.) 74.71 575.14 T
(\245) 55.97 564.2 T
(Answer all questions in the space provided.) 67.56 564.2 T
0 F
(For Use by Grader) 96.52 508.2 T
(Question 1-4) 96.52 495.97 T
(__________________ /   12) 189.21 495.97 T
(Question 5) 96.52 483.74 T
(__________________ /   16) 189.21 483.74 T
(Question 6) 96.52 471.51 T
(__________________ /     5) 189.21 471.51 T
(Question 7) 96.52 459.28 T
(__________________ /     5) 189.21 459.28 T
(Question 8) 96.52 447.05 T
(__________________ /     4) 189.21 447.05 T
(Question 9) 96.52 434.82 T
(__________________ /     3) 189.21 434.82 T
(Question 10) 96.52 422.59 T
(__________________ /   10) 189.21 422.59 T
(Question 1) 96.52 410.36 T
(1) 129.92 410.36 T
(__________________ /     8) 189.21 410.36 T
(Question 12) 96.52 398.13 T
(__________________ /   10) 189.21 398.13 T
(Question 13) 96.52 385.9 T
(__________________ /     5) 189.21 385.9 T
(Question 14) 96.52 373.67 T
(__________________ /    22) 189.21 373.67 T
(T) 96.52 350.5 T
(OT) 101.1 350.5 T
(AL:) 110.78 350.5 T
(__________________ / 100) 189.21 350.5 T
84.94 334.4 351.42 519.79 11.59 RR
0.32 H
0 Z
N
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(2 of 12) 765.87 318.1 T
0 7.72 Q
(1.) 449.92 775.33 T
3 F
-0.07 (\0503 points\051) 467.3 775.33 P
0 F
-0.07 (Which of the following variable names are) 500.21 775.33 P
4 F
-0.07 (valid) 633.8 775.33 P
0 F
-0.07 (? Check ONL) 649.25 775.33 P
-0.07 (Y those correct answers with a) 691.24 775.33 P
(\322Y\323) 467.3 766.32 T
(___ i. break) 473.09 748.3 T
(___ ii. end) 525.23 748.3 T
(___ iii. not) 588.31 748.3 T
(___ iv) 652.04 748.3 T
(. repeat) 671.06 748.3 T
(___ v) 473.09 739.29 T
(. begin) 489.97 739.29 T
(___ vi. comp102) 525.23 739.29 T
(___ vii. 4sale) 588.96 739.29 T
(___ viii. real) 652.04 739.29 T
(2.) 449.92 713.54 T
3 F
(\0503 points\051) 467.3 713.54 T
0 F
( Which of the following C++ statements are valid?) 498.41 713.54 T
(i\051) 478.89 695.51 T
5 F
(  enum yesno {yes, no} yn;) 483.6 695.51 T
0 F
(ii\051) 478.89 686.5 T
5 F
( enum grade {\325A\325,\325B\325,\325C\325,\325D\325,\325F\325};) 485.75 686.5 T
0 F
(iii\051) 478.89 677.49 T
5 F
( enum num {a, b=3, c, d, e=1, f, g};) 487.9 677.49 T
0 F
(iv\051) 478.89 668.48 T
5 F
( enum num2 {a=1, b=1, c=1};) 487.47 668.48 T
0 F
(a. i\051 and ii\051 only) 467.3 650.46 T
(b. i\051 ii\051 and iii\051 only) 467.3 641.44 T
(c. i\051 and iii\051  and iv\051 only) 467.3 632.43 T
(d. i\051, ii\051, iii\051 and iv\051) 467.3 623.42 T
(e.  none of the above) 467.3 614.41 T
(3.) 449.92 597.67 T
3 F
(\0503 points\051) 467.3 597.67 T
0 F
( Suppose) 498.41 597.67 T
3 F
(i) 528.45 597.67 T
0 F
( is an integer \050int i\051 and) 530.6 597.67 T
3 F
(A) 604.61 597.67 T
0 F
( is an array \050int A[10]\051.  The sequence of statements) 610.19 597.67 T
5 F
(               i = 20;) 449.92 588.66 T
(               A[i] = i;) 449.92 579.65 T
0 F
(a. causes a compile time error) 478.89 570.64 T
(b. always causes a run time error) 478.89 561.63 T
(c. has absolutely no ef) 478.89 552.61 T
(fect on your program) 547.61 552.61 T
(d. always causes some errors in your program behaviour) 478.89 543.6 T
(e. none of the above) 478.89 534.59 T
(Circle the best of answer a to e.) 467.3 516.57 T
(4.) 449.92 490.82 T
3 F
(\0503 points\051) 467.3 490.82 T
0 F
( What is the output of the following program?) 498.41 490.82 T
5 F
(#include <iostream.h>) 467.3 470.87 T
(void main\050\051 {) 467.3 461.85 T
(     for \050int i=0; i<\050i+5\051/2; i++\051 {) 467.3 452.84 T
(          cout << i;) 467.3 443.83 T
(     }) 467.3 434.82 T
(}) 467.3 425.81 T
0 F
(a. 0123) 478.89 405.85 T
(b. 012) 478.89 396.84 T
(c. 01) 478.89 387.83 T
(d. 0) 478.89 378.82 T
(e. none of the above) 478.89 369.81 T
(Circle the best of answer a to e.) 467.3 351.78 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(3 of 12) 371.92 318.1 T
0 7.72 Q
(5.) 55.97 775.33 T
3 F
(\0505 points\051) 73.35 775.33 T
0 F
(a.) 73.35 766.32 T
(Given the following bubble sort program) 84.94 766.32 T
5 F
(void bubble\050int data[], int size, int& count\051) 73.35 756.02 T
({) 73.35 747.01 T
(   int temp, rightmost, current;) 73.35 738 T
(   count = 0;) 73.35 719.97 T
(   rightmost = size - 1;) 73.35 710.96 T
(   while \050rightmost > 0\051 {) 73.35 701.95 T
(      current = 0;) 73.35 692.94 T
(      while \050\050current < rightmost\051\051 {) 73.35 683.93 T
(         count++;) 73.35 674.92 T
(         if \050data[current]>data[current+1]\051 {) 73.35 665.9 T
(            temp = data[current];) 73.35 656.89 T
(            data[current] = data[current+1];) 73.35 647.88 T
(            data[current+1] = temp;) 73.35 638.87 T
(         }) 73.35 629.86 T
(         current++;) 73.35 620.85 T
(      }) 73.35 611.83 T
(      rightmost--;) 73.35 602.82 T
(   }) 73.35 593.81 T
(}) 73.35 584.8 T
(#include <iostream.h>) 73.35 566.78 T
(#include <iomanip.h>) 73.35 557.76 T
(int main\050\051 {) 73.35 548.75 T
(   int A[8] = { 10,4,6,9,25,5,18,3 };) 73.35 539.74 T
(   int n;) 73.35 530.73 T
(   for \050int i=0; i<8; i++\051) 73.35 512.71 T
(      cout << setw\0503\051 << A[i];) 73.35 503.69 T
(   bubble\050A, 8, n\051;) 73.35 485.67 T
(   cout << endl;) 73.35 467.65 T
(   for \050int i=0; i<8; i++\051) 73.35 458.64 T
(      cout << setw\0503\051 << A[i];) 73.35 449.62 T
(   cout << endl << n << endl;) 73.35 431.6 T
(   return 0;) 73.35 422.59 T
(}) 73.35 413.58 T
0 F
(Show the output:) 73.35 393.62 T
55.97 334.4 391.98 780.48 C
61.76 336.98 386.18 391.05 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
84.94 374.31 96.52 385.9 R
7 X
0 0 0 1 0 0 0 K
V
0.32 H
2 Z
0 X
N
96.52 374.31 108.11 385.9 R
7 X
V
0 X
N
108.11 374.31 119.69 385.9 R
7 X
V
0 X
N
119.7 374.31 131.28 385.9 R
7 X
V
0 X
N
131.28 374.31 142.87 385.9 R
7 X
V
0 X
N
142.87 374.31 154.46 385.9 R
7 X
V
0 X
N
154.46 374.31 166.04 385.9 R
7 X
V
0 X
N
166.04 374.31 177.63 385.9 R
7 X
V
0 X
N
177.63 374.31 189.21 385.9 R
7 X
V
0 X
N
189.21 374.31 200.8 385.9 R
7 X
V
0 X
N
200.8 374.31 212.39 385.9 R
7 X
V
0 X
N
212.39 374.31 223.97 385.9 R
7 X
V
0 X
N
223.97 374.31 235.56 385.9 R
7 X
V
0 X
N
235.56 374.31 247.15 385.9 R
7 X
V
0 X
N
247.15 374.31 258.73 385.9 R
7 X
V
0 X
N
258.73 374.31 270.32 385.9 R
7 X
V
0 X
N
270.32 374.31 281.91 385.9 R
7 X
V
0 X
N
281.91 374.31 293.49 385.9 R
7 X
V
0 X
N
293.49 374.31 305.08 385.9 R
7 X
V
0 X
N
305.08 374.31 316.67 385.9 R
7 X
V
0 X
N
316.67 374.31 328.25 385.9 R
7 X
V
0 X
N
328.25 374.31 339.84 385.9 R
7 X
V
0 X
N
339.84 374.31 351.42 385.9 R
7 X
V
0 X
N
351.42 374.31 363.01 385.9 R
7 X
V
0 X
N
363.01 374.31 374.6 385.9 R
7 X
V
0 X
N
84.94 362.73 96.52 374.31 R
7 X
V
0 X
N
96.52 362.73 108.11 374.31 R
7 X
V
0 X
N
108.11 362.73 119.69 374.31 R
7 X
V
0 X
N
119.7 362.73 131.28 374.31 R
7 X
V
0 X
N
131.28 362.73 142.87 374.31 R
7 X
V
0 X
N
142.87 362.73 154.46 374.31 R
7 X
V
0 X
N
154.46 362.73 166.04 374.31 R
7 X
V
0 X
N
166.04 362.73 177.63 374.31 R
7 X
V
0 X
N
177.63 362.73 189.21 374.31 R
7 X
V
0 X
N
189.21 362.73 200.8 374.31 R
7 X
V
0 X
N
200.8 362.73 212.39 374.31 R
7 X
V
0 X
N
212.39 362.73 223.97 374.31 R
7 X
V
0 X
N
223.97 362.73 235.56 374.31 R
7 X
V
0 X
N
235.56 362.73 247.15 374.31 R
7 X
V
0 X
N
247.15 362.73 258.73 374.31 R
7 X
V
0 X
N
258.73 362.73 270.32 374.31 R
7 X
V
0 X
N
270.32 362.73 281.91 374.31 R
7 X
V
0 X
N
281.91 362.73 293.49 374.31 R
7 X
V
0 X
N
293.49 362.73 305.08 374.31 R
7 X
V
0 X
N
305.08 362.73 316.67 374.31 R
7 X
V
0 X
N
316.67 362.73 328.25 374.31 R
7 X
V
0 X
N
328.25 362.73 339.84 374.31 R
7 X
V
0 X
N
339.84 362.73 351.42 374.31 R
7 X
V
0 X
N
351.42 362.73 363.01 374.31 R
7 X
V
0 X
N
363.01 362.73 374.6 374.31 R
7 X
V
0 X
N
84.94 351.14 96.52 362.73 R
7 X
V
0 X
N
96.52 351.14 108.11 362.73 R
7 X
V
0 X
N
108.11 351.14 119.69 362.73 R
7 X
V
0 X
N
119.7 351.14 131.28 362.73 R
7 X
V
0 X
N
131.28 351.14 142.87 362.73 R
7 X
V
0 X
N
142.87 351.14 154.46 362.73 R
7 X
V
0 X
N
154.46 351.14 166.04 362.73 R
7 X
V
0 X
N
166.04 351.14 177.63 362.73 R
7 X
V
0 X
N
177.63 351.14 189.21 362.73 R
7 X
V
0 X
N
189.21 351.14 200.8 362.73 R
7 X
V
0 X
N
200.8 351.14 212.39 362.73 R
7 X
V
0 X
N
212.39 351.14 223.97 362.73 R
7 X
V
0 X
N
223.97 351.14 235.56 362.73 R
7 X
V
0 X
N
235.56 351.14 247.15 362.73 R
7 X
V
0 X
N
247.15 351.14 258.73 362.73 R
7 X
V
0 X
N
258.73 351.14 270.32 362.73 R
7 X
V
0 X
N
270.32 351.14 281.91 362.73 R
7 X
V
0 X
N
281.91 351.14 293.49 362.73 R
7 X
V
0 X
N
293.49 351.14 305.08 362.73 R
7 X
V
0 X
N
305.08 351.14 316.67 362.73 R
7 X
V
0 X
N
316.67 351.14 328.25 362.73 R
7 X
V
0 X
N
328.25 351.14 339.84 362.73 R
7 X
V
0 X
N
339.84 351.14 351.42 362.73 R
7 X
V
0 X
N
351.42 351.14 363.01 362.73 R
7 X
V
0 X
N
363.01 351.14 374.6 362.73 R
7 X
V
0 X
N
84.94 340.84 96.52 352.43 R
7 X
V
0 X
N
96.52 340.84 108.11 352.43 R
7 X
V
0 X
N
108.11 340.84 119.69 352.43 R
7 X
V
0 X
N
119.7 340.84 131.28 352.43 R
7 X
V
0 X
N
131.28 340.84 142.87 352.43 R
7 X
V
0 X
N
142.87 340.84 154.46 352.43 R
7 X
V
0 X
N
154.46 340.84 166.04 352.43 R
7 X
V
0 X
N
166.04 340.84 177.63 352.43 R
7 X
V
0 X
N
177.63 340.84 189.21 352.43 R
7 X
V
0 X
N
189.21 340.84 200.8 352.43 R
7 X
V
0 X
N
200.8 340.84 212.39 352.43 R
7 X
V
0 X
N
212.39 340.84 223.97 352.43 R
7 X
V
0 X
N
223.97 340.84 235.56 352.43 R
7 X
V
0 X
N
235.56 340.84 247.15 352.43 R
7 X
V
0 X
N
247.15 340.84 258.73 352.43 R
7 X
V
0 X
N
258.73 340.84 270.32 352.43 R
7 X
V
0 X
N
270.32 340.84 281.91 352.43 R
7 X
V
0 X
N
281.91 340.84 293.49 352.43 R
7 X
V
0 X
N
293.49 340.84 305.08 352.43 R
7 X
V
0 X
N
305.08 340.84 316.67 352.43 R
7 X
V
0 X
N
316.67 340.84 328.25 352.43 R
7 X
V
0 X
N
328.25 340.84 339.84 352.43 R
7 X
V
0 X
N
339.84 340.84 351.42 352.43 R
7 X
V
0 X
N
351.42 340.84 363.01 352.43 R
7 X
V
0 X
N
363.01 340.84 374.6 352.43 R
7 X
V
0 X
N
55.97 334.4 391.98 780.48 C
27 11.65 639 803.65 C
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(4 of 12) 765.87 318.1 T
0 7.72 Q
(b.) 467.3 775.33 T
3 F
-0.19 (\0508 points\051) 478.89 775.33 P
0 F
-0.19 ( It is obvious that the output parameter "count" of the bubble function only depends on the) 509.8 775.33 P
0.86 (size of the array "data",) 478.89 766.32 P
3 F
0.86 (not) 557.68 766.32 P
0 F
0.86 ( on the content of the input array elements.  That is, given an array) 568.41 766.32 P
0.17 (already sorted, the program still performs the same number of comparisons.  Modify the algorithm) 478.89 757.31 P
0 (to signi\336cantly reduce the number of comparisons when the input array is already sorted. Fill in the) 478.89 748.3 P
(following blanks to make your modi\336cation.) 478.89 739.29 T
5 F
(void bubble\050int data[], int size, int& count\051) 467.3 708.39 T
({) 467.3 699.38 T
(   int temp, rightmost, current;) 467.3 690.36 T
(   int contd = ____________________________________;) 467.3 672.34 T
(   count = 0;) 467.3 654.32 T
(   rightmost = size - 1;) 467.3 645.31 T
(   while \050\050rightmost > 0\051 ________________________________\051 {) 467.3 636.29 T
(      ______________________________________;) 467.3 618.27 T
(      current = 0;) 467.3 609.26 T
(      while \050\050current < rightmost\051{) 467.3 591.24 T
(         count++;) 467.3 582.22 T
(         if \050data[current]>data[current+1]\051 {) 467.3 573.21 T
(            ______________________________________;) 467.3 555.19 T
(            temp = data[current];) 467.3 546.18 T
(            data[current] = data[current+1];) 467.3 537.17 T
(            data[current+1] = temp;) 467.3 528.15 T
(         }) 467.3 519.14 T
(         current++;) 467.3 510.13 T
(      }) 467.3 501.12 T
(      rightmost--;) 467.3 492.11 T
(   }) 467.3 483.1 T
(}) 467.3 474.08 T
0 F
(c.) 467.3 447.05 T
3 F
0.92 (\0503 points\051) 478.89 447.05 P
0 F
0.92 (Given the above modi\336cation, if the input array is sorted and of size 10, what is the) 513.77 447.05 P
(output value of "count"?) 478.89 438.04 T
449.92 334.4 785.92 780.48 C
452.82 335.05 783.03 425.16 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
449.92 334.4 785.92 780.48 C
420.95 11.65 1032.95 803.65 C
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(5 of 12) 371.92 318.1 T
0 7.72 Q
(6.) 55.97 775.33 T
3 F
(\0505 points\051) 73.35 775.33 T
0 F
( Given the following program) 104.46 775.33 T
5 F
(#include <iostream.h>) 73.35 757.31 T
(main\050\051 {) 73.35 739.29 T
(     int i;) 73.35 730.27 T
(     int n = 0;) 73.35 721.26 T
(     do {) 73.35 712.25 T
(          cin >> i;) 73.35 703.24 T
(          cout << i;) 73.35 694.23 T
(          n++;) 73.35 685.22 T
(     } while \050\050i != -1\051&&\050n < 5\051\051;) 73.35 676.2 T
(     return 0;) 73.35 667.19 T
(}) 73.35 658.18 T
0 F
(and the input) 73.35 629.21 T
(Show the output:) 73.35 567.42 T
55.97 334.4 391.98 780.48 C
61.76 586.73 386.18 615.7 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
84.94 596.39 96.52 607.97 R
7 X
0 0 0 1 0 0 0 K
V
0.32 H
2 Z
0 X
N
96.52 596.39 108.11 607.97 R
7 X
V
0 X
N
108.11 596.39 119.69 607.97 R
7 X
V
0 X
N
119.7 596.39 131.28 607.97 R
7 X
V
0 X
N
131.28 596.39 142.87 607.97 R
7 X
V
0 X
N
142.87 596.39 154.46 607.97 R
7 X
V
0 X
N
154.46 596.39 166.04 607.97 R
7 X
V
0 X
N
166.04 596.39 177.63 607.97 R
7 X
V
0 X
N
177.63 596.39 189.21 607.97 R
7 X
V
0 X
N
189.21 596.39 200.8 607.97 R
7 X
V
0 X
N
200.8 596.39 212.39 607.97 R
7 X
V
0 X
N
212.39 596.39 223.97 607.97 R
7 X
V
0 X
N
223.97 596.39 235.56 607.97 R
7 X
V
0 X
N
235.56 596.39 247.15 607.97 R
7 X
V
0 X
N
247.15 596.39 258.73 607.97 R
7 X
V
0 X
N
258.73 596.39 270.32 607.97 R
7 X
V
0 X
N
270.32 596.39 281.91 607.97 R
7 X
V
0 X
N
281.91 596.39 293.49 607.97 R
7 X
V
0 X
N
293.49 596.39 305.08 607.97 R
7 X
V
0 X
N
305.08 596.39 316.67 607.97 R
7 X
V
0 X
N
316.67 596.39 328.25 607.97 R
7 X
V
0 X
N
328.25 596.39 339.84 607.97 R
7 X
V
0 X
N
339.84 596.39 351.42 607.97 R
7 X
V
0 X
N
351.42 596.39 363.01 607.97 R
7 X
V
0 X
N
363.01 596.39 374.6 607.97 R
7 X
V
0 X
N
0 7.72 Q
(1   2    3                4    5    6          e          -     1          4         \134n) 90.73 602.18 T
55.97 334.4 391.98 780.48 C
27 11.65 639 803.65 C
55.97 334.4 391.98 780.48 C
61.76 368.52 386.18 564.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
84.94 530.09 96.52 541.67 R
7 X
0 0 0 1 0 0 0 K
V
0.32 H
2 Z
0 X
N
96.52 530.09 108.11 541.67 R
7 X
V
0 X
N
108.11 530.09 119.69 541.67 R
7 X
V
0 X
N
119.7 530.09 131.28 541.67 R
7 X
V
0 X
N
131.28 530.09 142.87 541.67 R
7 X
V
0 X
N
142.87 530.09 154.46 541.67 R
7 X
V
0 X
N
154.46 530.09 166.04 541.67 R
7 X
V
0 X
N
166.04 530.09 177.63 541.67 R
7 X
V
0 X
N
177.63 530.09 189.21 541.67 R
7 X
V
0 X
N
189.21 530.09 200.8 541.67 R
7 X
V
0 X
N
200.8 530.09 212.39 541.67 R
7 X
V
0 X
N
212.39 530.09 223.97 541.67 R
7 X
V
0 X
N
223.97 530.09 235.56 541.67 R
7 X
V
0 X
N
235.56 530.09 247.15 541.67 R
7 X
V
0 X
N
247.15 530.09 258.73 541.67 R
7 X
V
0 X
N
258.73 530.09 270.32 541.67 R
7 X
V
0 X
N
270.32 530.09 281.91 541.67 R
7 X
V
0 X
N
281.91 530.09 293.49 541.67 R
7 X
V
0 X
N
293.49 530.09 305.08 541.67 R
7 X
V
0 X
N
305.08 530.09 316.67 541.67 R
7 X
V
0 X
N
316.67 530.09 328.25 541.67 R
7 X
V
0 X
N
328.25 530.09 339.84 541.67 R
7 X
V
0 X
N
339.84 530.09 351.42 541.67 R
7 X
V
0 X
N
351.42 530.09 363.01 541.67 R
7 X
V
0 X
N
363.01 530.09 374.6 541.67 R
7 X
V
0 X
N
84.94 518.5 96.52 530.09 R
7 X
V
0 X
N
96.52 518.5 108.11 530.09 R
7 X
V
0 X
N
108.11 518.5 119.69 530.09 R
7 X
V
0 X
N
119.7 518.5 131.28 530.09 R
7 X
V
0 X
N
131.28 518.5 142.87 530.09 R
7 X
V
0 X
N
142.87 518.5 154.46 530.09 R
7 X
V
0 X
N
154.46 518.5 166.04 530.09 R
7 X
V
0 X
N
166.04 518.5 177.63 530.09 R
7 X
V
0 X
N
177.63 518.5 189.21 530.09 R
7 X
V
0 X
N
189.21 518.5 200.8 530.09 R
7 X
V
0 X
N
200.8 518.5 212.39 530.09 R
7 X
V
0 X
N
212.39 518.5 223.97 530.09 R
7 X
V
0 X
N
223.97 518.5 235.56 530.09 R
7 X
V
0 X
N
235.56 518.5 247.15 530.09 R
7 X
V
0 X
N
247.15 518.5 258.73 530.09 R
7 X
V
0 X
N
258.73 518.5 270.32 530.09 R
7 X
V
0 X
N
270.32 518.5 281.91 530.09 R
7 X
V
0 X
N
281.91 518.5 293.49 530.09 R
7 X
V
0 X
N
293.49 518.5 305.08 530.09 R
7 X
V
0 X
N
305.08 518.5 316.67 530.09 R
7 X
V
0 X
N
316.67 518.5 328.25 530.09 R
7 X
V
0 X
N
328.25 518.5 339.84 530.09 R
7 X
V
0 X
N
339.84 518.5 351.42 530.09 R
7 X
V
0 X
N
351.42 518.5 363.01 530.09 R
7 X
V
0 X
N
363.01 518.5 374.6 530.09 R
7 X
V
0 X
N
84.94 506.91 96.52 518.5 R
7 X
V
0 X
N
96.52 506.91 108.11 518.5 R
7 X
V
0 X
N
108.11 506.91 119.69 518.5 R
7 X
V
0 X
N
119.7 506.91 131.28 518.5 R
7 X
V
0 X
N
131.28 506.91 142.87 518.5 R
7 X
V
0 X
N
142.87 506.91 154.46 518.5 R
7 X
V
0 X
N
154.46 506.91 166.04 518.5 R
7 X
V
0 X
N
166.04 506.91 177.63 518.5 R
7 X
V
0 X
N
177.63 506.91 189.21 518.5 R
7 X
V
0 X
N
189.21 506.91 200.8 518.5 R
7 X
V
0 X
N
200.8 506.91 212.39 518.5 R
7 X
V
0 X
N
212.39 506.91 223.97 518.5 R
7 X
V
0 X
N
223.97 506.91 235.56 518.5 R
7 X
V
0 X
N
235.56 506.91 247.15 518.5 R
7 X
V
0 X
N
247.15 506.91 258.73 518.5 R
7 X
V
0 X
N
258.73 506.91 270.32 518.5 R
7 X
V
0 X
N
270.32 506.91 281.91 518.5 R
7 X
V
0 X
N
281.91 506.91 293.49 518.5 R
7 X
V
0 X
N
293.49 506.91 305.08 518.5 R
7 X
V
0 X
N
305.08 506.91 316.67 518.5 R
7 X
V
0 X
N
316.67 506.91 328.25 518.5 R
7 X
V
0 X
N
328.25 506.91 339.84 518.5 R
7 X
V
0 X
N
339.84 506.91 351.42 518.5 R
7 X
V
0 X
N
351.42 506.91 363.01 518.5 R
7 X
V
0 X
N
363.01 506.91 374.6 518.5 R
7 X
V
0 X
N
84.94 495.33 96.52 506.91 R
7 X
V
0 X
N
96.52 495.33 108.11 506.91 R
7 X
V
0 X
N
108.11 495.33 119.69 506.91 R
7 X
V
0 X
N
119.7 495.33 131.28 506.91 R
7 X
V
0 X
N
131.28 495.33 142.87 506.91 R
7 X
V
0 X
N
142.87 495.33 154.46 506.91 R
7 X
V
0 X
N
154.46 495.33 166.04 506.91 R
7 X
V
0 X
N
166.04 495.33 177.63 506.91 R
7 X
V
0 X
N
177.63 495.33 189.21 506.91 R
7 X
V
0 X
N
189.21 495.33 200.8 506.91 R
7 X
V
0 X
N
200.8 495.33 212.39 506.91 R
7 X
V
0 X
N
212.39 495.33 223.97 506.91 R
7 X
V
0 X
N
223.97 495.33 235.56 506.91 R
7 X
V
0 X
N
235.56 495.33 247.15 506.91 R
7 X
V
0 X
N
247.15 495.33 258.73 506.91 R
7 X
V
0 X
N
258.73 495.33 270.32 506.91 R
7 X
V
0 X
N
270.32 495.33 281.91 506.91 R
7 X
V
0 X
N
281.91 495.33 293.49 506.91 R
7 X
V
0 X
N
293.49 495.33 305.08 506.91 R
7 X
V
0 X
N
305.08 495.33 316.67 506.91 R
7 X
V
0 X
N
316.67 495.33 328.25 506.91 R
7 X
V
0 X
N
328.25 495.33 339.84 506.91 R
7 X
V
0 X
N
339.84 495.33 351.42 506.91 R
7 X
V
0 X
N
351.42 495.33 363.01 506.91 R
7 X
V
0 X
N
363.01 495.33 374.6 506.91 R
7 X
V
0 X
N
84.94 483.74 96.52 495.33 R
7 X
V
0 X
N
96.52 483.74 108.11 495.33 R
7 X
V
0 X
N
108.11 483.74 119.69 495.33 R
7 X
V
0 X
N
119.7 483.74 131.28 495.33 R
7 X
V
0 X
N
131.28 483.74 142.87 495.33 R
7 X
V
0 X
N
142.87 483.74 154.46 495.33 R
7 X
V
0 X
N
154.46 483.74 166.04 495.33 R
7 X
V
0 X
N
166.04 483.74 177.63 495.33 R
7 X
V
0 X
N
177.63 483.74 189.21 495.33 R
7 X
V
0 X
N
189.21 483.74 200.8 495.33 R
7 X
V
0 X
N
200.8 483.74 212.39 495.33 R
7 X
V
0 X
N
212.39 483.74 223.97 495.33 R
7 X
V
0 X
N
223.97 483.74 235.56 495.33 R
7 X
V
0 X
N
235.56 483.74 247.15 495.33 R
7 X
V
0 X
N
247.15 483.74 258.73 495.33 R
7 X
V
0 X
N
258.73 483.74 270.32 495.33 R
7 X
V
0 X
N
270.32 483.74 281.91 495.33 R
7 X
V
0 X
N
281.91 483.74 293.49 495.33 R
7 X
V
0 X
N
293.49 483.74 305.08 495.33 R
7 X
V
0 X
N
305.08 483.74 316.67 495.33 R
7 X
V
0 X
N
316.67 483.74 328.25 495.33 R
7 X
V
0 X
N
328.25 483.74 339.84 495.33 R
7 X
V
0 X
N
339.84 483.74 351.42 495.33 R
7 X
V
0 X
N
351.42 483.74 363.01 495.33 R
7 X
V
0 X
N
363.01 483.74 374.6 495.33 R
7 X
V
0 X
N
84.94 472.15 96.52 483.74 R
7 X
V
0 X
N
96.52 472.15 108.11 483.74 R
7 X
V
0 X
N
108.11 472.15 119.69 483.74 R
7 X
V
0 X
N
119.7 472.15 131.28 483.74 R
7 X
V
0 X
N
131.28 472.15 142.87 483.74 R
7 X
V
0 X
N
142.87 472.15 154.46 483.74 R
7 X
V
0 X
N
154.46 472.15 166.04 483.74 R
7 X
V
0 X
N
166.04 472.15 177.63 483.74 R
7 X
V
0 X
N
177.63 472.15 189.21 483.74 R
7 X
V
0 X
N
189.21 472.15 200.8 483.74 R
7 X
V
0 X
N
200.8 472.15 212.39 483.74 R
7 X
V
0 X
N
212.39 472.15 223.97 483.74 R
7 X
V
0 X
N
223.97 472.15 235.56 483.74 R
7 X
V
0 X
N
235.56 472.15 247.15 483.74 R
7 X
V
0 X
N
247.15 472.15 258.73 483.74 R
7 X
V
0 X
N
258.73 472.15 270.32 483.74 R
7 X
V
0 X
N
270.32 472.15 281.91 483.74 R
7 X
V
0 X
N
281.91 472.15 293.49 483.74 R
7 X
V
0 X
N
293.49 472.15 305.08 483.74 R
7 X
V
0 X
N
305.08 472.15 316.67 483.74 R
7 X
V
0 X
N
316.67 472.15 328.25 483.74 R
7 X
V
0 X
N
328.25 472.15 339.84 483.74 R
7 X
V
0 X
N
339.84 472.15 351.42 483.74 R
7 X
V
0 X
N
351.42 472.15 363.01 483.74 R
7 X
V
0 X
N
363.01 472.15 374.6 483.74 R
7 X
V
0 X
N
84.94 460.57 96.52 472.15 R
7 X
V
0 X
N
96.52 460.57 108.11 472.15 R
7 X
V
0 X
N
108.11 460.57 119.69 472.15 R
7 X
V
0 X
N
119.7 460.57 131.28 472.15 R
7 X
V
0 X
N
131.28 460.57 142.87 472.15 R
7 X
V
0 X
N
142.87 460.57 154.46 472.15 R
7 X
V
0 X
N
154.46 460.57 166.04 472.15 R
7 X
V
0 X
N
166.04 460.57 177.63 472.15 R
7 X
V
0 X
N
177.63 460.57 189.21 472.15 R
7 X
V
0 X
N
189.21 460.57 200.8 472.15 R
7 X
V
0 X
N
200.8 460.57 212.39 472.15 R
7 X
V
0 X
N
212.39 460.57 223.97 472.15 R
7 X
V
0 X
N
223.97 460.57 235.56 472.15 R
7 X
V
0 X
N
235.56 460.57 247.15 472.15 R
7 X
V
0 X
N
247.15 460.57 258.73 472.15 R
7 X
V
0 X
N
258.73 460.57 270.32 472.15 R
7 X
V
0 X
N
270.32 460.57 281.91 472.15 R
7 X
V
0 X
N
281.91 460.57 293.49 472.15 R
7 X
V
0 X
N
293.49 460.57 305.08 472.15 R
7 X
V
0 X
N
305.08 460.57 316.67 472.15 R
7 X
V
0 X
N
316.67 460.57 328.25 472.15 R
7 X
V
0 X
N
328.25 460.57 339.84 472.15 R
7 X
V
0 X
N
339.84 460.57 351.42 472.15 R
7 X
V
0 X
N
351.42 460.57 363.01 472.15 R
7 X
V
0 X
N
363.01 460.57 374.6 472.15 R
7 X
V
0 X
N
84.94 448.98 96.52 460.57 R
7 X
V
0 X
N
96.52 448.98 108.11 460.57 R
7 X
V
0 X
N
108.11 448.98 119.69 460.57 R
7 X
V
0 X
N
119.7 448.98 131.28 460.57 R
7 X
V
0 X
N
131.28 448.98 142.87 460.57 R
7 X
V
0 X
N
142.87 448.98 154.46 460.57 R
7 X
V
0 X
N
154.46 448.98 166.04 460.57 R
7 X
V
0 X
N
166.04 448.98 177.63 460.57 R
7 X
V
0 X
N
177.63 448.98 189.21 460.57 R
7 X
V
0 X
N
189.21 448.98 200.8 460.57 R
7 X
V
0 X
N
200.8 448.98 212.39 460.57 R
7 X
V
0 X
N
212.39 448.98 223.97 460.57 R
7 X
V
0 X
N
223.97 448.98 235.56 460.57 R
7 X
V
0 X
N
235.56 448.98 247.15 460.57 R
7 X
V
0 X
N
247.15 448.98 258.73 460.57 R
7 X
V
0 X
N
258.73 448.98 270.32 460.57 R
7 X
V
0 X
N
270.32 448.98 281.91 460.57 R
7 X
V
0 X
N
281.91 448.98 293.49 460.57 R
7 X
V
0 X
N
293.49 448.98 305.08 460.57 R
7 X
V
0 X
N
305.08 448.98 316.67 460.57 R
7 X
V
0 X
N
316.67 448.98 328.25 460.57 R
7 X
V
0 X
N
328.25 448.98 339.84 460.57 R
7 X
V
0 X
N
339.84 448.98 351.42 460.57 R
7 X
V
0 X
N
351.42 448.98 363.01 460.57 R
7 X
V
0 X
N
363.01 448.98 374.6 460.57 R
7 X
V
0 X
N
84.94 437.39 96.52 448.98 R
7 X
V
0 X
N
96.52 437.39 108.11 448.98 R
7 X
V
0 X
N
108.11 437.39 119.69 448.98 R
7 X
V
0 X
N
119.7 437.39 131.28 448.98 R
7 X
V
0 X
N
131.28 437.39 142.87 448.98 R
7 X
V
0 X
N
142.87 437.39 154.46 448.98 R
7 X
V
0 X
N
154.46 437.39 166.04 448.98 R
7 X
V
0 X
N
166.04 437.39 177.63 448.98 R
7 X
V
0 X
N
177.63 437.39 189.21 448.98 R
7 X
V
0 X
N
189.21 437.39 200.8 448.98 R
7 X
V
0 X
N
200.8 437.39 212.39 448.98 R
7 X
V
0 X
N
212.39 437.39 223.97 448.98 R
7 X
V
0 X
N
223.97 437.39 235.56 448.98 R
7 X
V
0 X
N
235.56 437.39 247.15 448.98 R
7 X
V
0 X
N
247.15 437.39 258.73 448.98 R
7 X
V
0 X
N
258.73 437.39 270.32 448.98 R
7 X
V
0 X
N
270.32 437.39 281.91 448.98 R
7 X
V
0 X
N
281.91 437.39 293.49 448.98 R
7 X
V
0 X
N
293.49 437.39 305.08 448.98 R
7 X
V
0 X
N
305.08 437.39 316.67 448.98 R
7 X
V
0 X
N
316.67 437.39 328.25 448.98 R
7 X
V
0 X
N
328.25 437.39 339.84 448.98 R
7 X
V
0 X
N
339.84 437.39 351.42 448.98 R
7 X
V
0 X
N
351.42 437.39 363.01 448.98 R
7 X
V
0 X
N
363.01 437.39 374.6 448.98 R
7 X
V
0 X
N
84.94 425.81 96.52 437.39 R
7 X
V
0 X
N
96.52 425.81 108.11 437.39 R
7 X
V
0 X
N
108.11 425.81 119.69 437.39 R
7 X
V
0 X
N
119.7 425.81 131.28 437.39 R
7 X
V
0 X
N
131.28 425.81 142.87 437.39 R
7 X
V
0 X
N
142.87 425.81 154.46 437.39 R
7 X
V
0 X
N
154.46 425.81 166.04 437.39 R
7 X
V
0 X
N
166.04 425.81 177.63 437.39 R
7 X
V
0 X
N
177.63 425.81 189.21 437.39 R
7 X
V
0 X
N
189.21 425.81 200.8 437.39 R
7 X
V
0 X
N
200.8 425.81 212.39 437.39 R
7 X
V
0 X
N
212.39 425.81 223.97 437.39 R
7 X
V
0 X
N
223.97 425.81 235.56 437.39 R
7 X
V
0 X
N
235.56 425.81 247.15 437.39 R
7 X
V
0 X
N
247.15 425.81 258.73 437.39 R
7 X
V
0 X
N
258.73 425.81 270.32 437.39 R
7 X
V
0 X
N
270.32 425.81 281.91 437.39 R
7 X
V
0 X
N
281.91 425.81 293.49 437.39 R
7 X
V
0 X
N
293.49 425.81 305.08 437.39 R
7 X
V
0 X
N
305.08 425.81 316.67 437.39 R
7 X
V
0 X
N
316.67 425.81 328.25 437.39 R
7 X
V
0 X
N
328.25 425.81 339.84 437.39 R
7 X
V
0 X
N
339.84 425.81 351.42 437.39 R
7 X
V
0 X
N
351.42 425.81 363.01 437.39 R
7 X
V
0 X
N
363.01 425.81 374.6 437.39 R
7 X
V
0 X
N
84.94 414.22 96.52 425.81 R
7 X
V
0 X
N
96.52 414.22 108.11 425.81 R
7 X
V
0 X
N
108.11 414.22 119.69 425.81 R
7 X
V
0 X
N
119.7 414.22 131.28 425.81 R
7 X
V
0 X
N
131.28 414.22 142.87 425.81 R
7 X
V
0 X
N
142.87 414.22 154.46 425.81 R
7 X
V
0 X
N
154.46 414.22 166.04 425.81 R
7 X
V
0 X
N
166.04 414.22 177.63 425.81 R
7 X
V
0 X
N
177.63 414.22 189.21 425.81 R
7 X
V
0 X
N
189.21 414.22 200.8 425.81 R
7 X
V
0 X
N
200.8 414.22 212.39 425.81 R
7 X
V
0 X
N
212.39 414.22 223.97 425.81 R
7 X
V
0 X
N
223.97 414.22 235.56 425.81 R
7 X
V
0 X
N
235.56 414.22 247.15 425.81 R
7 X
V
0 X
N
247.15 414.22 258.73 425.81 R
7 X
V
0 X
N
258.73 414.22 270.32 425.81 R
7 X
V
0 X
N
270.32 414.22 281.91 425.81 R
7 X
V
0 X
N
281.91 414.22 293.49 425.81 R
7 X
V
0 X
N
293.49 414.22 305.08 425.81 R
7 X
V
0 X
N
305.08 414.22 316.67 425.81 R
7 X
V
0 X
N
316.67 414.22 328.25 425.81 R
7 X
V
0 X
N
328.25 414.22 339.84 425.81 R
7 X
V
0 X
N
339.84 414.22 351.42 425.81 R
7 X
V
0 X
N
351.42 414.22 363.01 425.81 R
7 X
V
0 X
N
363.01 414.22 374.6 425.81 R
7 X
V
0 X
N
84.94 402.63 96.52 414.22 R
7 X
V
0 X
N
96.52 402.63 108.11 414.22 R
7 X
V
0 X
N
108.11 402.63 119.69 414.22 R
7 X
V
0 X
N
119.7 402.63 131.28 414.22 R
7 X
V
0 X
N
131.28 402.63 142.87 414.22 R
7 X
V
0 X
N
142.87 402.63 154.46 414.22 R
7 X
V
0 X
N
154.46 402.63 166.04 414.22 R
7 X
V
0 X
N
166.04 402.63 177.63 414.22 R
7 X
V
0 X
N
177.63 402.63 189.21 414.22 R
7 X
V
0 X
N
189.21 402.63 200.8 414.22 R
7 X
V
0 X
N
200.8 402.63 212.39 414.22 R
7 X
V
0 X
N
212.39 402.63 223.97 414.22 R
7 X
V
0 X
N
223.97 402.63 235.56 414.22 R
7 X
V
0 X
N
235.56 402.63 247.15 414.22 R
7 X
V
0 X
N
247.15 402.63 258.73 414.22 R
7 X
V
0 X
N
258.73 402.63 270.32 414.22 R
7 X
V
0 X
N
270.32 402.63 281.91 414.22 R
7 X
V
0 X
N
281.91 402.63 293.49 414.22 R
7 X
V
0 X
N
293.49 402.63 305.08 414.22 R
7 X
V
0 X
N
305.08 402.63 316.67 414.22 R
7 X
V
0 X
N
316.67 402.63 328.25 414.22 R
7 X
V
0 X
N
328.25 402.63 339.84 414.22 R
7 X
V
0 X
N
339.84 402.63 351.42 414.22 R
7 X
V
0 X
N
351.42 402.63 363.01 414.22 R
7 X
V
0 X
N
363.01 402.63 374.6 414.22 R
7 X
V
0 X
N
84.94 391.05 96.52 402.63 R
7 X
V
0 X
N
96.52 391.05 108.11 402.63 R
7 X
V
0 X
N
108.11 391.05 119.69 402.63 R
7 X
V
0 X
N
119.7 391.05 131.28 402.63 R
7 X
V
0 X
N
131.28 391.05 142.87 402.63 R
7 X
V
0 X
N
142.87 391.05 154.46 402.63 R
7 X
V
0 X
N
154.46 391.05 166.04 402.63 R
7 X
V
0 X
N
166.04 391.05 177.63 402.63 R
7 X
V
0 X
N
177.63 391.05 189.21 402.63 R
7 X
V
0 X
N
189.21 391.05 200.8 402.63 R
7 X
V
0 X
N
200.8 391.05 212.39 402.63 R
7 X
V
0 X
N
212.39 391.05 223.97 402.63 R
7 X
V
0 X
N
223.97 391.05 235.56 402.63 R
7 X
V
0 X
N
235.56 391.05 247.15 402.63 R
7 X
V
0 X
N
247.15 391.05 258.73 402.63 R
7 X
V
0 X
N
258.73 391.05 270.32 402.63 R
7 X
V
0 X
N
270.32 391.05 281.91 402.63 R
7 X
V
0 X
N
281.91 391.05 293.49 402.63 R
7 X
V
0 X
N
293.49 391.05 305.08 402.63 R
7 X
V
0 X
N
305.08 391.05 316.67 402.63 R
7 X
V
0 X
N
316.67 391.05 328.25 402.63 R
7 X
V
0 X
N
328.25 391.05 339.84 402.63 R
7 X
V
0 X
N
339.84 391.05 351.42 402.63 R
7 X
V
0 X
N
351.42 391.05 363.01 402.63 R
7 X
V
0 X
N
363.01 391.05 374.6 402.63 R
7 X
V
0 X
N
55.97 334.4 391.98 780.48 C
27 11.65 639 803.65 C
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(6 of 12) 765.87 318.1 T
0 7.72 Q
(7.) 449.92 775.33 T
3 F
(\0505 points\051) 467.3 775.33 T
0 F
(Consider the following C++ function:) 500.34 775.33 T
5 F
(void what\050int a[], int size\051 {) 467.3 757.31 T
(     int tmp;) 467.3 748.3 T
(     for \050int i=0; i<size/2; i++\051 {) 467.3 739.29 T
(          tmp = a[i];) 467.3 730.27 T
(          a[i] = a[size-i-1];) 467.3 721.26 T
(          a[size-i-1] = tmp;) 467.3 712.25 T
(     }) 467.3 703.24 T
(}) 467.3 694.23 T
0 F
(Explain in) 467.3 683.28 T
3 F
(no mor) 501.2 683.28 T
(e than two) 524.88 683.28 T
0 F
( sentences \050optionally) 559.2 683.28 T
(, with diagram\051 what the above function does.) 626.06 683.28 T
(8.) 449.92 573.21 T
3 F
(\0504 points\051) 467.3 573.21 T
0 F
(Fill in the blanks.) 467.3 562.27 T
(In C++, arrays are passed by ______________________________________) 467.3 551.33 T
(After passing an array) 467.3 529.44 T
(, say A \050int A[10]\051 to the following function,) 535.22 529.44 T
5 F
(int fct\050int a[]\051 {) 484.68 509.49 T
(\245\245\245) 496.26 500.48 T
(}) 484.68 491.46 T
0 F
(can the elements in A be altered by) 467.3 471.51 T
4 F
(fct) 577.99 471.51 T
0 F
(? \050Y) 585.71 471.51 T
(es or No\051 ____________________) 598.45 471.51 T
449.92 334.4 785.92 780.48 C
455.71 587.37 780.13 680.71 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
449.92 334.4 785.92 780.48 C
420.95 11.65 1032.95 803.65 C
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(7 of 12) 371.92 318.1 T
0 7.72 Q
(9.) 55.97 775.33 T
3 F
(\0503 points\051) 73.35 775.33 T
0 F
(Given the) 106.39 775.33 T
4 F
(struct) 138.57 775.33 T
0 F
(declaration:) 158.1 775.33 T
5 F
(struct student) 79.14 755.38 T
({) 79.14 746.36 T
(char name[20];) 90.73 737.35 T
(int  age;) 90.73 728.34 T
(}) 79.14 719.33 T
(student student1;) 79.14 701.31 T
0 F
(There is an obvious syntax error) 73.35 681.35 T
(. Correct the error) 172.68 681.35 T
(.) 227.59 681.35 T
(10.) 55.97 586.73 T
3 F
-0.08 (\05010 points) 73.35 586.73 P
-0.08 (\051) 105.67 586.73 P
0 F
-0.08 (  The following function ") 108.25 586.73 P
4 F
-0.08 (string2int) 188.45 586.73 P
0 F
-0.08 (" is supposed to convert a string of digits into an integer) 218.49 586.73 P
-0.08 (.) 390.05 586.73 P
0.43 (If the string contains non-digit characters before the end-of-string character) 73.35 577.72 P
0.43 (, a -1 is return.  Fill in the) 309.61 577.72 P
1.29 (following blanks to complete the function. No prede\336ned function should be used and no explicit) 73.35 568.71 P
(ASCII code value should be included.) 73.35 559.7 T
5 F
(int string2int\050char s[]\051 {) 73.35 539.74 T
(     int i = _______________________________________;) 73.35 521.72 T
(     int tmp = _____________________________________;) 73.35 503.69 T
(     int digit = ___________________________________;) 73.35 485.67 T
(     while \050digit && s[i] != ________________________\051) 73.35 467.65 T
(          if \050_____________________________________\051 {) 73.35 449.62 T
(               tmp = ________________________________;) 73.35 431.6 T
(               i++;) 73.35 422.59 T
(          } else) 73.35 413.58 T
(               ______________________________________;) 73.35 395.55 T
(     if \050digit\051) 73.35 377.53 T
(          return tmp;) 73.35 368.52 T
(     else) 73.35 359.51 T
(          return -1;) 73.35 350.5 T
(}) 73.35 341.48 T
55.97 334.4 391.98 780.48 C
61.76 600.89 386.18 678.78 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.97 334.4 391.98 780.48 C
27 11.65 639 803.65 C
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(8 of 12) 765.87 318.1 T
0 7.72 Q
(1) 449.92 775.33 T
(1.) 453.49 775.33 T
3 F
0.22 (\0508 points\051) 467.3 775.33 P
0 F
0.22 (There is an obvious semantic bug in the following binary search program.  Fix the program) 500.78 775.33 P
(by modifying) 467.3 766.32 T
3 F
(no mor) 511.07 766.32 T
(e than one line) 534.75 766.32 T
0 F
(.) 582.6 766.32 T
5 F
(// Searches an ordered array of integers) 467.3 748.3 T
(int binary\050int data[], // input: array) 467.3 739.29 T
(           int size,   // input: array size) 467.3 730.27 T
(           int value   // input: value to f) 467.3 721.26 T
(ind) 666.59 721.26 T
(            \051           // output: index if found) 467.3 712.25 T
(                        //         otherwise return -1) 467.3 703.24 T
({) 467.3 694.23 T
(     enum state {searching, found, absent} status;) 467.3 685.22 T
(     int lower, middle, upper, index;) 467.3 676.2 T
(     status = searching;) 467.3 658.18 T
(     lower = 0;) 467.3 649.17 T
(     upper = size;) 467.3 640.16 T
(     index = -1;) 467.3 631.15 T
(     while \050status == searching\051 {) 467.3 613.12 T
(          middle = \050lower + upper\051 / 2;) 467.3 604.11 T
(          if \050data[middle] == value\051 {) 467.3 595.1 T
(               status = found;) 467.3 586.09 T
(               index = middle;) 467.3 577.07 T
(          } else if \050lower > upper\051 {) 467.3 568.06 T
(               status = absent;) 467.3 559.05 T
(          } else if \050value < data[middle]\051 {) 467.3 550.04 T
(               upper = middle - 1;) 467.3 541.03 T
(          } else {) 467.3 532.02 T
(               lower = middle + 1;) 467.3 523 T
(          }) 467.3 513.99 T
(     }) 467.3 504.98 T
(     return index;) 467.3 495.97 T
(} // binary) 467.3 486.96 T
449.92 334.4 785.92 780.48 C
478.89 345.99 756.96 475.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
449.92 334.4 785.92 780.48 C
420.95 11.65 1032.95 803.65 C
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(9 of 12) 371.92 318.1 T
0 7.72 Q
(12.) 55.97 775.33 T
3 F
0.8 (\05010 points\051) 73.35 775.33 P
0 F
0.8 ( An integer number is said to be a perfect number if its factors, including 1 \050but not the) 109.13 775.33 P
1.32 (number itself\051, sum to the number) 73.35 766.32 P
1.32 (.  For example, 6 is a perfect number because 6 = 1+2+3. The) 184.63 766.32 P
0.12 (following program is supposed to determine and print all the perfect number between 1 and 1000.  Fill) 73.35 757.31 P
(in the blanks to complete the program.) 73.35 748.3 T
5 F
(#include <iostream.h>) 73.35 730.27 T
(_____________________________________________) 73.35 703.24 T
(main\050\051) 73.35 685.22 T
({) 73.35 676.2 T
(   cout << "For the integers from 1 to 1000:" << endl;) 73.35 667.19 T
(   for \050int j = 2; j <= 1000; j++\051) 73.35 649.17 T
(      if \050perfect\050j\051\051) 73.35 640.16 T
(         cout << j << " is perfect" << endl;) 73.35 631.15 T
(   return 0;) 73.35 613.12 T
(}) 73.35 604.11 T
(int perfect\050int value\051) 73.35 586.09 T
({) 73.35 577.07 T
(   int factorSum = __________________________) 73.35 559.05 T
(   for \050int i = 2; __________________________; i++\051) 73.35 532.02 T
(      if \050__________________________________\051) 73.35 513.99 T
(         factorSum += i;) 73.35 504.98 T
(   if \050factorSum == value\051) 73.35 486.96 T
(       ______________________________________) 73.35 468.93 T
(   else) 73.35 450.91 T
(      _______________________________________) 73.35 432.89 T
(}) 73.35 423.88 T
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(10 of 12) 762.33 318.1 T
0 7.72 Q
(13.) 449.92 775.33 T
3 F
(\0505 points\051) 467.3 775.33 T
0 F
( Given the following program) 498.41 775.33 T
5 F
(#include <iostream.h>) 467.3 757.31 T
(int main\050\051 {) 467.3 739.29 T
(     char name[20];) 467.3 730.27 T
(     cin >> name;) 467.3 721.26 T
(     cout << name;) 467.3 712.25 T
(     return 0;) 467.3 703.24 T
(}) 467.3 694.23 T
0 F
(and the input) 467.3 665.26 T
(Show the output:) 467.3 603.47 T
449.92 334.4 785.92 780.48 C
455.71 611.83 780.13 640.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
478.89 621.49 490.47 633.08 R
7 X
0 0 0 1 0 0 0 K
V
0.32 H
2 Z
0 X
N
490.47 621.49 502.06 633.08 R
7 X
V
0 X
N
502.06 621.49 513.64 633.08 R
7 X
V
0 X
N
513.64 621.49 525.23 633.08 R
7 X
V
0 X
N
525.23 621.49 536.82 633.08 R
7 X
V
0 X
N
536.82 621.49 548.4 633.08 R
7 X
V
0 X
N
548.4 621.49 559.99 633.08 R
7 X
V
0 X
N
559.99 621.49 571.58 633.08 R
7 X
V
0 X
N
571.58 621.49 583.16 633.08 R
7 X
V
0 X
N
583.16 621.49 594.75 633.08 R
7 X
V
0 X
N
594.75 621.49 606.34 633.08 R
7 X
V
0 X
N
606.34 621.49 617.92 633.08 R
7 X
V
0 X
N
617.92 621.49 629.51 633.08 R
7 X
V
0 X
N
629.51 621.49 641.09 633.08 R
7 X
V
0 X
N
641.09 621.49 652.68 633.08 R
7 X
V
0 X
N
652.68 621.49 664.27 633.08 R
7 X
V
0 X
N
664.27 621.49 675.85 633.08 R
7 X
V
0 X
N
675.85 621.49 687.44 633.08 R
7 X
V
0 X
N
687.44 621.49 699.03 633.08 R
7 X
V
0 X
N
699.03 621.49 710.61 633.08 R
7 X
V
0 X
N
710.61 621.49 722.2 633.08 R
7 X
V
0 X
N
722.2 621.49 733.79 633.08 R
7 X
V
0 X
N
733.79 621.49 745.37 633.08 R
7 X
V
0 X
N
745.37 621.49 756.96 633.08 R
7 X
V
0 X
N
756.96 621.49 768.54 633.08 R
7 X
V
0 X
N
0 7.72 Q
(c   h    a    n          t     a    i           m   a    n    \134n) 484.68 627.28 T
449.92 334.4 785.92 780.48 C
420.95 11.65 1032.95 803.65 C
449.92 334.4 785.92 780.48 C
455.71 334.4 780.13 600.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
478.89 576.43 490.47 588.02 R
7 X
0 0 0 1 0 0 0 K
V
0.32 H
2 Z
0 X
N
490.47 576.43 502.06 588.02 R
7 X
V
0 X
N
502.06 576.43 513.64 588.02 R
7 X
V
0 X
N
513.64 576.43 525.23 588.02 R
7 X
V
0 X
N
525.23 576.43 536.82 588.02 R
7 X
V
0 X
N
536.82 576.43 548.4 588.02 R
7 X
V
0 X
N
548.4 576.43 559.99 588.02 R
7 X
V
0 X
N
559.99 576.43 571.58 588.02 R
7 X
V
0 X
N
571.58 576.43 583.16 588.02 R
7 X
V
0 X
N
583.16 576.43 594.75 588.02 R
7 X
V
0 X
N
594.75 576.43 606.34 588.02 R
7 X
V
0 X
N
606.34 576.43 617.92 588.02 R
7 X
V
0 X
N
617.92 576.43 629.51 588.02 R
7 X
V
0 X
N
629.51 576.43 641.09 588.02 R
7 X
V
0 X
N
641.09 576.43 652.68 588.02 R
7 X
V
0 X
N
652.68 576.43 664.27 588.02 R
7 X
V
0 X
N
664.27 576.43 675.85 588.02 R
7 X
V
0 X
N
675.85 576.43 687.44 588.02 R
7 X
V
0 X
N
687.44 576.43 699.03 588.02 R
7 X
V
0 X
N
699.03 576.43 710.61 588.02 R
7 X
V
0 X
N
710.61 576.43 722.2 588.02 R
7 X
V
0 X
N
722.2 576.43 733.79 588.02 R
7 X
V
0 X
N
733.79 576.43 745.37 588.02 R
7 X
V
0 X
N
745.37 576.43 756.96 588.02 R
7 X
V
0 X
N
756.96 576.43 768.54 588.02 R
7 X
V
0 X
N
478.89 564.85 490.47 576.43 R
7 X
V
0 X
N
490.47 564.85 502.06 576.43 R
7 X
V
0 X
N
502.06 564.85 513.64 576.43 R
7 X
V
0 X
N
513.64 564.85 525.23 576.43 R
7 X
V
0 X
N
525.23 564.85 536.82 576.43 R
7 X
V
0 X
N
536.82 564.85 548.4 576.43 R
7 X
V
0 X
N
548.4 564.85 559.99 576.43 R
7 X
V
0 X
N
559.99 564.85 571.58 576.43 R
7 X
V
0 X
N
571.58 564.85 583.16 576.43 R
7 X
V
0 X
N
583.16 564.85 594.75 576.43 R
7 X
V
0 X
N
594.75 564.85 606.34 576.43 R
7 X
V
0 X
N
606.34 564.85 617.92 576.43 R
7 X
V
0 X
N
617.92 564.85 629.51 576.43 R
7 X
V
0 X
N
629.51 564.85 641.09 576.43 R
7 X
V
0 X
N
641.09 564.85 652.68 576.43 R
7 X
V
0 X
N
652.68 564.85 664.27 576.43 R
7 X
V
0 X
N
664.27 564.85 675.85 576.43 R
7 X
V
0 X
N
675.85 564.85 687.44 576.43 R
7 X
V
0 X
N
687.44 564.85 699.03 576.43 R
7 X
V
0 X
N
699.03 564.85 710.61 576.43 R
7 X
V
0 X
N
710.61 564.85 722.2 576.43 R
7 X
V
0 X
N
722.2 564.85 733.79 576.43 R
7 X
V
0 X
N
733.79 564.85 745.37 576.43 R
7 X
V
0 X
N
745.37 564.85 756.96 576.43 R
7 X
V
0 X
N
756.96 564.85 768.54 576.43 R
7 X
V
0 X
N
478.89 553.26 490.47 564.84 R
7 X
V
0 X
N
490.47 553.26 502.06 564.84 R
7 X
V
0 X
N
502.06 553.26 513.64 564.84 R
7 X
V
0 X
N
513.64 553.26 525.23 564.84 R
7 X
V
0 X
N
525.23 553.26 536.82 564.84 R
7 X
V
0 X
N
536.82 553.26 548.4 564.84 R
7 X
V
0 X
N
548.4 553.26 559.99 564.84 R
7 X
V
0 X
N
559.99 553.26 571.58 564.84 R
7 X
V
0 X
N
571.58 553.26 583.16 564.84 R
7 X
V
0 X
N
583.16 553.26 594.75 564.84 R
7 X
V
0 X
N
594.75 553.26 606.34 564.84 R
7 X
V
0 X
N
606.34 553.26 617.92 564.84 R
7 X
V
0 X
N
617.92 553.26 629.51 564.84 R
7 X
V
0 X
N
629.51 553.26 641.09 564.84 R
7 X
V
0 X
N
641.09 553.26 652.68 564.84 R
7 X
V
0 X
N
652.68 553.26 664.27 564.84 R
7 X
V
0 X
N
664.27 553.26 675.85 564.84 R
7 X
V
0 X
N
675.85 553.26 687.44 564.84 R
7 X
V
0 X
N
687.44 553.26 699.03 564.84 R
7 X
V
0 X
N
699.03 553.26 710.61 564.84 R
7 X
V
0 X
N
710.61 553.26 722.2 564.84 R
7 X
V
0 X
N
722.2 553.26 733.79 564.84 R
7 X
V
0 X
N
733.79 553.26 745.37 564.84 R
7 X
V
0 X
N
745.37 553.26 756.96 564.84 R
7 X
V
0 X
N
756.96 553.26 768.54 564.84 R
7 X
V
0 X
N
449.92 334.4 785.92 780.48 C
420.95 11.65 1032.95 803.65 C
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 11.65 639 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 247.81 792.71 T
(COMP102 Spring 96) 55.97 318.1 T
(HKUST) 212.17 318.1 T
(11 of 12) 368.38 318.1 T
0 7.72 Q
(14.) 55.97 775.33 T
3 F
0.5 (\05022 points) 73.35 775.33 P
6 F
0.5 (\051) 106.25 775.33 P
0 F
0.5 (W) 111.25 775.33 P
0.5 (rite a program that accepts a \336le name, reads text from the \336le and matches each word) 118.24 775.33 P
0.78 (read against an input pattern. The word is outputted if it matches \050partially or completely\051 the input) 73.35 766.32 P
-0 (pattern. Y) 73.35 757.31 P
-0 (ou may assume that the \336le contains only words.  Except for the \336rst and last word in the \336le,) 103.46 757.31 P
-0.02 (words are delimited by spaces and words are made up of no more than 20 lower case letters \050\325a\325 to \325z\325\051.) 73.35 748.3 P
(Y) 73.35 739.29 T
(ou can also assume that the \336le name has no more than 20 characters long.) 78.15 739.29 T
3 F
(Sample run:) 73.35 728.34 T
0 F
(\050user input are in) 116.27 728.34 T
4 F
(italic) 170.75 728.34 T
0 F
(\051) 186.63 728.34 T
5 F
(Input f) 79.14 719.33 T
(ilename =) 111.58 719.33 T
7 F
(word.txt) 157.93 719.33 T
5 F
(Input pattern =) 79.14 710.32 T
7 F
(exa) 153.3 710.32 T
5 F
(example) 79.14 692.3 T
(exact) 79.14 683.28 T
(exa) 79.14 674.27 T
(example) 79.14 665.26 T
(texas) 79.14 656.25 T
3 F
(Sample \336le:) 73.35 636.29 T
0 F
(word.txt) 114.12 636.29 T
5 F
(an example exact match exa an example partial match texas) 79.14 627.28 T
8 F
(<eof>) 343.31 627.28 T
3 F
0.1 (Note: Decompose your pr) 73.35 605.4 P
0.1 (ogram into appr) 157.8 605.4 P
0.1 (opriate modules \0502 points\051. Clearly specify and explain) 211.93 605.4 P
0.09 (the parameters in your functions \0503 points\051. Y) 96.52 596.39 P
0.09 (ou may lose up to 10 points if your pr) 246.91 596.39 P
0.09 (ogram) 370.53 596.39 P
-0.04 (is not easily understandable.  T) 96.52 587.37 P
-0.04 (o impr) 198.17 587.37 P
-0.04 (ove r) 220.09 587.37 P
-0.04 (eadability) 236.42 587.37 P
-0.04 (, please include comments and choose) 268.61 587.37 P
(meaningful variable names.) 96.52 578.36 T
6 F
(IMPORT) 73.35 556.48 T
(ANT) 102.96 556.48 T
(: Y) 117.84 556.48 T
(ou are not allowed to use any prede\336ned string functions.) 126.21 556.48 T
55.97 334.4 391.98 780.48 C
84.94 340.2 363.01 542.96 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.97 334.4 391.98 780.48 C
27 11.65 639 803.65 C
420.95 11.65 1032.95 803.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7.08 Q
0 X
0 0 0 1 0 0 0 K
(STUDENT NUMBER:______________________) 641.76 792.71 T
(COMP102 Spring 96) 449.92 318.1 T
(HKUST) 606.12 318.1 T
(12 of 12) 762.33 318.1 T
0 7.72 Q
(14.  \050Cont\325d\051) 449.92 775.33 T
FMENDPAGE
%%EndPage: "mini" 6
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier
%%+ Times-BoldItalic
%%+ Courier-Oblique
%%+ Courier-BoldOblique
%%EOF
