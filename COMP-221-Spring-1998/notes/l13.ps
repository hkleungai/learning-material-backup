%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: 3 0
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProcSet: pstops-clip 1 0
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/lcvx{dup load dup type dup/operatortype eq{pop exch pop}
 {/arraytype eq{dup xcheck{exch pop aload pop}
 {pop cvx}ifelse}{pop cvx}ifelse}ifelse}bind def
/pstopsmatrix matrix currentmatrix def
/pstopsxform matrix def
/defaultmatrix{pstopsmatrix exch pstopsxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/pathtoproc{[{currentpoint}stopped{$error/newerror false
 put{newpath}}{/newpath cvx 3 1 roll/moveto cvx 4 array
 astore cvx}ifelse]{[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}def
/initclip[/matrix lcvx/currentmatrix lcvx/pstopsmatrix cvx/setmatrix lcvx
 /pathtoproc lcvx/initclip lcvx/newpath lcvx
 0 0 /moveto lcvx 595.000000 0/rlineto lcvx
 0 842.000000/rlineto lcvx -595.000000 0/rlineto lcvx
 /closepath lcvx/clip lcvx
 /newpath lcvx/exec lcvx/setmatrix lcvx]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
%%EndProcSet
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 13 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 1 /Symbol FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
/pstopsxform pstopsmatrix matrix currentmatrix matrix invertmatrix matrix concatmatrix matrix invertmatrix store
%%EndSetup
%%Page: pstops 1
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 1) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(Resolution with Green\325) 110.72 728.95 T
(s T) 398.1 728.95 T
(rick) 433.88 728.95 T
2 18 Q
(1.) 85.25 638.95 T
(Put the list of asioms into c) 117.65 638.95 T
(lause form \050CNF\051.) 344.23 638.95 T
(2.) 85.25 591.95 T
(Negate the theorem, convert it to CNF) 117.65 591.95 T
(, and add) 435.76 591.95 T
(the) 117.65 570.95 T
1 F
(Answer predicate) 149.65 570.95 T
2 F
(.) 314.51 570.95 T
(3.) 85.25 523.95 T
(Until a atomic sentence with only the Answer) 117.65 523.95 T
(term is produced or there is no resolvable pair of) 117.65 502.95 T
(c) 117.65 481.95 T
(lauses) 125.51 481.95 T
(, do:) 177.41 481.95 T
(F) 153.65 439.95 T
(ind resolvable c) 165.47 439.95 T
(lauses) 294.7 439.95 T
(, resolve them, and) 346.59 439.95 T
(add the result to the list of c) 153.65 418.95 T
(lauses) 387.88 418.95 T
(.) 439.78 418.95 T
(4.) 85.25 371.95 T
(If a c) 117.65 371.95 T
(lause with only the Answer term is pro-) 158.85 371.95 T
-0.99 (duced, conc) 117.65 350.95 P
-0.99 (lude that the sequence of operations in) 211.18 350.95 P
(the Answer term is the required answer) 117.65 329.95 T
(.) 448.52 329.95 T
(5.) 85.25 282.95 T
(If there are no resolvable c) 117.65 282.95 T
(lauses) 339.19 282.95 T
(, conc) 391.09 282.95 T
(lude that) 436.95 282.95 T
(the required action cannot be performed.) 117.65 261.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 2) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(The Monkey-and-bananas problem) 81.67 728.95 T
0 20 Q
1.12 (A monk) 63.65 679.62 P
1.12 (e) 129.57 679.62 P
1.12 (y is in a room containing a chair and a b) 138.15 679.62 P
1.12 (unch of) 469.99 679.62 P
1.02 (bananas. The bananas are hanging from the ceiling out of) 63.65 655.62 P
0.66 (reach of the monk) 63.65 631.62 P
0.66 (e) 210.4 631.62 P
0.66 (y) 218.98 631.62 P
0.66 (. What sequence of actions will allo) 227.68 631.62 P
0.66 (w) 517.21 631.62 P
(the monk) 63.65 607.62 T
(e) 138.45 607.62 T
(y to get the bananas?) 147.03 607.62 T
0 18 Q
(Assume that the monk) 63.65 189.95 T
(e) 224.96 189.95 T
(y can perform three possible actions:) 232.69 189.95 T
(1.) 63.65 147.95 T
3 F
(pushchair\050x\051) 81.65 147.95 T
0 F
( -) 179.66 147.95 T
(Push chair to position x) 198.65 147.95 T
(2.) 63.65 126.95 T
3 F
(climbchair) 81.65 126.95 T
0 F
( -) 164.65 126.95 T
(monk) 198.65 126.95 T
(e) 239.47 126.95 T
(y climbs on top of the chair) 247.19 126.95 T
(3.) 63.65 105.95 T
3 F
(grasp) 81.65 105.95 T
0 F
( -) 124.65 105.95 T
(monk) 198.65 105.95 T
(e) 239.47 105.95 T
(y grasps the bananas) 247.19 105.95 T
63.65 96.95 531.65 744.95 C
0 0 0 1 0 0 0 K
127.15 203.95 468.15 582.95 C
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  22515    
326 367 326 367 0 134.15 224.95
/red <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000FFFFFFFFFFFF
FFFFC0C0C0C0C0C0C0C0C0C0C0C0A0A0A0A0A0A0A0A0A0A0A0A0808080808080
8080808080606060606060604040404040404040202020202020000000000000
> store
/green <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000FFFFC0C0A0A0
8060FFC0C0C0C0A0A0A0A0808080FFC0C0C0C0A0A0A0A0808080C0C0C0A0A0A0
8080806060808060606040406060404020200000404020200000404020200000
> store
/blue <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000FF00FF00FF00
0000FFFF804000FF804000FF8040FFFF804000FF804000FF8040FF8040FF8040
FF80408040804080400040004000400040004000400040004000400040004000
> store
 BEGINBITMAPCOLORc
z
U$BA
















Z
U$z"z
P<BAFFR5BA





















JQ
P:J.
P5FFFFBBFFBBD6BBC6BBD6BBC6FFJ0
P4BBBBBBBBBBFFC0BFC1BDFFBBBBBBFFJ2
P3FFC6BBFFFFBABABAFFD2BFC6BFD6BBC6BBJ4
P3BAFFBFFFBBBBFFBABAFFBFC1BDC1D2FFBBBBFFJ2
P4BAFFC6BFD2BBCABBBABAD2BFC6BFD6FFD6J3
P5BAFFBFC1BBBBBBBBBABABFC1BDC1BDBBBBFFJ2
P6BABFC6BBD2BBD6BBBAFFD2BFC6BFFFBBC6J2
P7BDC1FFBBBBBBCAFFFFC1BFC1BDC1D6BBBBJ(8*
P7BFD2C1CABBD2BBD2C1D2BFC6FFD6BBFFJ08"
P8C1BDBBBBBBBBBBBAC1BDC1BDC1FFBBFFJ18#
P7BDD6BDD6BBD6BBD6BAC6BFD2BFD6FFC6BBFFJ18#
P7BFC1C6BBBBBBBBBBFFC1D6C1BDC1FFBBD2BBJ08$
P8D2BFD6BBD6BBC6FFD6BDC6BFD2FFD6BBCABBJ19"
P7BDC1BDBBBBBBBBBBBFC0BFC1BDC1FFBBBBJ28%
P6FFBFC6BFD6BBC6BBD6BDD6BDD6BFD2BBCABDD6BBFFJ5
P65C1BDC1BDBBBBBBD6FFBFC1BDC1BDFFCABBBBBBBFBBJ5
P67D2BFD6BBCABBD6BBCABDCAC0CABFFFBBD2BBD6C0D6BBC6J5
P58BFC1BDC1BBBBBBBBBBC0BFC1BDC1BDBBBBBBBBC1BDBBBBBBJ5
P49FFBFC6BFD2BBD6BBD2BFD2BFD2BFD2BFD6BBD6FFD2BFCABBD6J5
P49C0BFC1BDBBCABBBBC1BDC1BFC1D2C1BBBBBBBBFFC1C6BBBBFFJ5
P38FFD2C1D2BBD6BBD2FFC6C1D2BFC6BFD2BBCABBC6BFD2BFD6J5
P47C1BDC1BBBBBBFFBFC1BDC1BDC1BFBBBBBBBBBBBFC1FFBBJ5
P2;FFBDCABFD2BBCAFFD2BFD2BFD6BFD2FFC6BBD6BBD2BFC6FFD2BBBAJ5
P1:FFC1BFC0D6BBBBFFBFC1BDC1C6C1BDFFBBBBBBBBD6C1BDC1BBBBJ5
P0;FFFFD2BFD2BBCAFFFFC0CABDD6BFC6BFD6BBD6BBFFBFD2BFD2BBCAJ5
P1;BFC1BDBBBBBBFFC1BDC1BFC0BFC1BBBBBBBBBBC0BFC1BDFFBBBBBAJ5
P/<FFCABDD6FFCABBD6BDD6BDD6BDD6BDFFBBC6BBD6FFCABDCAFFD6BBD6J5
P/<BDC1D2C1FFBBBBC1BDC1CAC1BDC1FFBBBBBBD6BBBDC1BDC1FFBBC6FFJ5
P.=D6BFD2BFFFBBD2C1C6BFD2BFD2BFD2FFD6BBD2BBCABFD2C1D2BBD6FFBAJ5
P-<FFC0BFC1FFBBBBBBBFC0BFC1BDC1BFBBBBBBBBBBBFC0BFC1BDBBBBBBJ5
P,>FFBFD2BFC6BBC6BBD6BDD6BFC6BFD2BBC6BBCABBFFBFD2BFD2BFCABBD6BAJ5
P+>FFC0CAC1FFBBBBBBBBC1C6C1BDC1BFBBBBBBD6BBFFC1BDC1BDFFFFBBBBFFJ5
P+>BFD2BFD2BBD6BBD6BFD2BFD2BFD2BBD6BBD6BBFFBDD6C0CABFFFBBD2BBBAJ5
P)?FFC1BDC1FFBBBBBBBBFFBDC1BFC1BDBBBBBBBBBBFFC1BDC1BDC1FFBBBBBBBAJ)85
P)BFC6BFFFBBD6BBC64BFD6BDCABBD6BBC6BBFFBFC6BFD2BFFFBBD6BBBAJ5
P'?FFC0D6C0FFBBBBBBBBBBD6FFFFC0BBBBBBBBD6FFFFC1BDC1BFC1C6BBBBBBFFJ-83
P&FFBFCABDD6BBD6BBC6BBD6BBCABBD6BBCAFFD2BFD2C1D2BFD2BBD6BBFFBAJ$s5
P&C0BDC1BB4FFBAFFBBBBFFFFC0BFC1BDC1BDC1FFFFBBBBBBBAJ5
P%?FFFFFFD2BBD6BBC6BBD6BBFFBABABABABAD6BDD6BDD6BFC6BFFFFFCABBFFBAJ*:/
P(BBBBBBBBBBD6FFBABAD2C1BDC1BFC0BFC1D2BBBBBBFFBAJ"8(<.
P%BAD6BBCAFFFFBABABBCABFC6C1C6FFFFBBD6BBFFBAJr=.
P&BAFFFFFFBDC1BBBBBBBBBBBBFFBAJ*
P7BBD2BBD6BBD2BBFFBAJ#R#
P4BABABABAJr
P6BA










































































J(
P,D3EEF7F7F0F6E8J*
P+E8EEFFE8D1F6F7FFC3J+
P*C3F7FFE9F8C3EFE1EFE1J+
P*BAD3EEE1FFC3FFC3F6D4J$8%
P+BAEBE5F7D3C4E8J*
P+E5FFD4FDC7F4C3E2E1J+
P*CFFFFFC3F9E2F7BAD4D3J+
P*E1D5F9CFFDE8F0BAE2D4J,8#
P*E3CFF9BCFFC3EDBAD4F7E2E0C3J1
P)CFEBCFF7D4FFE1EABAD3E6BAC3E7EFE7J1
P)D4F6E1F0F4EFEAF5BACFC7BAEEE8E1D4J1
P)E2EFC3F7E8F7E8F9BAD8CFC7FFC2DEE8J1
P)E8EFEEE8BAFFE8F4BADFC7E5E8BAE4E1J2
P(C7FDE3E8E2BAE8E9F0BAC3E1EFE1CFE7BAJ1
P(ECFFCFF1E5BAEEE1ECBABAE8E8E2C7E2J*8&
P(CBFDC3F6E1BAF7C7EFF7FFE1E5EFJ1
P(F7F7BAF0E2BAFFC3FFC3BAE1FFDFE3E8J+8%
P(E1F5BAF7F4C3C3E1E9D4E4BAE5EBJ2
P'D3E1F6C3EED9D3BAC3BABABAEACFBAE1E8J*8&
P'D5FFEFBABABABABABACFE2BABAEFJ$>#8#
P'BAF9C3BABAF0CFJ"B$
P(FDD4EDBAJ$<":#
P'D4FFD3E1EED8J$;#9$
P'E1F7C3EEEFC3FFE8J#:$:$
P(EFE7C3F6D4F7EFC3J$:$9%
P'BAE1EFD3E2BAE7E8C3BAJ":#:$
P)F6C3E7EFE1BAJ#:#9$
P(E2F4D8D1E7E8BAJ$9#9#
P(D4FDC7DED3EFD3J$9#8$
P(BAF9DEBABAD8F6BAJ#=#
P)F4D9F7E1J#="
P)EFD4EEJ#<$
P)FCE2C3EEE8J.
P'C3D8F7F7EEF7F6F1DED9E7F5C3J/
P&E7EFF6E6D4E2D4D4E8F1FDF7F9D3J#t%
P&EFC3BAC3E5F1CFJ#?%
P&EEBABABAEEE7J#B$
P%C3E8EFFFBCJ#B$
P%E9EEE1F7C7J#B$
P%EED4BAFFC3J$B$
P$C3F7BAC3F7D3J#C$
P$D3FFD3FDC3J#C$
P$C3EEC3F0D3J#C$
P$E7E2BAE6C7J#D#
P$E9E7E3DEJ$;%;#
P#D3F7C3D3C3D3CFEDE3J/9#
P#C3EEBABAC7E6E3F7FDF9FDF9F1E1EAE6J4
P#EEEFC3E7ECF0E2CFBAC3C3CFD4F5EADED9CFEAJ5
P"4C3FFFFE7C3BABABAD5E3E1E2D8BABABAC7E8FDFFJ4
P"E1F7BABABAE8EEFFFDEEF7F7FDF0C3CFBABAF0J"83
P"C3C3ECD8DFD4BABABABABAD5E1E2EED3C3F5E1J);)
P"E2FFC3FFC3BABABABABABAC3E7BAEAE6J&A&
P"C3EEF7FFBABAEAEDE8BAJ$D$<*
P"BABAE3F4EEC7EEF7F7FFF7F7FFEEE0J#C$;,
P$C3FDEFE7BAD5F7E8D3C3C3C3E7E9FFE8J$B#<"s%
P$D3F9E2F0E1F6BAD3EEFFD4J$B#;#>&
P$BAE8EEEEE6D4F7BABAE2FFD3J#B#;"A%
P%EDE8F7C3E2BAE7FFD5J#A$;#A%9$
P%E8EAC3EEBAD4FFBABAF7E0C3D3C3J#A#<#C-
P%EFE8E1E1E2F7E1FFE1E2E8F6F7F6E8EFE8C3J#B"<#C/
P%E8ECD5BAEEBAE2F7F7E7C3D3C3E1E8E7E1C3EEJ#A#="D%s%
P%BAEBC3FFE8BAD4FFC3BAD5FFF7D3J"A#=#>";$>&
P&ECBAE9E9D3D4BAEEE8BAC3E1FFE1J#B+90>'
P%C7E8F6F7EEEFE8EEEEC7DEEAD3D4EFF7FFFFFFFFF7E1D3BABAE1F7BABAC3E2F6C3J#B2:)?(
P%C3EEE9E1BABABABAC3EDF7FFCFBAC3FFFFFFFFFFFFFED5BAD4FFC3BABAF7EEBAD3C3J#A/@(<+
P%BAEDEEC3BAD3C3D3C3BABAC7FFC3D3F6FFFFF7C3D4FFC3D3C3E1C3E8FFE8FFEED3J"@09/9/
P&EAEFE1BAEEF7EFD4F6EEBABAF4F9F7FFF7F7E7D5E1E2D4E8D4E1E2D3E8F7C3D3E8F7E0D4E2D4E7E2E8E9FFC3J"?4u5
P&ECC3F0C3BAFFD4BABAC3EBECC3E3FFFFF7F7E9D4BA5D3E7D3FFE8DFE7EFE1C3BABABABABABAC3EED3F6E8J"?'8,@+<&
P&EAE1F4BAC3EEBABABAE5D4E6FFE2D3C3BABABABAD4EFFFE1C3BABABABAE1E9E1F7J#>&;(D&@%
P&EFC3D5FEBABAE2D9ECF9D4BABABABAE1FFE2BAD3FFFFFFJ#>&;%H%@#
P&E7BAC3F9C3BAF6D4F9DFBABAE8FFD3BAD4J#>':$J$A#
P&F7CFBAECD9CFF0C3EFE1BA4C3FFF7BAEFJ#?&9$J%A"
P&F6C7C3EEBAE6E1DEF0CF5BAC3FFE7E8J#?-=#B$A"
P&E2DED3F7C3BABABAD3E9F0E2D3C3D3D4BAEFEEEFJ#?$9+9$B$@$
P&E7D9BAE2E1D4F7FFDEEEF6BAD3E9E7C3FDE8C3FFE2E8E8FFJ#@"95>$?$
P&E1E5D35D3D9E5E2BABABABABABAE1E8C3BABAC8E8F6D5FFE1BAD4EED3E1D3J#@)<$8'?$>$
P&E2C7BAEFBAD8BACFF0BABAD4F6BABAC3D3C3D3BAE2D4E8E8C3J#A'9":$9%@#>$
P&E8DFE8BAEDEAE1EDC3D3EFD3BABAD3BAC3E8F7C3BAJ#A-8+A#<&
P&FFEAEEBAE8ECD9DEC7E8F9F5F3E7BAD4EEE8E1E2EEEFFEE2F7D4D3C3BABAF6J"A.8,=0
P'E5D4BAEBECC7DEEFE1CFC7ECEEE2BAC3E2EEF6E9C3D4F7F4D8E1E8FFFFF7F7EEF7D4D3E1BABAC3FFJ"A.9s$808"
P'C7E4ECFFD4E8D4D8E9E7BAC3BABABAC3BAE8C3E1BAEFF7E8D3D3C4E0C3D4FFE8E2D3J#A.A$80
P&F7C3BAF7EADFF9F4D5BABAC7EEF4C7BABABAE2C3E7E8BABABABAD3D4E2D3BABAC3J#B'8&E%8-
P&FDD3FDC7E5EEBABABABAE4F4D3BABAF7E1D3E8F7FFE8FFD5BAE7D3BAC3J#A&8"9$?%92
P&F7C3C3FFC3F7E1D3BAE8E2D3D4E2C3E1EEBAC3E8EEF7BABABABAEEC3E8F7BAE7J#A#8&9%;'8*9'
P&EFBABAEED3BAC3F9ECDBEAE5D3D3C3BAD3FFE7D4F7E1C3EFE1BAE1D4E2EEE1EEBAEFJ"C)95:'
P&E8E2DDEABABAF6FFF79E4FFF1F7ECBAC7ECF9F4EAEDC3C7ECC7CFF7D4BAD3EEBABAE8D4EFE1F7BAEEJ"C$8$859'
P&E3EAEEF5C8DFC3;C3F4DEBAE1F9F5E3CFC3BABAC7E5E7E2F7FFD4BABAC3EFC3E7E8BABAE8E7EEC3FFJ#C58(8&9)
P%FFED4ECF7F7E8BABABABABAD3F9E9BABAC3FFEEBABABABABAE4FDFFE8C7E1F7C7E6BAD3E8E8E1F7E8FFBAJ"B595
P&EA6C3E9EEC3F9EDD3C7D3C7EEFDE3D3BAD4EEBABAC3F7D46BAF7FFBABABAE2FDEFE7BABAC3D3D4F6E9BAE1E8FFBAJ"B28%9"90
P&E8EEC3BABACFE3FDEEE6E7C3BABAE9EEF7D4E1FFF9C3D4E7C3E3EDBABAC7FFE8BABABAEEE2FFJ"A$8(8%8%8$8%8+
P&E5E9E1BABABAE1BABABABAC2EEE1E2BAD4C3BAD3E1EFE8BAEFE1F7F4BABAC3EEF7BABABAJ"@$:$:'8#8%8.
P&EBE7E8BAC7F7E8CFD3CFE3F5D4BABAD3F5E1BAE2BABABABAE8E1BAE3FFFFFFFFJ"@#;$8*:%9#8&8#
P&E5FDC7BAC3E3DFE3FDF0BABAC3EAE2CFF0EFBAC3E1E6E3BAE6FFBABAJ"?$<)8+:)8"
P&EBC3F0BABACFE2BAC7CFD9E1BACFEACFE1D9E1E9ECBCBAD3BAE3E8DAEBFFBAJ"?#=)9,9*
P&E1D8F5CFEAEEBABABABABABABABAC3E1C3BABABABAE3BABABABAF0FFFFBABAJ"?#<%A$:#;%
P&ECDEF1D3F0E6BABABABAFFCFDEF7BABAJ$?#;%H+
P$FFFFBAE1F4D5EED3BAC2FFEBBACFD3ECF1FFFFJ"?$;$I)
P%F9DDF9C2E1E1BADEF7E1E7E4E5E3F5J"?$;#J*
P%E1EEE8BAD5BA4E7E2BABABABABABAEEJ#>$<"A$:&<$
P$FDC3C3E8BABAD3F7E8D3EAEFC8BABAEEFFJ#?#G%9&@"
P$F1BAF9C3CDF4D4BAD8EFECBABAFFJ"?%E,@#
P$ECBAD4F6D4F4E8C7BABAD3E6EAD3D3BABAEFJ#@&A-B"
P#FFD8BADFFFE1D3C3F7F7BABABAD5F6E8BABABAC3J#A(;'9$E"
P#FDC3BAFFF7F1E5D8CFD3D4E2EEE8BAEEC3BAD3J#B18%F$
P#FFE2E1EBDEC3EDF0EBF4F0EFF6E8E2E1C3BAC3EEC3BABAEEFFJ"B08%H"
P$E1BAF4D8BABABAC3E7E1E5E2BABABABAD3EEE9BAD4J"C#9&:&I"
P$E2D8E6BABABABABAC7ECF7E8BAE2J"A'>'J$
P$E1D8BABAEAECC7C3EEFDE4EEE14C3FFFFJ"@#8&9*J#
P$EFE3F5C3F7FDE7C3C7D4EEF7F7C3C2F9C34BAEEJ$>$82=#B"
P#BAF7C3CFE2C3BAEFFFFFFFF7F7FFF7E6C3C7C3BAE5E2BAE7C3C3J#>$9"9,=&@$
P$EEBAE3D3BAE8FFFFFFF0BABABABABAF0D3C3F7E8BAD3BAEEFFJ#=$@#:$=&A"
P$F7C3E6E8BAE2BACFF6BAE1F9E1C3F7E9J#<&9":#;#>&A"
P$FFD3C3F9FFF0CFF1DEBAD4F5C3FFE6E7E8F6J#<*8,9$8&A"
P$F7C3BACFF7F7FFEABACFFFF7E2BABACFC7E5EFEAF4BEC3D3D3BAF7FFEEE9EEJ#=(9,8%9'
P$EED3BAC3C3F1E5BAC3EEBAC7ECE4E1EEFFEDEAC3D3E8EFE8E1F7FFE8E7C3J#>59'?"
P$F9C3:BAEEE5BABAEEE1C3EFE8BACFF9C3BAF5F9EEEEF6C3F6EFF4D4EEBAEEFFFFF9CFE9J#>$859'?$
P$F5D3D3E1BA5EFBABAD8D4BAC3FDBAF0F7EEFFF7F7EFE1FFE1E3EFC2FFF9E6E8BAF6FFFFJ#>#9-8#8$9&@"
P$F7C3C7CFF4E1EFF4BABABAEAD4EFF4FFFFF7EFE1F6BAE5E9BAEAE1J$>#8&8&8*9&?"
P#FFF6BABABAE8FFF9FFE9E4FDF7F9FFFFFFEEFFFFFFEFFDC3C3FFC3F0DDC3J"?59#:'>"
P$E15D3D8BAE2EEFFECEEE3DEE4E5E8F7E1F7EEE8FFF7E2FFEABAE8E5EBFDC3E7J$?5:#:&>"
P"FFFFE25C3E8CFEEE2FFC2ECEFEEC3BAE9FFC3F7C3E1E9D4E8F5E1E2F6C3FFD3EFJ#?5:&>"
P#EEBA;D3E8E3F7F7F7BAEAE1BABAE1EEC3BABABAE1C3BAF7C3D3E8E1F9D4D3FFE1E1C3E1J$@*8%8+:&>"
P!FFFFC3C3FFEEEEEEF6C3F7BAEFE7BAE1BABAC3E1BAC3E1C3FFEFBCF9F4D9D3C3J"@):%9):&>"
P#BAD3EFF7ECE9F7E1FFE1BAFFD3BABABAD3E8EEFFD4BAE1F9E6C3D3J"A)82;%>#
P"E8C3ECF9E9E7D4D3C3D3F7BABAC3C3E7E9EEDFE1E2E1E7C3FDE2D5FDF0D3BAF4J$A)8#8.;%>#
P FFFFC3D3F9FFF7E1D3BABAE7D4BABABAC3D3E1F7EEE9C7E7EFBABAF7E8CFC7F7J"A#8#:#;r#=$>#
P"D3C3F7D3BAEFD3BAE1F0F5EABABAF1J%A&:&@#=$?$J';%D,:5;#
OMFFFFE3BAD3FDFFBABACFF0CFD9D3F5D4C7FDC3E5FFFFO(C3D3C3D3C3D3C3D3D4EFEEEFD4D3E8F7EEE1E8D4D38C8FFEFC8BAD3C3E1E2FFF7F7EEE8E1E8D3D3E1EFEEE8E2C3D4EFJ"8"B$<&?$=$?#J5<59#
OLFFC3C3F9E8E7E8BAE7CFC3FFD3D4FFD3C3F7O'9D3E1FFE1E2E7D5E7E9E7E2E7E2F6F7FFFFEEE1E8E1E8E1E8E1ID3C3EFF7F6E8E9D3E8F7F7F7E8E8EFF7FFECEBECF7FFE2D4C3C7CFC7CFE4E8E5FFD4BAC3E1E1EEE9E1E1F7J#B$<&?$=$?%J4r;5
P E2BAE1F5BCD5E7C3F9C3E1F6BAD3FFEABAE7FFFFO$E2FFE9EEEFE8E8EEE1D0E8E1E1E8D4C3BAEEEFBAO%D4EFE8EEE8F7EEF6F7FFFFF7FFF7FFF7E1E4EEFDE3E9F7FDF9E5EFE8FFEEECEAE9ECEBECEBFDF9F7F7EEF7F0EFEEF6EEE1E8C3J"8"C$<&?#>$@#J4B5
OKFFBAEEEABAD8DFC3FDE8E8E9C7EFFDBAE9O%EEE8EEC3BABABABABAD3C3E1C3EFE1EFD3E8D4O(BABABABABACFC7CFC3C3C3C7CFC2D3C3D3CFD3C3C7CFC7C3C3BAC3E1F7E8BABABABABABAD3C3DEC3D3E1E8E8E1E2C3C3F7F6E1EFE1C3J"D#='>#>$A"J3Gz5
OME1FFC8E6E3CFF0EECFE7E8DBFFF9BAO&BABAC3E1E2E7C3D3BABABABABABAD4E9E1BA4BA@D4EFF0EDEAE1BADBEBFBF7EEFFE9FFF6EFC4D3EFE8EEEFF7BABAC3E1E9E1C7E1J#C$='=$>$A#J"9&<$Jt5
OLF9D3C3FFCFE1FFBAC9D3C7C3F7C3E3FFF7C3F7O$E9F7FFEFF7F7BABABAFBA:C7CFC7E1E8F7EEE8EBECEEE8E8EEFFC3BABABABABAE1EFE8EFC3J#C$=(<$>"C#J"8'Ju(:'
OLFDC3F7F7C3C3F7EED3BACFE1E1E8BAF7E1FFO$E8BAD3E1C3D3BAO*BAC7DDD9F4EEE9E1BABABAE1EEE2J#B%=0?%@"J#8%J(J*<$
OLE9BAC3FFE7BABAC3C3E5EAE8F7C7CFC7D3D0F6E9D3FFFFFFC3F7O%F7E1BABABABA7C3F6E8EBECEAD3DE1FDE8E1F7F7FDF9EFBAE1F6J$C$?/?"8"@"J5C*=#
OJFFFFEEEEFFBABABABABABAD4E7F5F0F5F0E1BABAF9E7FFO%O/C4EEFFE8E8E1E7D5E7D4E8D4E8E1E1E2EEE8EFE8E8EFE8D4D3C3D3C3D3E7E2F6EEE8E5C7EDF7EAECEFE1E1F7F7E7D4F7D4F6F7E7C3D3D3C3D3C3D3C3D3BABABABAC7E8C3CFBAE8EEJ"B$ErA"8"J1R5;'<"
OLE1CFF7F7BAFDD5O0BAD3C3E1FFF5D3CFC7CFC7CFC7E1F7EEO$EFEEE2E7E8D4E2E1C3BABABABABAE1EFE1D3C3D3D4D4D3C3D3C3D3C3E9F6F7FFF7F7F4F8EEF7E1E8E1E8E1E7E2E7E2E7E2E7D5E7E2E3E5E3E1J"B$J"8"J5;z5
OLBAC7FFF5AF7E7O1?BABABAC7ECF0CFBABABABAD3F5C3C7BAF4FFE8E3F4D4D3D4EFE8E8D3BABABA/BAHC3C3BAC3C3D3C3CFC3D3BAC3D3BAC3D3C3E7E2D3C3BAEFE8BAE7FDFFFDE9EAE6E8FFF7E9EEEFEEEFJ$J"8"J&95Gz5
P+E5FFD8AFFE9O4BABAD5F9E77BAF0D3BABAD4C7BADED9BABABABABAEFF9FDE3EDF9E6C70BA9D5EEBABABABAE1F0BABAC3F7FFEEC3BAD3D4EEF7F7FFFFFFC3J$J"8#?"J*8&;)J$:#80
P+F9FDC3AF7FFC3F9O+BAC3DFE3F5E1E5E9BABABABAE2D4CFFFE8D5C7D0C7E5@E7E7BAE6EEBAEAE8D4E8E1E8E1F7FFFFF7E1C7BAJ%J"8#?"J(<#;*84@#;#9.
P*D5FFF7D3AEEF7D3D4O,BABABAD4F1F7EEE1DFBAF7D3BABABABADFD8D3C3FFEFF6E9EEEFFEEFF6F0F7E8E7D3D3D3D3D4E2EEF1ECE8BABABABABAEEFFE8CEBABAJ%J"8#?$J%:%<$95:$9#;%
P*E1EBEEBAAC7FFE1C3F7FFO-BABAC3C7D3E6FFC7F9D4D3CE3F5E1E8EEE8E1D4BABABAE1E1D4E7E2E1E7E2E1ECF6F0E5E4E1E1E8D4E7D1BAD3EFF7C2EEE8C3E3E8F6C3BAJ$J"9"J#:%;%9)9v/9$9#;$
P*DDD4E5BDEFFO;E1CFE3E8FFCFD0E8E2DEC3F9D3C3D3BABABABAD3C3D3C3D3C7CFC7D3BAC7E1FFD4CFEFF4C7E6CFE4BAJ"B$J"9#>#J#:%;%9&Gw#9$9#;$
OKE2C3F7E3BD9F7C3D3F6O0EED5EDC3F9C3EBECE3D5D3FDE1BABABAF7C3E3FFF0CFE7C7F4C3J"B$J#8-J#9&;%9$J#9$9#;$
OKC3D8FFC3BC3FDFFE7CFD3E9EEE8EFE8E8E1C3O0FFD3C3FFC7F4D3E8F1F4D3BAEEF7?ECD3E6FFE5D8E2BAE7D3J"C$J#9.J$9&;%:#J$9$9#<#
OJF7DFF9BABBAF6F7F9F7E8FFFFEEC4D3BABAF5FFO-E1FFBADEE8E1EFBAE5EEE8D8E1EE>C3EEBAE3FFC3E6C7E2E1J#B#J"8+8"J#:%<%:$J#:$9#<#
OJEEBAE1FDDEEE1BABAC3BABAC3BABABAD8O.E2E8E8E8E8BAE1EFD8DCBAFDC7=E2D4C3F7BAE7CFEEE9J#C#J"8"8"8";$J";$=%;#J#:#:%:#
OIFFE1EBE8DE5E8BABAD3FFFFO,F6D3C7ECEFD0DED9F9C3=F6D5D3E1EBBABACFE8EAJ"C#J"8"A"J$9%<&;#J#:#9&:#
OJE2F6CFDD9E1E2O-C3F9EDEED9CFE3C3F0D3D5E1FDE2=F7E1C3E7C3F4C7BABAD3E5J$B$J"8"A"J$8&<&;#J#:#9&;"
OHFFF7C3C3F9C3DDEE8D3O-BAF4E8E8E9CFEAE6DEEFBAD8DDF7C3=EEBAD3EFD3F9BABAC7EBJ#B$J"8"A"J#8&<&:$J"<#8&:#
OIF6BAD8FBBADD9E1C3O.E1C7E1F6C7F4C7E1E8BAE5CDD4F8BA=EBEED3BAE8CFBACFC3FDJ$C#J%A#J#8&<&:#J#;$9%:$
OGFFFFC3E5F0EBAFDFFE3BAEEO-F7BABAE9E5F0C3EFE1CEF9CFC7ED=DEF4C3FFBAE7BABABABAE3CFJ"C#J$B"J#9&<&:$J$:$9#=$
OIE2F4EFFF9FFE6EFO,DEEEE3ECD8EDBAFFE1E8E8BABAFDC7<BAF9D4BAF7C3E6C7C3EEC7J"8"C#J%A"J#9%>$<#J#:$9#=$
OFFFC3F9EEFEEFFF7C3D4O,E4E5F5D4EBDEF7EEC3FFC3=F7EFBEFDBAE3CFBAFDC3J"C#J%A"J$9%=%<#J#:$9%<#
OIBAEFECFF4FFFFBAC3O+C7FBC7F1E5EABAF7E8F7BAF1E1=FFD4BAEED3E4CFD8D3E3E2J"D#J"8"A#J$9$>%<$J#;#9%<#
OHEEF9EEFF1C3BAEEO*CFEACFF0D4EFF9C2FFC3D4FDC7<F7D5E8BAE5C7D3D9CFE3J$C$J"8"A#J#9$>%<$J";#9%<#
OFF7FFC3D4FFEFFEEE7D3EFO+E4BAE1E2E1ECBAF9DEC3F9DE=E1E5C3E8C3E1D3C7DFJ$C$J"A#J#:$>%<$J#;#9%<#
OFC3E1D3E2FDE3IF7F4FFO*E3E5EFE1DEEBBAC3EDBAF5EA<EFBAE3D3E1BAE2D0CFE7J#C$J"8#?#J#9%=&=#J"<#9%<#
OGE8BAE1FFC3FF4FFCFF0FFO+EDE4C3EEE8D7E1C3BAE5F0D4F5<E8E9BAE8CFE3D3BAC3J#D$J"9,J#9%='<#J#;#:%="
OFE7E9FFFFDEFF1F9E8E8E1E8E1E8E1E8EEFFO,F0E5E7E1DDD8E9BABAC7F4C3BAE3;E7EFCFEAC3EEEFBAD3J$C%J"9"s"J#9%="858#;#:%=#
OEC3F7D3C3E9F4D9FEEECBAE1O-E6E3F7DDE3E6EEDBAF7E1BAD3BAD3BAD3C7ECE2E7D5E1D5E1D5E1E2E7D5E7E2E7E2D8E2E1E2D3BAC3D3BAC3E1E7C7E5C7EEEED3E6C7J$C%J">"J#9%:5;#:%=#
OEE7F7BAE7E8EABAJD5E8O-D4E8E9F6E9E1O C3E7D5EEE1E8E1FDE9E3FDF7F7F7FDF7F0F4E9E1C4E2DDD4E2EEEFE8F6EFEEF6E9EEE8FFEEF7F7F7FFF7F7E1EFC3E7E9CFE8E8C7E3DFJ#D$J"9">"J#95z);#:%=#
OEE1E8E8E8EDGC3BAC3O-D3E18C4EEF0E6E3F7EEE9E1D3C3D3D3C3D3C3D3C3C7CFC7CFC7C36BAC7CFC3C3D3C3E1D3E2EED3E1D3E5E1F6J"F#J"B"J#9'zJ);#:%=#
OEE8E3ECGEEBAO-C3E8F7E1EDD8F5E12BA6BABABABABABAE7C3E1ECC3E8C3F7D3E9J#D%J"C"J#9'95@"8-<":&<$
ODC3FFC3F7EFC3GEFD4O,E7E1D4E8EED3FDC74C3D3C7CFC7CFD3C7CFD3D3C3D3D3D3C3D3BAC3D3C3C3D3C3D3C3D3D3C3D3D3E2D3EBD3E1BAF8C3BAF6C3J$C$J"9$="J":5>1<":&=#
ODD3F7E9D3EEF7HF6C2BAD3C3O,E9>BAF7F7E8F9ECE9F6EEFFF7FDFFFFF7F9FDF9F7F7E7E2E7E2E7E2E7E8E1D3C3E7CFBAE7E2E7E1E8E1EEFFF7F7FFCFC3D8E6BAE1BAC3E1J$C%J"9$=%J#:5;#:#8"=#
ODC3F7E0E1E8F7D3GEEBAE7E8BAEFFFFFO)E7C3O'EEFFC3E6E3E1F7FFE2CFC7E1EEEFEEEEEFEEEEEFE8E8EEE9EEE8E8ECE4E1EDEAE8ECEAE8ECEAECEBEAE9EEE8EFE8E8C3C3CCCFE8BEDFD3EDE3E8CFE4J$C"8"J$>"J#;5;#:&=#
ODE1FFBAE8BAKC3E8E1C3O+E2BAO&F7BABABABAD3E8E7E4F6E4ECEAECF7F6E8E9E8EEE9E8E8EAFFEFE1C3D3E3EDE8EBECE9EAEDE8E8ECE8E8EDE8EAE5E4E5E8E1F7E1D8DEE3CFBABAEAD8F4J#D$J(>$J";#:,s#z#;#:#8"=#
ODFFE8E1FFE8HF1EEFDFFBABABAD3FFF7O)EEF5EABABABABAEABCBABABAEEC3BAECE88BAC3EFE2C7E6C7EDCFF1J$D$J(>#J#:$=$9#>#J#;#:#8#<$
OCC3FFD5E2F6E1HF4E1C3F5D4BAE2BAF6O)C3F7C3F9D4C3FDF0C3E8EBFF8BAE8E1D3E3BAF0C3BAEEDEJ$D$J(>%J#:$=%8"?#J";#:#8#=#
OCE9F6BAE8FFC3ID9BAECEABAFFD4E8E2E7C3O&BABAD3FFE6C7F7FDC3BAC3FD9EEE2C3E8CFDFE7E2D7J#E$J)>%J$=%9#=#J#;#:#8#=#
OCEEE8F7F7D3HC3E7BAF1E8BAE8DFC3EEF7E8O,D4FFD8CFEBE1EFF6C7D7F98CFF0DEC7E1E3C4F7D4E8J#D%9(J)<'8"J";$=%9#=$J#;#:#8$<#
OCEFD4C3E8E7D4CFD9CFD8D3C3D3>C7E5C2F7F6C3F4EAEFE1D3F7F7F7C3O#D4E1FFE6DFD4E7E8D5E7BAF4D47E3EDE8D3C7E6BAF6C3E1EEJ#D4J*:'9"J";$=%9#>#J#;#:#9#<#
OCE8BAEEE2E1F7FFEFF9FFFFF7F5F9F4F1EEF6E2E1C39CFF9F5F7F7E9F0FFCFD3E1F6BAE9FFEEO#EFC3FFE8E1E8E8E9C3FFE1EF7E5C2D4CFCFF6E1E2E2F6J"B5J+9-J";$=%9$=$J#;#:$9"<#
OCEE:C3E0E2EEBABAC3E2E1ECE1D4BABABABABAF7FDE1EFF6E2D3C3D34DEEBFFEEEEE8FFE1FDD8C3E7D5F7BAD4FFFFE1BAEFC3O"E8BAF5D8EEE8E1E7C7FDC3BAFFC36E4CFE2C7BAF1C3D3EEF7J#8/8)8.F5J#<#<&9#?"J#;#;#8#;$
OBC3E8D3BAD4D3EEE9EEE8EFEAFFE1CFBABABABAC7F7F7E8C3E1FFE4BAC3CFBAD8DFF6E9EEC3:D4FFFDF7E3DFF0F7C3F7C3D3E3BAD3D4D3F7E8D3F7F7F6BAD3EEO!D3F7F8D5CFFFE1E8E1CFEAF97E5C7E1D3E5BAC3EFC3FFEFJ2<5C5J#;$<&9$>#J#;#<"8#;%
OBCFE3D1F0F7EEEFF1E8EEE9E1FFECC3BABA7E3ECC3E8E1BAC3F1ECBABABAE7E1BABABAE8E8F7F7D4D39D5FDC7C3EEF7E1CFBAEEE1C3F5D3BAC3BAF7FFE1E9BAE1E2C4O"DEEAD4F4BAD8F7FFE8EFC3FFD3F7D36E3CFD8CFC7BAE8DFEEEED4J0>*9#9)A5J#;#=&9$>"J#;#;#9#:%
OBE8EFF6E1CFBABAC3BABABABAF9C3BAF5C7BAC3E7BAD3FDC3C7EFBABAD3C3E7E2E7E2;E1F1C3FFE1BABABABAF7D4BAEEC3BAD3BAE1FFEFFFEEFFEED3EBCFO EBDEEBC4CFF1E1E1E8CEF9E1E17EDC7CFC7E4BAE7D4C7F6D5DEJ&8":#?*9$;(?&:3J#:$=&9$>#J#;#;#9#:%
OBEEFFFDC7BABAE6E7F0E5BABABAC3F7D8BABAE1EEBABABAC3EEF7E1CFEEC7FBBAECD9BAE1D3BAE8BAD4F7FFF7FFE1E2BAECD8O E7C3CFF6BAC3F2CFF7EFBAE8E8E2C36F9BABABAE7CFC3E2D4F6C3E4J&=#?#9$;#:#8(<&:)8)J#:#>&:#>#J#C#9#:%
OBE3FFF7E9E0D4F1E5EBEEFDBAD3FBE1EFBABAD5EEE9E5C7BAF4D3EAC3D8E1BAEFE1BAE1E2D4E8FFC3BABAE3E6O E2BAD8EFE2ECBAF0EEC7F4C3E15C3E1E2D8BAE1BAE9E1FDJ(;$>(<$:#9(;%:3J";#>'9#?"J#;#<#:#:$
OBBAEFFFF0EEF5D8C3F6CFBAE8FDD3D4F9D5BAEFC7FFC3F4F1D4DEE2EECFE3EFDEE7D4F7BAE8FFBAE2F6BAF4E1FFE9BAD3E8EFC3O E7E1F4EEC3BAE9EEC3BAF1E75BAFFC3E2EAEDE8C3E1EEF0J*8$?'=#9$8+9&9%8-J#;#=(:#=#J$:#<#;":$
OCDBF9FFE8E3F5EEE7C3BAE1D9BAC3F7E1EDBAD8E5C3FFC8E3EEE8F6BABAEEF9E1D3BAECC7F5C3BAF7C3EEE1EFBAF0EDD4EAECEACFBABAMC3E8E8EED3F7BABAF4E8EFECE2D3E25C3FFC3D3E7E5EAE1E2EEE9J/;#9&=#9$8%8'8%;/J#;#="9$:#=$J$:#<#:#:%
OCBAC3E8F7E6D4F0FFE9E7D3C7DFE7CFEBBACFEAFDD8D3F7BAEEE2D5EEBCEFE2CFEAEDC7CFE2BAE3E1E1D5FFC7D4FFCFE1F9E1EFC3BABAO!E1EEE1EBC4EBE1EEE1EEC3EED34BAEED3CFE2E8F5E7E2D0F4E7C3J/:#:';$9#839/J#;#=#8%9#=$J";#<$9#:%
ODBABABAC3FFF7FFF4E1D9FDF0F7E1D8F4BAC3E1F7F5C7C3EFC3E1F7BAD4EFE1BAE1C7BABAC3EEF9E1BAE1E9CFF1D5FFE1D3FDEFD3F7EED3E2CFBABAO#C3FFE7C3D7FFD4D3FFD4C3EFD3EEC35E2C7E7EAFFC3C3EFE2F0C3E7J-9#;':$9,85J#;#=#8%9#=$J#:#<$:#9%
OGBABACFE9F7F9FFE1EEF7FFE0BAEABABABAE1F0DEBAD4D3BAE8D8CFBABAC8E8FDF9DE8BABAC3EDE7C3F9D3E1E1C3F9F4EAE8C3F7FFC3FDF1E1F9BAO%D8E9E2D3C3EFE5E9F9CFBAE8C3FDD75E7C3D3E2D4FDD3FFC3BAE9D3E9J,9#:"8%:#:,95J#;#="9%:"=$J#:#<$9$:%
OIBABAC7CFC3EFE8FDFFF7C5E6E1D3BACFF1C3E7BACFE8EED3BABABAC3C3E8E85BAC7F6E2FDE8CFD5E5F7EEE1FDEAEEE8F0FFEEF4D4O&E6D4E7C3BAC3F6F7C3F6BAE9E85E2D3CFE3BAF1E1D3F7E1DEE3E5C7J+8#9#9$:";&8%:5J#;#=#8%:#=$J";#=$8$:%
OKBABABABABAF0C5EAFFD3C3EFD3E1C3FFD3E2BABAE8F9DFBABAC3EF4CFEEF9E8FFE3E5F1E1BABAE2F7E1C3EDE1BAC7BAO&FDD3E6D3C3F1BAEEFFDDEEC3C3F6D34E1E3EDE8F4D3C3FFE2C7FCE4CFJ'84<%908)J#;#=#9$:#=$J#:#>#8$:%
P!C3ECBABAE5F1BAD8E5D9BABAE2E1E2C3EEEED4E2E1D5E7EEC3BAD4F6C3EEE8DED9E1EDF0EEFDC3E2F4F1C3BABAC3BABABABABABAO'E8BAE3C3D3F6E2FFC7D3C7BAE8E94E7C3CFE3D4F1D3EEEECFF1E1E1J#8$8-8%=%8/:"J#;$=#9$:#>#J#:#=*9%
P!CFF1BAE8ECD3D4FFE7C3BACFE3FDFFC3EEC3EEF7BABAC3F6E8F7F7FFFFFFFFFDFFE3BABABABABABAO,E8C3C3E2BAE2D4BAF9CFE1CFC3F64E2D3C7E6E1BAF0CFBAC3FFEFE7BAE5D4E2J5?/J#;#>#:#:#>$H$:#<+:$
P!:BAEAF4C3BAC7FFE8BABABAC3D9FFE1C7CFF9F7EDEEF9F4F1F4E1BAD5F6E8BAF6F7EEF7F7F7EED5BAO6EED3D3E5FCD0FFE1D5E1BAF6C3D3FFC3CFE3D3EDBAE1E1BABAE8E1EBC7E6F9J5;2J#;#>#:$9#?#H$:#<#8"8%9$
P"9CFE3E8F7ECE8E4E1E8BABABABAD5E7E2FDD4BABAC3E8F7E1BADDE9E7D5E7C3BAE8E1EFFFFFE1BABABABAO7F6C3CFD8EFD3F5F9D3E1E9EFE1BAF6D3C7E6E1F0E2E2E7ECC3BAE8FFJ,8&8%:1J#;#>#:$9$>"I$:#<&8%:$
P"BABAF5FFEED4BACFEAF5CBBABAD8FFD9BAE1EFBAE3EDF0E1D3C3E7EBBABABAC3E7E9FFD4O:E2BAC7E8EEBAE1FFC9C3F6C3D4C3EFBAD7E1BAFDC3C7EDBAF0E2EED3F7D4J.9$9#;*8&J#;#>";$8%>#H#;#=&8$:$
P!C7DEF0EEC7BABABAD3C3C3EEDEC3F7DED5E7E6E3CFC7CFD3E1FACFC7BABAD4EFO:E1D3BABAE8CBEEDDD3BAE8D3D3F7E0E1E9E7F9CFBAE7C7D4ECE8BAE8F7J'9&9$9$8,8'J#@#95=);#<'8$;$
P E7EFE7C3CFBAEFF6EEF7F1D3F7C3BAEEE2D8E6F9E8E6D8E8E1E8C3BAECEBCFBAD4C7O9E8BAD3DE>F0E2DEE3DFE3E6FFF7E1EFEEF7F7F9F4E3DFE3DEE4DEE4ECF9E2DEE3DFC7D3E5D9E5D9E5F1E8E7BAC3FFC3BAE1CFBAFFE4E5E1D9J18$:/9'J#;5P0;#<'9#;$
OME8F7D4CFE3EFE8EEE2E1E1C3C7CFE8ECC3EEBAC3EEE7D4EFE1D3C3BABABABABABAC3E5F0E8E8D3O9EEC3CD3C3BAF7EEF7F6E9EAEDEEF6EFF7F1F6EEF7F7EEC3D7C4CFC3EFF7F7F6EFFFFFF6D5EEF0ECEAEDEAECEAF5EEFFFFFFEEF7ECE6C3BAF7D3BAD8E2EAECE4E8E5J5:)?'J$;&z5;#=&9#;$
OL6E1F7F7E1FFE1C3BABADDC8EFECD3D8DCF0C7BABAEED4BAE2F7E6BABABABAE7C7BAE6EAC3O8C3F0CFDED7ECE8D4:BA8C7D4E1C3E2D4E2D4E3F5E8D3BAD4EFEEE1C7EEE9E0E1F7D0E3D3E2CFBAE2FDCFE4E1F4E4J58$9%C'J$;0Ft0:$=&9$:%
OI5D3E7EFF7FFF9FFFFF7EEEFD4BABABAC7C3E6F0F4D3C3EFD3C7FDC7BAD5EEDFD8CFBAO8D8EDBAE2D4F9E2BACFC7CFC7CFC7CFC7CFC3BAC3E1EEEEF7E1E7E1F5F6C3BAE1F4C7C3FFC3EECBBAD4F8D4F6CFC3EEF6C3J58%8+=(J#<5@0:$=&9$:%
OG7E1EFFFEED4E1D5BAC4E2E1F7F7FFE9F6C3D3BABABABABABAE8ECC7BAEEF4D8F4EAECEBE5C7BAE1F9FDF0E5C7O7E5EA>D4E8E8EEE3F7E1E7D4E7EFFFF7FFF7EEEEF1E5E3E6EAECEAECEAE5EBE8C3BABAC7E5C3BABAC3D8C3BABAD3EBE5D3E8BAF7CFBAD9FDE8FFC3BAEFE1CFJ%w'<$9-;(J#<5:"?'8$;$
OED4F7FFE1BAC3E2E5F0EDE3BAE4DEBABAE2FFE9EAE8FAFFF3ECC7BABABABAE2FFCFO6E2C3O)F9CFBAE1F5E3CFC7CFC7CFD4C7C3CFC7D3CFC7C3EEEEEEF5F0EFEEF7FDEEE3EDE3EDE3ECEBE5EAE6EAE8E5E4EEF1FDF9FDFFFDF9F7FDEAC3ECC7BABAF1D4D4FFFEF4C7BAJ&B(<#;.<$J#;5:#>#8#8$;$
ODD3FFF7C3BABABABABAE8FFF5E5E4E7FFF7ECE2E3E6E8FFFFE8EEC3BAE8D9O6D4E2O*C3EEBABABAE3FDF9FDF9FDF0DEE8F6F7FFF7F9FDEFE9F6E9F7EEFDF0EEE8E2E5E3CFBABAC3E7E2E7C3BABABABACFC3C7C3C3C3E3F5EEF7E8D3E1F9CFD4E4C7FDEFE3E6E3J%G,85J#;":5:#>#8#8$;$
ODEFF7BABABABEE8EAE9E7E2E7D4F1DE9C7E5E4E1BABABABABABAD3E2E1F7E9EEE4DED9E5E2E7D4EFE5O6BABABAO%BABAC3BAC3E1E9BABAC3BAC3C3C3FDD8BABABACFC7EEE2BABAE7EFF0EDEAEEF7EEF6E9EEE9ECEAE9EEE8EEECEFEEE9EEE8F7EFE1D3F7C3C3ECBAE8F9C3F0F5J&H1<0J#:&8(9%8(z#:#=$8#9$:$
OCD4FFF6E2D3BABACFF9E8DEEBECFFD8BACFF7D4BABAC3F9F4C7BABABAFFFFEEEBFDE8C3BAO>FFDEBABABAE8C3BABABABABAEADFBABAE7D4BABABABABAC3C31BAE1E8E8BAC3E5BAD3F9C3FDD4BAF4EEJ-D->/J">"=#=#;#=#G#:#=#9);#
OBE8FFFFF7EEEFEAECF1FDD8DFBAE8F6BABABAE9FFC3E7D4BABAE1F7E9E7C3BAF7FFC3BAD4F9E1O7D3C2D3BAE1CFD4EFE1E1E8D3EFD4CFEABAE8CFBAC7DEF1D3C3F0J2A+@/J"<$<#>#;#=#G#:#=#:(;$
OAEEE1D3E1E2C3ECEEEEF7E8E2D4BAE7E9D3BAE2E8F9EEE1CFFFEDBABAE1EEFDF7EEEEE2E7E2BACFF1ECO6E1D4E9BAC3E7D5EEE2F6BAE9D4C3C3E7EBCFF7E1BABAE7EEBABAFDD5
ENDBITMAP
%%EndBinary
63.65 96.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
pstopssaved restore
%%Page: pstops 2
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 3) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(Monkey-and-bananas \050Cont\325) 110.96 728.95 T
(d\051) 458.99 728.95 T
0 18 Q
(Let the initial state S be described by the follo) 63.65 659.95 T
(wing sentences:) 394.67 659.95 T
4 F
(\330) 126.65 617.95 T
2 F
(Onc) 139.48 617.95 T
(hair\050S\051) 172.35 617.95 T
(At\050monkey) 315.65 617.95 T
(, a, S\051) 404.73 617.95 T
4 F
(\330) 126.65 596.95 T
2 F
(Hasbanana\050S\051) 139.48 596.95 T
(At\050c) 315.65 596.95 T
(hair) 349.51 596.95 T
(, b) 382.37 596.95 T
(, S\051) 402.07 596.95 T
0 F
(Axioms for description the ef) 63.65 554.95 T
(fects of actions:) 275.17 554.95 T
4 F
(") 81.65 512.95 T
2 F
(x) 94.48 512.95 T
4 F
(") 104.15 512.95 T
2 F
(s[) 116.98 512.95 T
4 F
(\330) 131.31 512.95 T
2 F
(Onc) 144.14 512.95 T
(hair\050s\051) 177.01 512.95 T
4 F
(\336) 242.01 512.95 T
2 F
(At\050c) 264.28 512.95 T
(hair) 298.13 512.95 T
(,x,pushc) 331 512.95 T
(hair\050x,s\051\051]) 399.2 512.95 T
-0.25 (F) 63.65 470.95 P
-0.25 (or all x & s) 74.66 470.95 P
-0.25 (, if the monkey is not on the c) 164.22 470.95 P
-0.25 (hair in state s) 407.08 470.95 P
-0.25 (,) 521.9 470.95 P
(then the c) 63.65 449.95 T
(hair will be at positon x in the state attained) 146.52 449.95 T
(by applying the operator pushc) 63.65 428.95 T
(hair\050x\051 to state s) 321.53 428.95 T
(.) 458.1 428.95 T
4 F
(") 81.65 386.95 T
2 F
(s Onc) 94.48 386.95 T
(hair\050Climbc) 140.69 386.95 T
(hair\050s\051\051) 239.56 386.95 T
(F) 63.65 344.95 T
(or all s) 74.66 344.95 T
(, the monkey will be on the c) 130.9 344.95 T
(hair in the state) 368.15 344.95 T
(attained by applying the operator c) 63.65 323.95 T
(limbc) 355.9 323.95 T
(hair to state s) 401.11 323.95 T
(.) 516.02 323.95 T
4 F
(") 81.65 281.95 T
2 F
(s [Onc) 94.48 281.95 T
(hair\050s\051) 146.68 281.95 T
4 F
(L) 206.68 281.95 T
2 F
( At\050box,c) 219.02 281.95 T
(,s\051) 291.37 281.95 T
4 F
(\336) 315.7 281.95 T
2 F
( Hasbanana\050grasp\050s\051\051]) 333.47 281.95 T
-0.58 (F) 63.65 239.95 P
-0.58 (or all s) 74.66 239.95 P
-0.58 (, if the monkey is on the c) 129.73 239.95 P
-0.58 (hair and the c) 338.56 239.95 P
-0.58 (hair is at) 452.7 239.95 P
(c in state s) 63.65 218.95 T
(, then the monkey will ha) 152.55 218.95 T
(ve the bananas in) 364.75 218.95 T
(the state attained by applying the operator grasp to) 63.65 197.95 T
(state s) 63.65 176.95 T
(.) 117.88 176.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 4) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(Monkey-and-bananas \050Cont\325) 110.96 732.95 T
(d\051) 458.99 732.95 T
2 18 Q
(F) 63.65 690.95 T
(rame axiom:) 75.47 690.95 T
4 F
(") 81.65 648.95 T
2 F
(x) 94.48 648.95 T
4 F
(") 104.15 648.95 T
2 F
(s[At \050c) 116.98 648.95 T
(hair) 170.17 648.95 T
(, x, s\051) 203.04 648.95 T
4 F
(\336) 252.05 648.95 T
2 F
(At\050c) 274.32 648.95 T
(hair) 308.18 648.95 T
(,x,c) 341.05 648.95 T
(limbc) 368.59 648.95 T
(hair\050x,s\051\051]) 413.8 648.95 T
-0.08 (The position of the c) 63.65 606.95 P
-0.08 (hair does not c) 231.22 606.95 P
-0.08 (hange when the mon-) 352.2 606.95 P
(key c) 63.65 585.95 T
(limbs on the c) 105.86 585.95 T
(hair) 221.42 585.95 T
(.) 254.29 585.95 T
(The query to be answered:) 63.65 543.95 T
4 F
($) 81.65 501.95 T
2 F
( [Hasbanana\050) 118.22 501.95 T
( \051]) 250.62 501.95 T
(Negating the theorem:) 63.65 459.95 T
4 F
(") 81.65 417.95 T
2 F
( [) 121.17 417.95 T
4 F
(\330) 132.17 417.95 T
2 F
(Hasbanana\050) 145 417.95 T
( \051]) 271.42 417.95 T
(In conjunctive normal form:) 63.65 375.95 T
4 F
(\330) 99.65 333.95 T
2 F
(Onc) 112.48 333.95 T
(hair\050S\051) 145.35 333.95 T
(\0501\051) 495.65 333.95 T
(Onc) 99.65 300.95 T
(hair\050) 132.52 300.95 T
(\051  V) 196.18 300.95 T
(At\050c) 229.68 300.95 T
(hair) 263.53 300.95 T
(,x,pushc) 296.4 300.95 T
(hair\050x,) 364.6 300.95 T
(\051\051) 442.94 300.95 T
(\0502\051) 495.65 300.95 T
(Onc) 99.65 267.95 T
(hair\050c) 132.52 267.95 T
(limbc) 181.04 267.95 T
(hair\050) 226.26 267.95 T
(\051\051) 288.92 267.95 T
(\0503\051) 495.65 267.95 T
4 F
(\330) 99.65 234.95 T
2 F
(Onc) 112.48 234.95 T
(hair\050) 145.35 234.95 T
(\051 V) 208.01 234.95 T
4 F
(\330) 237.01 234.95 T
2 F
(At\050c) 249.84 234.95 T
(hair) 283.7 234.95 T
(,c) 316.57 234.95 T
(,) 329.24 234.95 T
(\051 V) 356.25 234.95 T
(Hasbanana\050grasp\050) 243.65 201.95 T
(\051\051) 419.33 201.95 T
(\0504\051) 495.65 201.95 T
4 F
(\330) 99.65 168.95 T
2 F
(At \050c) 112.48 168.95 T
(hair) 151.34 168.95 T
(, x,) 184.21 168.95 T
(\051 V) 235.89 168.95 T
(At\050c) 264.39 168.95 T
(hair) 298.25 168.95 T
(,x,c) 331.11 168.95 T
(limbc) 358.65 168.95 T
(hair\050) 403.87 168.95 T
(\051\051) 466.53 168.95 T
(\0505\051) 495.65 168.95 T
4 F
(\330) 99.65 135.95 T
2 F
(Hasbanana\050) 112.48 135.95 T
( \051) 233.89 135.95 T
(\0506\051) 495.65 135.95 T
0 0 0 1 0 0 0 K
96.53 492.15 118.22 514.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 100.83 501.95 T
5 12 Q
(f) 112.84 498.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
230.57 492.15 250.62 514.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 233.23 501.95 T
5 12 Q
(f) 245.24 498.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
99.49 408.15 121.17 430.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 103.78 417.95 T
5 12 Q
(f) 115.79 414.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
251.36 408.15 271.42 430.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 254.02 417.95 T
5 12 Q
(f) 266.03 414.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
173.18 291.15 196.18 313.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 176.26 300.95 T
0 12 Q
(2) 186.51 297.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
419.94 291.15 442.94 313.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 423.02 300.95 T
0 12 Q
(2) 433.27 297.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
266.92 255.95 288.92 280.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 270.01 267.95 T
0 12 Q
(3) 280.26 264.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
186.01 222.95 208.01 247.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 189.1 234.95 T
0 12 Q
(4) 199.35 231.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
334.25 222.95 356.25 247.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 337.33 234.95 T
0 12 Q
(4) 347.58 231.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
397.33 189.95 419.33 214.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 400.42 201.95 T
0 12 Q
(4) 410.67 198.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
213.89 156.95 235.89 181.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 216.98 168.95 T
0 12 Q
(5) 227.23 165.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
444.53 156.95 466.53 181.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 447.62 168.95 T
0 12 Q
(5) 457.86 165.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
213.84 126.15 233.89 148.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 216.5 135.95 T
5 12 Q
(f) 228.51 132.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
pstopssaved restore
%%Page: pstops 3
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 5) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(Monkey-and-bananas \050Cont\325) 157.63 732.95 T
(d\051) 418.65 732.95 T
2 F
(\0504\051) 63.65 699.95 T
(\0506\051) 360.65 699.95 T
4 F
(\330) 63.65 677.95 T
2 F
(Onc) 76.48 677.95 T
(hair\050) 109.35 677.95 T
(\051 V) 169.01 677.95 T
4 F
(\330) 360.65 677.95 T
1 F
(Hasbananas\050) 373.48 677.95 T
( \051) 516.14 677.95 T
4 F
(\330) 63.65 655.95 T
2 F
(At\050c) 76.48 655.95 T
(hair) 110.34 655.95 T
(, c) 143.21 655.95 T
(,) 160.88 655.95 T
(\051 V) 189.89 655.95 T
1 F
(Hasbananas\050grasp\050) 63.65 633.95 T
(\051\051) 267.97 633.95 T
2 F
(\0503\051) 63.65 567.95 T
(\0507\051) 360.65 567.95 T
4 F
(\330) 63.65 545.95 T
1 F
(Onchair\050climbchair\050) 76.48 545.95 T
(\051\051) 295.49 545.95 T
4 F
(\330) 360.65 545.95 T
1 F
(Onchair\050) 373.48 545.95 T
(\051) 489.31 545.95 T
2 F
(V) 501.48 545.95 T
4 F
(\330) 360.65 523.95 T
2 F
(At\050c) 373.48 523.95 T
(hair) 407.34 523.95 T
(, c) 440.21 523.95 T
(,) 457.88 523.95 T
(\051) 486.89 523.95 T
(\0505\051) 63.65 457.95 T
(\0508\051) 360.65 457.95 T
4 F
(\330) 63.65 435.95 T
1 F
(At\050chair) 76.48 435.95 T
(, x,) 152.82 435.95 T
(\051) 202.99 435.95 T
2 F
(V) 215.16 435.95 T
4 F
(\330) 360.65 435.95 T
1 F
(At\050chair) 373.48 435.95 T
(, c,) 449.82 435.95 T
2 F
(At\050c) 63.65 413.95 T
(hair) 97.51 413.95 T
(, x, c) 130.37 413.95 T
(limbc) 167.92 413.95 T
(hair) 213.14 413.95 T
1 F
(\050) 247.81 413.95 T
(\051\051) 281.81 413.95 T
(    climbchair\050) 360.65 413.95 T
(\051\051) 516.65 413.95 T
2 F
(\0502\051) 63.65 347.95 T
(\0509\051) 360.65 347.95 T
(Onc) 63.65 325.95 T
(hair) 96.52 325.95 T
1 F
(\050) 131.18 325.95 T
(\051) 162.19 325.95 T
2 F
(V) 174.35 325.95 T
4 F
(\330) 360.65 325.95 T
1 F
(At\050chair) 373.48 325.95 T
(, c,) 449.82 325.95 T
(\051) 506 325.95 T
(At\050chair) 63.65 303.95 T
(, x, pushchair\050x,) 139.99 303.95 T
(\051\051) 316.33 303.95 T
2 F
(\0501 \051) 63.65 237.95 T
(\05010\051) 360.65 237.95 T
4 F
(\330) 63.65 215.95 T
2 F
(Onc) 76.48 215.95 T
(hair\050S\051) 109.35 215.95 T
(Onc) 360.65 215.95 T
(hair\050) 393.52 215.95 T
(\051) 461.18 215.95 T
(\050 11\051) 360.65 149.95 T
(Nil) 360.65 127.95 T
0 0 0 1 0 0 0 K
150.01 668.15 169.01 690.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 149.73 677.95 T
0 12 Q
(4) 159.98 674.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
494.46 668.15 516.14 690.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 498.75 677.95 T
5 12 Q
(f) 510.76 674.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
165.89 646.15 189.89 668.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 170.61 655.95 T
0 12 Q
(4) 180.85 652.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
243.97 624.15 267.97 646.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 247.69 633.95 T
0 12 Q
(4) 257.94 630.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
268.49 536.15 295.49 561.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 273.21 545.95 T
0 12 Q
(3) 283.45 542.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
462.31 536.15 489.31 558.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 466.03 545.95 T
0 12 Q
(7) 476.28 542.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
462.89 514.15 486.89 536.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 467.61 523.95 T
0 12 Q
(7) 477.85 520.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
178.99 426.15 202.99 448.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 183.71 435.95 T
0 12 Q
(5) 193.96 432.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
254.81 404.15 281.81 429.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 259.53 413.95 T
0 12 Q
(5) 269.77 410.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
489.65 404.15 516.65 429.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 494.37 413.95 T
0 12 Q
(8) 504.62 410.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
138.19 316.15 162.19 338.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 142.9 325.95 T
0 12 Q
(2) 153.15 322.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
475 316.15 506 338.95 C
0 0 0 1 0 0 0 K
6 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 484.95 325.95 T
0 12 Q
(9) 495.2 322.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
289.33 294.15 316.33 319.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 294.05 303.95 T
0 12 Q
(2) 304.3 300.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
434.18 206.15 461.18 231.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 435.9 215.95 T
0 12 Q
(10) 446.14 212.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
90 450 1.5 1.5 345.96 332.07 578.85 GG
333.52 578.48 334.44 582.17 346.37 575.27 332.6 574.8 4 Y
3 H
0 Z
N
333.52 578.48 334.44 582.17 346.37 575.27 332.6 574.8 4 Y
V
135.65 627.95 332.07 578.85 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 612.14 GG
369.65 610.64 373.45 610.64 369.65 597.39 365.85 610.64 4 Y
0 Z
N
369.65 610.64 373.45 610.64 369.65 597.39 365.85 610.64 4 Y
V
369.65 654.95 369.65 612.14 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 495.14 GG
369.65 493.64 373.45 493.64 369.65 480.39 365.85 493.64 4 Y
0 Z
N
369.65 493.64 373.45 493.64 369.65 480.39 365.85 493.64 4 Y
V
369.65 510.95 369.65 495.14 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 387.14 GG
369.65 385.64 373.45 385.64 369.65 372.39 365.85 385.64 4 Y
0 Z
N
369.65 385.64 373.45 385.64 369.65 372.39 365.85 385.64 4 Y
V
369.65 411.95 369.65 387.14 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 279.14 GG
369.65 277.64 373.45 277.64 369.65 264.39 365.85 277.64 4 Y
0 Z
N
369.65 277.64 373.45 277.64 369.65 264.39 365.85 277.64 4 Y
V
369.65 312.95 369.65 279.14 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 189.14 GG
369.65 187.64 373.45 187.64 369.65 174.39 365.85 187.64 4 Y
0 Z
N
369.65 187.64 373.45 187.64 369.65 174.39 365.85 187.64 4 Y
V
369.65 204.95 369.65 189.14 2 L
2 Z
N
90 450 1.5 1.5 341.57 332.5 472.34 GG
333.92 471.86 335.12 475.46 346.49 467.67 332.72 468.26 4 Y
0 Z
N
333.92 471.86 335.12 475.46 346.49 467.67 332.72 468.26 4 Y
V
135.65 537.95 332.5 472.34 2 L
2 Z
N
90 450 1.5 1.5 348.23 331.89 362.07 GG
333.36 361.76 334.13 365.48 346.32 359.06 332.58 358.05 4 Y
0 Z
N
333.36 361.76 334.13 365.48 346.32 359.06 332.58 358.05 4 Y
V
135.65 402.95 331.89 362.07 2 L
2 Z
N
90 450 1.5 1.5 348.23 331.89 254.07 GG
333.36 253.76 334.13 257.48 346.32 251.06 332.58 250.05 4 Y
0 Z
N
333.36 253.76 334.13 257.48 346.32 251.06 332.58 250.05 4 Y
V
135.65 294.95 331.89 254.07 2 L
2 Z
N
90 450 1.5 1.5 348.23 331.89 164.07 GG
333.36 163.76 334.13 167.48 346.32 161.06 332.58 160.05 4 Y
0 Z
N
333.36 163.76 334.13 167.48 346.32 161.06 332.58 160.05 4 Y
V
135.65 204.95 331.89 164.07 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.61 T
-1.25 ( 6) 551.15 61.61 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(Monkey-and-bananas \050Cont\325) 157.63 732.95 T
(d\051) 418.65 732.95 T
2 14 Q
(\0504\051) 63.65 699.95 T
(\0506\051) 333.65 699.95 T
4 18 Q
(\330) 63.65 680.95 T
2 F
(Onc) 76.48 680.95 T
(hair\050) 109.35 680.95 T
(\051 V) 169.01 680.95 T
4 F
(\330) 333.65 680.95 T
2 F
(Hasbananas\050) 346.48 680.95 T
( \051 V) 477.86 680.95 T
4 F
(\330) 63.65 661.95 T
2 F
(At\050c) 76.48 661.95 T
(hair) 110.34 661.95 T
(, c) 143.21 661.95 T
(,) 160.88 661.95 T
(\051 V) 189.89 661.95 T
1 F
(Answer\050) 333.65 661.95 T
(\051) 433 661.95 T
2 F
(Hasbananas\050grasp\050) 63.65 642.95 T
(\051\051) 249.67 642.95 T
2 14 Q
(\0503\051) 63.65 604.95 T
(\0507\051) 333.65 604.95 T
4 18 Q
(\330) 63.65 585.95 T
2 F
(Onc) 76.48 585.95 T
(hair\050c) 109.35 585.95 T
(limbc) 157.88 585.95 T
(hair\050) 203.09 585.95 T
(\051\051) 270.76 585.95 T
4 F
(\330) 333.65 585.95 T
2 F
(Onc) 346.48 585.95 T
(hair\050) 379.35 585.95 T
(\051 V) 452.02 585.95 T
4 F
(\330) 333.65 566.95 T
2 F
(At\050c) 346.48 566.95 T
(hair) 380.34 566.95 T
(, c) 413.21 566.95 T
(,) 430.88 566.95 T
(\051 V) 459.89 566.95 T
1 F
(Answer\050grasp\050) 333.65 547.95 T
(\051\051) 497.66 547.95 T
2 14 Q
(\0505\051) 63.65 512.62 T
(\0508\051) 333.65 512.62 T
4 18 Q
(\330) 63.65 490.95 T
2 F
(At\050c) 76.48 490.95 T
(hair) 110.34 490.95 T
(, x,) 143.21 490.95 T
(\051 V) 191.89 490.95 T
4 F
(\330) 333.65 490.95 T
2 F
(At\050c) 346.48 490.95 T
(hair) 380.34 490.95 T
(, c) 413.21 490.95 T
(,) 430.88 490.95 T
(At\050c) 63.65 471.95 T
(hair) 97.51 471.95 T
(, x, c) 130.37 471.95 T
(limbc) 167.92 471.95 T
(hair\050) 213.14 471.95 T
(\051\051) 280.8 471.95 T
(    c) 333.65 471.95 T
(limbc) 361.53 471.95 T
(hair\050) 406.75 471.95 T
(\051\051 V) 474.41 471.95 T
1 F
(Answer\050grasp) 333.65 452.95 T
(   \050climbchair\050) 333.65 433.95 T
(\051\051) 491.49 433.95 T
2 14 Q
(\0502\051) 63.65 395.95 T
(\0509\051) 333.65 395.95 T
2 18 Q
(Onc) 63.65 376.95 T
(hair\050) 96.52 376.95 T
(\051 V) 161.18 376.95 T
4 F
(\330) 333.65 376.95 T
2 F
(At\050c) 346.48 376.95 T
(hair) 380.34 376.95 T
(, c) 413.21 376.95 T
(,) 430.88 376.95 T
(\051 V) 466.89 376.95 T
(At\050c) 63.65 357.95 T
(hair) 97.51 357.95 T
(, x, pushc) 130.37 357.95 T
(hair\050x,) 208.58 357.95 T
(\051\051) 290.92 357.95 T
1 F
(Answer\050grasp) 333.65 357.95 T
(   \050climbchair\050) 333.65 338.95 T
(\051\051) 491.49 338.95 T
2 14 Q
(\0501 \051) 63.65 303.62 T
(\05010\051) 333.65 303.62 T
4 18 Q
(\330) 63.65 281.95 T
2 F
(Onc) 76.48 281.95 T
(hair\050S\051) 109.35 281.95 T
(Onc) 333.65 281.95 T
(hair\050) 366.52 281.95 T
(\051 V) 434.18 281.95 T
1 F
(Answer\050grasp) 333.65 262.95 T
(   \050climbchair) 333.65 243.95 T
(  \050pushchair) 333.65 224.95 T
(,c,) 444.65 224.95 T
(\051\051\051) 489.33 224.95 T
2 14 Q
(\050 11\051) 333.65 189.62 T
1 18 Q
(Answer\050grasp) 333.65 167.95 T
(   \050climbchair) 333.65 148.95 T
(  \050pushchair) 333.65 129.95 T
(,c,) 444.65 129.95 T
2 F
(S) 464.67 129.95 T
1 F
(\051\051\051) 476.01 129.95 T
0 0 0 1 0 0 0 K
150.01 671.15 169.01 693.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 149.73 680.95 T
0 12 Q
(4) 159.98 677.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
456.17 671.15 477.86 693.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 460.47 680.95 T
5 12 Q
(f) 472.48 677.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
165.89 652.15 189.89 674.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 170.61 661.95 T
0 12 Q
(4) 180.85 658.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
411.32 652.15 433 674.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 415.61 661.95 T
5 12 Q
(f) 427.62 658.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
225.67 633.15 249.67 655.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 229.38 642.95 T
0 12 Q
(4) 239.63 639.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
243.76 576.15 270.76 601.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 248.47 585.95 T
0 12 Q
(3) 258.72 582.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
425.02 576.15 452.02 598.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 428.73 585.95 T
0 12 Q
(7) 438.98 582.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
435.89 557.15 459.89 579.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 440.61 566.95 T
0 12 Q
(7) 450.85 563.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
470.66 538.15 497.66 560.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 474.38 547.95 T
0 12 Q
(7) 484.63 544.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
167.89 481.15 191.89 503.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 172.6 490.95 T
0 12 Q
(5) 182.85 487.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
253.8 462.15 280.8 487.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 258.52 471.95 T
0 12 Q
(5) 268.77 468.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
447.41 462.15 474.41 487.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 452.13 471.95 T
0 12 Q
(8) 462.37 468.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
464.49 424.15 491.49 449.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 469.21 433.95 T
0 12 Q
(8) 479.45 430.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
137.18 367.15 161.18 389.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 141.9 376.95 T
0 12 Q
(2) 152.14 373.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
435.89 367.15 466.89 389.95 C
0 0 0 1 0 0 0 K
6 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 445.83 376.95 T
0 12 Q
(9) 456.08 373.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
263.92 348.15 290.92 373.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 268.63 357.95 T
0 12 Q
(2) 278.88 354.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
464.49 329.15 491.49 354.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 469.21 338.95 T
0 12 Q
(9) 479.45 335.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
407.18 272.15 434.18 297.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 408.9 281.95 T
0 12 Q
(10) 419.14 278.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
464.67 212.95 489.33 240.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 466.39 224.95 T
0 12 Q
(10) 476.64 221.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
313.73 611.51 314.1 614.13 322.85 610.21 313.35 608.9 4 Y
1 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
313.73 611.51 314.1 614.13 322.85 610.21 313.35 608.9 4 Y
V
135.65 636.95 313.23 611.58 2 L
2 Z
N
342.65 629.99 345.29 629.99 342.65 620.77 340 629.99 4 Y
0 Z
N
342.65 629.99 345.29 629.99 342.65 620.77 340 629.99 4 Y
V
342.65 654.95 342.65 630.49 2 L
2 Z
N
342.65 539.99 345.29 539.99 342.65 530.77 340 539.99 4 Y
0 Z
N
342.65 539.99 345.29 539.99 342.65 530.77 340 539.99 4 Y
V
342.65 546.95 342.65 540.49 2 L
2 Z
N
314.04 522.98 314.77 525.53 322.91 520.45 313.31 520.44 4 Y
0 Z
N
314.04 522.98 314.77 525.53 322.91 520.45 313.31 520.44 4 Y
V
135.65 573.95 313.56 523.12 2 L
2 Z
N
314.18 406.44 315.02 408.95 322.93 403.53 313.35 403.93 4 Y
0 Z
N
314.18 406.44 315.02 408.95 322.93 403.53 313.35 403.93 4 Y
V
135.65 465.95 313.71 406.6 2 L
2 Z
N
342.65 422.99 345.29 422.99 342.65 413.77 340 422.99 4 Y
0 Z
N
342.65 422.99 345.29 422.99 342.65 413.77 340 422.99 4 Y
V
342.65 429.95 342.65 423.49 2 L
2 Z
N
342.65 332.99 345.29 332.99 342.65 323.77 340 332.99 4 Y
0 Z
N
342.65 332.99 345.29 332.99 342.65 323.77 340 332.99 4 Y
V
342.65 339.95 342.65 333.49 2 L
2 Z
N
342.65 215.99 345.29 215.99 342.65 206.77 340 215.99 4 Y
0 Z
N
342.65 215.99 345.29 215.99 342.65 206.77 340 215.99 4 Y
V
342.65 222.95 342.65 216.49 2 L
2 Z
N
313.81 315.02 314.3 317.61 322.87 313.29 313.31 312.42 4 Y
0 Z
N
313.81 315.02 314.3 317.61 322.87 313.29 313.31 312.42 4 Y
V
135.65 348.95 313.32 315.11 2 L
2 Z
N
314.34 199.88 315.28 202.35 322.95 196.6 313.4 197.41 4 Y
0 Z
N
314.34 199.88 315.28 202.35 322.95 196.6 313.4 197.41 4 Y
V
135.65 267.95 313.87 200.06 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
pstopssaved restore
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ Times-Bold
%%+ Symbol
%%+ Times-Italic
%%+ Times-BoldItalic
%%EOF
