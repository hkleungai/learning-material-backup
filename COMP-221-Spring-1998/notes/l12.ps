%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: 4 0
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProcSet: pstops-clip 1 0
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/lcvx{dup load dup type dup/operatortype eq{pop exch pop}
 {/arraytype eq{dup xcheck{exch pop aload pop}
 {pop cvx}ifelse}{pop cvx}ifelse}ifelse}bind def
/pstopsmatrix matrix currentmatrix def
/pstopsxform matrix def
/defaultmatrix{pstopsmatrix exch pstopsxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/pathtoproc{[{currentpoint}stopped{$error/newerror false
 put{newpath}}{/newpath cvx 3 1 roll/moveto cvx 4 array
 astore cvx}ifelse]{[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}def
/initclip[/matrix lcvx/currentmatrix lcvx/pstopsmatrix cvx/setmatrix lcvx
 /pathtoproc lcvx/initclip lcvx/newpath lcvx
 0 0 /moveto lcvx 595.000000 0/rlineto lcvx
 0 842.000000/rlineto lcvx -595.000000 0/rlineto lcvx
 /closepath lcvx/clip lcvx
 /newpath lcvx/exec lcvx/setmatrix lcvx]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
%%EndProcSet
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.89 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Times-BoldItalic FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
/pstopsxform pstopsmatrix matrix currentmatrix matrix invertmatrix matrix concatmatrix matrix invertmatrix store
%%EndSetup
%%Page: pstops 1
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 1) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(Resolution Strategies) 163.32 728.95 T
2 18 Q
(1.) 72.65 638.95 T
3.38 (The) 99.65 638.95 P
1 F
3.49 (Breadth-\336rst) 140.04 638.95 P
2 F
3.38 ( strategy - All of the \336rst-level) 261.05 638.95 P
0.72 (resolvents are computed \336rst, then the second-level) 99.65 617.95 P
-0.32 (resolvents) 99.65 596.95 P
-0.32 (, and so on, where an ith-level resolvent is) 184.2 596.95 P
2.95 (one whose deepest parent is an \050i-1\051th-level resol-) 99.65 575.95 P
(vent.) 99.65 554.95 T
(2.) 72.65 507.95 T
5.4 (The) 99.65 507.95 P
1 F
5.57 (Unit-preference) 142.06 507.95 P
2 F
5.4 ( strategy - P) 291.06 507.95 P
5.4 (erform resolu-) 408.28 507.95 P
2.11 (tions where one of the sentences is a single literal) 99.65 486.95 P
(\050also known as a) 99.65 465.95 T
1 F
(unit clause) 242.7 465.95 T
2 F
(\051.) 345.86 465.95 T
(3.) 72.65 418.95 T
0.57 (The) 99.65 418.95 P
1 F
0.58 (Set-of-support) 137.23 418.95 P
2 F
0.57 ( strategy - It starts by identify-) 270.57 418.95 P
-0.17 (ing a set of sentences called the) 99.65 397.95 P
1 F
-0.18 (set of support) 365.48 397.95 P
2 F
-0.17 (. F) 493.81 397.95 P
-0.17 (or) 514.66 397.95 P
-0.03 (example) 99.65 376.95 P
-0.03 (, select at least one parent of eac) 169.01 376.95 P
-0.03 (h resolvent) 439.02 376.95 P
0.21 (from among the c) 99.65 355.95 P
0.21 (lauses resulting from the negation) 244.81 355.95 P
(of the query or from their desendants) 99.65 334.95 T
(.) 409.86 334.95 T
(4.) 72.65 287.95 T
0.71 (The) 99.65 287.95 P
1 F
0.74 ( linear-input form) 131.66 287.95 P
2 F
0.71 ( strategy - Every resolution) 301.13 287.95 P
-0.3 (combines one of the input sentences \050from the KB or) 99.65 266.95 P
(the query\051 with some other sentence) 99.65 245.95 T
(.) 401.33 245.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 2) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 24 Q
(Situation Calculus) 181.77 728.95 T
(-) 63.65 685.45 T
2 20 Q
(Represent c) 78.53 685.45 T
(hange in \336rst-order logic) 186.89 685.45 T
(.) 414.29 685.45 T
2 18 Q
(Initial Situation:) 81.65 462.11 T
(F) 351.65 462.11 T
(inal Situation:) 363.48 462.11 T
(On\050B) 81.65 422.45 T
(, A\051) 124.98 422.45 T
3 F
(L) 158.98 422.45 T
2 F
( On\050A, T) 171.33 422.45 T
(able\051) 241.35 422.45 T
(On\050B) 351.65 422.45 T
(, T) 394.98 422.45 T
(able\051) 416 422.45 T
(Use) 63.65 380.45 T
1 F
(situation variables) 100.66 380.45 T
2 F
( in representing a sequence of) 276.47 380.45 T
(situations:) 63.65 359.45 T
(On\050B) 81.65 317.45 T
(, A, S\051) 124.98 317.45 T
3 F
(L) 180.33 317.45 T
2 F
( On\050A, T) 192.68 317.45 T
(able) 262.7 317.45 T
(, S\051) 297.06 317.45 T
3 F
($) 351.65 317.45 T
2 F
( [On\050B) 383.22 317.45 T
(, T) 437.55 317.45 T
(able) 458.57 317.45 T
(,) 492.93 317.45 T
(\051]) 519.62 317.45 T
-0.05 (Introduce an operator) 63.65 275.45 P
-0.05 (,) 243.74 275.45 P
1 F
-0.05 (Putontable) 253.71 275.45 P
2 F
-0.05 (, whic) 357.37 275.45 P
-0.05 (h c) 405.87 275.45 P
-0.05 (hanges situ-) 429.69 275.45 P
(ations by putting a bloc) 63.65 254.45 T
(k on the table:) 258.57 254.45 T
3 F
(") 81.65 212.45 T
2 F
(s) 94.49 212.45 T
3 F
(") 102.82 212.45 T
2 F
(x[) 115.65 212.45 T
3 F
(\330) 131.31 212.45 T
2 F
(On\050x,T) 144.15 212.45 T
(able) 200.83 212.45 T
(, s\051) 235.19 212.45 T
3 F
(\336) 269.54 212.45 T
2 F
(On\050x,T) 291.8 212.45 T
(able) 348.48 212.45 T
(,Putontable\050x,s\051\051]) 382.85 212.45 T
(Need to know also something is not on the table if it is) 63.65 170.45 T
(on something that is not a table:) 63.65 149.45 T
3 F
(") 81.65 107.45 T
2 F
(s) 94.49 107.45 T
3 F
(") 102.82 107.45 T
2 F
(y) 115.65 107.45 T
3 F
(") 125.32 107.45 T
2 F
(z[On\050y) 138.15 107.45 T
(,z,s\051) 191.22 107.45 T
3 F
(L\330) 229.22 107.45 T
2 F
(Equal\050z,T) 254.4 107.45 T
(able\051) 334.75 107.45 T
3 F
(\336 \330) 380.43 107.45 T
2 F
(On\050y) 415.53 107.45 T
(,T) 453.95 107.45 T
(able) 469.97 107.45 T
(,s\051]) 504.33 107.45 T
0 0 0 1 0 0 0 K
366.54 307.65 383.22 330.45 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 365.83 317.45 T
4 12 Q
(f) 377.84 314.45 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
502.94 307.65 519.62 330.45 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 502.23 317.45 T
4 12 Q
(f) 514.24 314.45 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
176.14 517.39 221.14 615.09 R
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
221.14 615.09 176.14 663.95 131.15 663.95 131.15 566.24 176.14 517.39 5 L
N
131.15 663.95 176.14 615.09 2 L
N
131.15 615.77 176.14 566.24 2 L
N
176.14 566.24 221.14 566.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
131.15 590.67 86.15 590.67 63.65 590.67 153.64 492.95 288.65 492.95 221.14 566.24 221.14 517.39
 176.14 517.39 131.15 566.24 9 Y
4 X
V
0 X
N
2 18 Q
(B) 193.02 589.13 T
(A) 193.02 540.28 T
360.65 510.95 405.65 555.95 R
N
405.65 555.95 360.65 600.95 315.65 600.95 315.65 555.95 360.65 510.95 5 L
N
315.65 600.95 360.65 555.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
450.65 510.95 495.65 555.95 R
N
495.65 555.95 450.65 600.95 405.65 600.95 405.65 555.95 450.65 510.95 5 L
N
405.65 600.95 450.65 555.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315.65 589.95 270.65 591.95 360.65 492.95 531.65 492.95 495.65 533.45 495.65 510.95 450.65 510.95
 405.65 555.95 405.65 510.95 360.65 510.95 315.65 555.95 11 Y
4 X
V
0 X
N
371.65 589.95 405.65 589.95 405.65 555.95 3 Y
4 X
V
0 X
N
( A) 369.65 528.95 T
(  B) 459.65 528.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
pstopssaved restore
%%Page: pstops 2
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 3) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(Situation Calculus \050Cont\325) 170.71 732.95 T
(d\051) 405.59 732.95 T
2 F
(Initial axioms:) 63.65 690.95 T
(On\050B) 81.65 648.95 T
(, A, S\051) 124.98 648.95 T
(On\050A, T) 81.65 627.95 T
(able) 146.67 627.95 T
(, S\051) 181.03 627.95 T
3 F
(") 81.65 606.95 T
2 F
(s) 94.49 606.95 T
3 F
(") 107.82 606.95 T
2 F
(x[) 120.66 606.95 T
3 F
(\330) 136.32 606.95 T
2 F
(On\050x,T) 149.15 606.95 T
(able) 205.83 606.95 T
(, s\051) 240.2 606.95 T
3 F
(\336) 274.54 606.95 T
2 F
(On\050x,T) 296.81 606.95 T
(able) 353.49 606.95 T
(,Putontable\050x,s\051\051]) 387.85 606.95 T
3 F
(") 81.65 585.95 T
2 F
(s) 94.49 585.95 T
3 F
(") 102.82 585.95 T
2 F
(y) 115.65 585.95 T
3 F
(") 125.32 585.95 T
2 F
(z[On\050y) 138.15 585.95 T
(,z,s\051) 191.22 585.95 T
3 F
(L\330) 229.22 585.95 T
2 F
(Equal\050z,T) 254.4 585.95 T
(able\051) 334.75 585.95 T
3 F
(\336 \330) 380.43 585.95 T
2 F
(On\050y) 415.53 585.95 T
(,T) 453.95 585.95 T
(able) 469.97 585.95 T
(,s\051]) 504.33 585.95 T
(The theorem to be proved:) 63.65 543.95 T
3 F
($) 81.65 501.95 T
2 F
( [On\050B) 118.22 501.95 T
(, T) 172.55 501.95 T
(able) 193.57 501.95 T
(,) 227.93 501.95 T
( \051]) 257.99 501.95 T
(Negating the theorem:) 63.65 459.95 T
3 F
(") 81.65 417.95 T
2 F
( [) 121.17 417.95 T
3 F
(\330) 132.17 417.95 T
2 F
(On\050B) 145.01 417.95 T
(, T) 188.33 417.95 T
(able) 209.36 417.95 T
(,) 243.72 417.95 T
( \051]) 273.78 417.95 T
(Conversion to CNF:) 63.65 375.95 T
(On\050B) 81.65 333.95 T
(, A, S\051) 124.98 333.95 T
(\0501\051) 504.65 333.95 T
(On\050A, T) 81.65 300.95 T
(able) 146.67 300.95 T
(, S\051) 181.03 300.95 T
(\0502\051) 504.65 300.95 T
(On\050x,T) 81.65 267.95 T
(able) 138.33 267.95 T
(,) 172.7 267.95 T
(\051  V  On\050x,T) 209.59 267.95 T
(able) 305.28 267.95 T
(,Putontable\050x,) 339.64 267.95 T
(\051\051) 484.21 267.95 T
(\0503\051) 504.65 267.95 T
3 F
(\330) 81.65 234.95 T
2 F
(On\050y) 94.49 234.95 T
(,z,) 132.9 234.95 T
(\051 V Equal\050z,T) 178.56 234.95 T
(able\051 V) 287.91 234.95 T
3 F
( \330) 346.59 234.95 T
2 F
(On\050y) 363.93 234.95 T
(,T) 402.34 234.95 T
(able) 418.36 234.95 T
(,) 452.72 234.95 T
(\051) 485.04 234.95 T
(\0504\051) 504.65 234.95 T
3 F
(\330) 81.65 201.95 T
2 F
(Equal\050B) 94.49 201.95 T
(, A\051) 162.49 201.95 T
(\0505\051) 504.65 201.95 T
3 F
(\330) 81.65 168.95 T
2 F
(Equal\050B) 94.49 168.95 T
(,T) 162.49 168.95 T
(able\051) 178.51 168.95 T
(\0506\051) 504.65 168.95 T
3 F
(\330) 81.65 135.95 T
2 F
(Equal\050A,T) 94.49 135.95 T
(able\051) 179.18 135.95 T
(\0507\051) 504.65 135.95 T
3 F
(\330) 81.65 102.95 T
2 F
(On\050B) 94.49 102.95 T
(, T) 137.81 102.95 T
(able) 158.84 102.95 T
(,) 193.2 102.95 T
( \051) 224.89 102.95 T
(\0508\051) 504.65 102.95 T
0 0 0 1 0 0 0 K
96.54 492.15 118.22 514.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 100.83 501.95 T
4 12 Q
(f) 112.84 498.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
237.94 492.15 257.99 514.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 240.6 501.95 T
4 12 Q
(f) 252.61 498.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
99.49 408.15 121.17 430.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 103.78 417.95 T
4 12 Q
(f) 115.79 414.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
253.73 408.15 273.78 430.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 256.39 417.95 T
4 12 Q
(f) 268.4 414.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
182.7 258.15 209.59 280.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 186.31 267.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 196.56 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
457 258.15 484.21 280.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 462.61 267.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 472.86 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
151.56 225.15 178.56 247.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 161.28 234.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 171.53 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
457.73 225.15 485.04 247.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 461.44 234.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 471.69 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
203.21 93.15 224.89 115.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 207.5 102.95 T
4 12 Q
(f) 219.51 99.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 4) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(Situation Calculus \050Cont\325) 170.71 732.95 T
(d\051) 405.59 732.95 T
2 F
(\0503\051) 63.65 666.95 T
(\0508\051) 360.65 666.95 T
(On\050x, T) 63.65 644.95 T
(able) 125.34 644.95 T
(,) 159.7 644.95 T
(\051 V) 198.71 644.95 T
3 F
(\330) 360.65 644.95 T
1 F
(On\050B, T) 373.49 644.95 T
(able,) 443.65 644.95 T
( \051) 514.83 644.95 T
(On\050x, T) 63.65 622.95 T
(able, Putontable\050x,) 130.81 622.95 T
(\051\051) 337.3 622.95 T
2 F
(\0504\051) 63.65 534.95 T
(\0509\051) 360.65 534.95 T
3 F
(\330) 63.65 512.95 T
1 F
(On\050y) 76.49 512.95 T
(, z,) 120.01 512.95 T
(\051 V) 169.85 512.95 T
(On\050B, T) 360.65 512.95 T
(able,) 430.82 512.95 T
(\051) 507.32 512.95 T
2 F
(Equal\050z, T) 63.65 490.95 T
(able\051 V) 149.01 490.95 T
3 F
(\330) 63.65 468.95 T
2 F
(On\050y) 76.49 468.95 T
(, T) 114.9 468.95 T
(able) 135.92 468.95 T
(,) 170.28 468.95 T
(\051) 204.29 468.95 T
(\0507\051) 63.65 402.95 T
(\05010\051) 360.65 402.95 T
3 F
(\330) 63.65 380.95 T
1 F
(Equal\050A,T) 76.49 380.95 T
(able\051) 168.81 380.95 T
3 F
(\330) 360.65 380.95 T
2 F
(On\050B) 373.49 380.95 T
(, w) 416.81 380.95 T
(,) 438.57 380.95 T
(\051 V) 474.58 380.95 T
1 F
(Equal\050w) 360.65 358.95 T
(, T) 436.85 358.95 T
(able\051) 458.68 358.95 T
2 F
(\0501\051) 63.65 270.95 T
(\05011\051) 360.65 270.95 T
1 F
(On\050B, A, S\051) 63.65 248.95 T
3 F
(\330) 360.65 248.95 T
1 F
(On\050B, A,) 373.49 248.95 T
(\051) 481.65 248.95 T
2 F
(\05012\051) 360.65 160.95 T
(Nil) 360.65 138.95 T
0 0 0 1 0 0 0 K
169.71 635.15 198.71 657.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 179.43 644.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 189.67 641.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
493.15 635.15 514.83 657.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 497.44 644.95 T
4 12 Q
(f) 509.45 641.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
307.3 613.15 337.3 635.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 317.02 622.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 327.27 619.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
144.85 503.15 169.85 528.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 147.57 512.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 157.82 509.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
480.32 503.15 507.32 525.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 484.03 512.95 T
0 0 0 1 0 0 0 K
0 12 Q
(9) 494.28 509.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
175.29 459.15 204.29 481.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 185.01 468.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 195.25 465.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
443.58 371.15 474.58 393.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 450.3 380.95 T
0 0 0 1 0 0 0 K
0 12 Q
(10) 460.54 377.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
450.65 239.15 481.65 261.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 457.6 248.95 T
0 0 0 1 0 0 0 K
6 12 Q
(11) 467.85 245.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
90 450 1.5 1.5 342.26 332.43 544.1 GG
333.86 543.64 335.02 547.26 346.47 539.6 332.7 540.02 4 Y
3 H
0 Z
N
333.86 543.64 335.02 547.26 346.47 539.6 332.7 540.02 4 Y
V
126.65 609.95 332.43 544.1 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 576.13 GG
369.65 574.63 373.45 574.63 369.65 561.39 365.85 574.63 4 Y
0 Z
N
369.65 574.63 373.45 574.63 369.65 561.39 365.85 574.63 4 Y
V
369.65 627.95 369.65 576.13 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 450.13 GG
369.65 448.63 373.45 448.63 369.65 435.39 365.85 448.63 4 Y
0 Z
N
369.65 448.63 373.45 448.63 369.65 435.39 365.85 448.63 4 Y
V
369.65 492.95 369.65 450.13 2 L
2 Z
N
90 450 1.5 1.5 348.69 331.86 415.9 GG
333.33 415.61 334.08 419.33 346.32 413.01 332.58 411.89 4 Y
0 Z
N
333.33 415.61 334.08 419.33 346.32 413.01 332.58 411.89 4 Y
V
126.65 456.95 331.86 415.9 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 315.13 GG
369.65 313.63 373.45 313.63 369.65 300.39 365.85 313.63 4 Y
0 Z
N
369.65 313.63 373.45 313.63 369.65 300.39 365.85 313.63 4 Y
V
369.65 348.95 369.65 315.13 2 L
2 Z
N
90 450 1.5 1.5 270 369.65 207.13 GG
369.65 205.63 373.45 205.63 369.65 192.39 365.85 205.63 4 Y
0 Z
N
369.65 205.63 373.45 205.63 369.65 192.39 365.85 205.63 4 Y
V
369.65 240.95 369.65 207.13 2 L
2 Z
N
90 450 1.5 1.5 338.2 332.91 284.44 GG
334.3 283.89 335.71 287.41 346.6 278.97 332.89 280.36 4 Y
0 Z
N
334.3 283.89 335.71 287.41 346.6 278.97 332.89 280.36 4 Y
V
126.65 366.95 332.91 284.44 2 L
2 Z
N
90 450 1.5 1.5 342.26 332.43 175.1 GG
333.86 174.64 335.02 178.26 346.47 170.6 332.7 171.02 4 Y
0 Z
N
333.86 174.64 335.02 178.26 346.47 170.6 332.7 171.02 4 Y
V
126.65 240.95 332.43 175.1 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
pstopssaved restore
%%Page: pstops 3
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 5) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(Situation Calculus \050Cont\325) 170.71 732.95 T
(d\051) 405.59 732.95 T
2 F
(\0503\051) 63.65 688.95 T
(\0508\051) 297.65 688.95 T
(On\050x, T) 63.65 666.95 T
(able) 125.34 666.95 T
(,) 159.7 666.95 T
(\051 V) 196.71 666.95 T
3 F
(\330) 297.65 666.95 T
1 F
(On\050B, T) 310.49 666.95 T
(able,) 380.65 666.95 T
( \051) 451.83 666.95 T
2 F
(V) 469.17 666.95 T
1 F
(On\050x, T) 63.65 644.95 T
(able,) 130.81 644.95 T
2 F
(Answer\050) 297.65 644.95 T
( \051) 388.65 644.95 T
1 F
(Putontable\050x,) 99.65 622.95 T
(\051\051) 253.64 622.95 T
2 F
(\0504\051) 63.65 556.95 T
(\0509\051) 297.65 556.95 T
3 F
(\330) 63.65 534.95 T
1 F
(On\050y) 76.49 534.95 T
(, z,) 120.01 534.95 T
(\051) 171.85 534.95 T
2 F
(V) 184.02 534.95 T
1 F
(On\050B, T) 297.65 534.95 T
(able,) 367.82 534.95 T
(\051) 444.32 534.95 T
2 F
(V) 456.48 534.95 T
(Equal\050z, T) 63.65 512.95 T
(able\051 V) 149.01 512.95 T
(Answer\050Putontable\050B) 297.65 512.95 T
(,) 476.99 512.95 T
(\051\051) 510.99 512.95 T
3 F
(\330) 63.65 490.95 T
2 F
(On\050y) 76.49 490.95 T
(, T) 114.9 490.95 T
(able) 135.92 490.95 T
(,) 170.28 490.95 T
(\051) 202.29 490.95 T
(\0507\051) 63.65 424.95 T
(\05010\051) 297.65 424.95 T
3 F
(\330) 63.65 402.95 T
1 F
(Equal\050A,T) 76.49 402.95 T
(able\051) 168.81 402.95 T
3 F
(\330) 297.65 402.95 T
2 F
(On\050B) 310.49 402.95 T
(, w) 353.81 402.95 T
(,) 375.57 402.95 T
(\051 V) 411.58 402.95 T
1 F
(Equal\050w) 297.65 380.95 T
(, T) 373.85 380.95 T
(able\051) 395.68 380.95 T
2 F
(V) 447.18 380.95 T
(Answer\050Putontable\050B) 297.65 358.95 T
(,) 476.99 358.95 T
(\051\051) 514.99 358.95 T
(\0501\051) 63.65 292.95 T
(\05011\051) 297.65 292.95 T
1 F
(On\050B, A, S\051) 63.65 270.95 T
3 F
(\330) 297.65 270.95 T
1 F
(On\050B, A,) 310.49 270.95 T
(\051) 418.65 270.95 T
2 F
(V) 430.82 270.95 T
(Answer\050Putontable\050B) 297.65 248.95 T
(,) 476.99 248.95 T
(\051\051) 514.99 248.95 T
(\05012\051) 297.65 182.95 T
(Answer\050Putontable\050B) 297.65 160.95 T
(, S\051\051) 476.99 160.95 T
0 0 0 1 0 0 0 K
169.71 657.15 196.71 679.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 177.43 666.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 187.67 663.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
430.15 657.15 451.83 679.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 434.44 666.95 T
4 12 Q
(f) 446.45 663.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
366.97 635.15 388.65 657.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 371.26 644.95 T
4 12 Q
(f) 383.27 641.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
226.64 613.15 253.64 635.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 232.36 622.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 242.61 619.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
144.85 525.15 171.85 550.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 147.57 534.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 157.82 531.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
417.32 525.15 444.32 547.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 421.03 534.95 T
0 0 0 1 0 0 0 K
0 12 Q
(9) 431.28 531.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
481.99 503.15 510.99 525.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 488.71 512.95 T
0 0 0 1 0 0 0 K
0 12 Q
(9) 498.95 509.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
175.29 481.15 202.29 503.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 183.01 490.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 193.25 487.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
380.58 393.95 411.58 415.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 387.3 402.95 T
0 0 0 1 0 0 0 K
0 12 Q
(10) 397.54 399.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
481.99 349.15 514.99 371.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 488.71 358.95 T
0 0 0 1 0 0 0 K
0 12 Q
(10) 498.95 355.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
387.65 261.15 418.65 283.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 394.6 270.95 T
0 0 0 1 0 0 0 K
6 12 Q
(11) 404.85 267.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
481.99 239.15 514.99 261.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 488.71 248.95 T
0 0 0 1 0 0 0 K
0 12 Q
(11) 498.95 245.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
90 450 1.5 1.5 270 306.65 603.13 GG
306.65 601.63 310.45 601.63 306.65 588.39 302.85 601.63 4 Y
3 H
0 Z
N
306.65 601.63 310.45 601.63 306.65 588.39 302.85 601.63 4 Y
V
306.65 636.95 306.65 603.13 2 L
2 Z
N
90 450 1.5 1.5 270 306.65 468.13 GG
306.65 466.63 310.45 466.63 306.65 453.39 302.85 466.63 4 Y
0 Z
N
306.65 466.63 310.45 466.63 306.65 453.39 302.85 466.63 4 Y
V
306.65 501.95 306.65 468.13 2 L
2 Z
N
90 450 1.5 1.5 270 306.65 333.13 GG
306.65 331.63 310.45 331.63 306.65 318.39 302.85 331.63 4 Y
0 Z
N
306.65 331.63 310.45 331.63 306.65 318.39 302.85 331.63 4 Y
V
306.65 348.95 306.65 333.13 2 L
2 Z
N
90 450 1.5 1.5 270 306.65 225.13 GG
306.65 223.63 310.45 223.63 306.65 210.39 302.85 223.63 4 Y
0 Z
N
306.65 223.63 310.45 223.63 306.65 210.39 302.85 223.63 4 Y
V
306.65 240.95 306.65 225.13 2 L
2 Z
N
90 450 1.5 1.5 346.61 269.02 569.62 GG
270.47 569.27 271.35 572.97 283.36 566.21 269.6 565.58 4 Y
0 Z
N
270.47 569.27 271.35 572.97 283.36 566.21 269.6 565.58 4 Y
V
99.65 609.95 269.02 569.62 2 L
2 Z
N
90 450 1.5 1.5 344.05 269.24 435.49 GG
270.68 435.08 271.73 438.73 283.42 431.44 269.64 431.43 4 Y
0 Z
N
270.68 435.08 271.73 438.73 283.42 431.44 269.64 431.43 4 Y
V
99.65 483.95 269.24 435.49 2 L
2 Z
N
90 450 1.5 1.5 334.54 270.43 312.62 GG
271.78 311.98 273.42 315.41 283.74 306.28 270.15 308.55 4 Y
0 Z
N
271.78 311.98 273.42 315.41 283.74 306.28 270.15 308.55 4 Y
V
99.65 393.95 270.43 312.62 2 L
2 Z
N
90 450 1.5 1.5 339.15 269.79 194.13 GG
271.19 193.6 272.54 197.15 283.57 188.88 269.84 190.05 4 Y
0 Z
N
271.19 193.6 272.54 197.15 283.57 188.88 269.84 190.05 4 Y
V
99.65 258.95 269.79 194.13 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 6) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 20 Q
(The F) 194.13 731.61 T
(rame Problem) 253.57 731.61 T
2 18 Q
1.8 (A need to describe the parts of the world that sta) 63.65 664.95 P
1.8 (y the) 488.18 664.95 P
(same after certain operations were performed.) 63.65 642.95 T
1.52 (Suppose that the problem to be solved is similar to the) 63.65 576.95 P
1.05 (previous one) 63.65 554.95 P
1.05 (, but requiring both bloc) 169.37 554.95 P
1.05 (k B and bloc) 374.15 554.95 P
1.05 (k A to) 479.87 554.95 P
(be on the table in the \336nal situation. That is:) 63.65 532.95 T
3 F
($) 81.65 488.95 T
2 F
( [On\050B) 118.22 488.95 T
(, T) 172.55 488.95 T
(able) 193.57 488.95 T
(,) 227.93 488.95 T
( \051) 257.99 488.95 T
3 F
(L) 279 488.95 T
2 F
(  On\050A, T) 291.34 488.95 T
(able) 366.37 488.95 T
(,) 400.73 488.95 T
( \051]) 430.79 488.95 T
(Negating the theorem gives:) 63.65 425.95 T
3 F
(\330) 81.65 383.95 T
2 F
(On\050B) 94.49 383.95 T
(, T) 137.81 383.95 T
(able) 158.84 383.95 T
(,) 193.2 383.95 T
( \051]  V) 223.26 383.95 T
3 F
(\330) 273.26 383.95 T
2 F
(On\050A, T) 286.1 383.95 T
(able) 351.11 383.95 T
(,) 385.47 383.95 T
( \051) 415.53 383.95 T
(\0508\051) 495.65 383.95 T
0 0 0 1 0 0 0 K
96.54 479.15 118.22 501.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 100.83 488.95 T
4 12 Q
(f) 112.84 485.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
237.94 479.15 257.99 501.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 240.6 488.95 T
4 12 Q
(f) 252.61 485.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
410.74 479.15 430.79 501.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 413.4 488.95 T
4 12 Q
(f) 425.41 485.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
203.21 374.15 223.26 396.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 205.87 383.95 T
4 12 Q
(f) 217.88 380.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
395.48 374.15 415.53 396.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 398.14 383.95 T
4 12 Q
(f) 410.15 380.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
pstopssaved restore
%%Page: pstops 4
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
/showpage{}def/copypage{}def/erasepage{}def
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 7) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(The F) 165.28 732.95 T
(rame problem \050Cont\325) 218.78 732.95 T
(d\051) 411.02 732.95 T
2 F
(\0503\051) 63.65 690.95 T
(\0508\051) 261.65 690.95 T
(On\050x, T) 63.65 668.95 T
(able) 125.34 668.95 T
(,) 159.7 668.95 T
(\051 V) 198.71 668.95 T
3 F
(\330) 261.65 668.95 T
1 F
(On\050B, T) 274.49 668.95 T
(able,) 344.65 668.95 T
( \051) 415.83 668.95 T
2 F
(V) 433.17 668.95 T
1 F
(On\050x, T) 63.65 646.95 T
(able,) 130.81 646.95 T
3 F
(\330) 261.65 646.95 T
2 F
(On\050A, T) 274.49 646.95 T
(able) 339.5 646.95 T
(,) 373.86 646.95 T
( \051) 403.92 646.95 T
1 F
(Putontable\050x,) 72.65 624.95 T
(\051\051) 226.64 624.95 T
2 F
(\0504\051) 63.65 558.95 T
(\0509\051) 261.65 558.95 T
3 F
(\330) 63.65 536.95 T
1 F
(On\050y) 76.49 536.95 T
(, z,) 120.01 536.95 T
(\051 V) 169.85 536.95 T
(On\050B, T) 261.65 536.95 T
(able,) 331.82 536.95 T
(\051) 408.32 536.95 T
2 F
(V) 420.48 536.95 T
(Equal\050z, T) 63.65 514.95 T
(able\051 V) 149.01 514.95 T
3 F
(\330) 261.65 514.95 T
2 F
(On\050A,T) 274.49 514.95 T
(able) 334.5 514.95 T
(,Putontable\050B) 368.86 514.95 T
(,) 483.88 514.95 T
(\051\051) 512.12 514.95 T
3 F
(\330) 63.65 492.95 T
2 F
(On\050y) 76.49 492.95 T
(, T) 114.9 492.95 T
(able) 135.92 492.95 T
(,) 170.28 492.95 T
(\051) 204.29 492.95 T
(\0507\051) 63.65 426.95 T
(\05010\051) 261.65 426.95 T
3 F
(\330) 63.65 404.95 T
1 F
(Equal\050A,T) 76.49 404.95 T
(able\051) 168.81 404.95 T
3 F
(\330) 261.65 404.95 T
2 F
(On\050B) 274.49 404.95 T
(, w) 317.81 404.95 T
(,) 339.57 404.95 T
(\051 V) 375.58 404.95 T
1 F
(Equal\050w) 261.65 382.95 T
(, T) 337.85 382.95 T
(able\051) 359.68 382.95 T
2 F
(V) 411.18 382.95 T
3 F
(\330) 261.65 360.95 T
2 F
(On\050A,T) 274.49 360.95 T
(able) 334.5 360.95 T
(,Putontable\050B) 368.86 360.95 T
(,) 483.88 360.95 T
(\051\051) 512.12 360.95 T
(\0501\051) 63.65 294.95 T
(\05011\051) 261.65 294.95 T
1 F
(On\050B, A, S\051) 63.65 272.95 T
3 F
(\330) 261.65 272.95 T
1 F
(On\050B, A,) 274.49 272.95 T
(\051) 382.65 272.95 T
2 F
(V) 394.82 272.95 T
3 F
(\330) 261.65 250.95 T
2 F
(On\050A,T) 274.49 250.95 T
(able) 334.5 250.95 T
(,Putontable\050B) 368.86 250.95 T
(,) 483.88 250.95 T
(\051\051) 512.12 250.95 T
(\0502\051) 63.65 184.95 T
(\05012\051) 261.65 184.95 T
(On\050A, T) 63.65 162.95 T
(able) 128.67 162.95 T
(, S\051) 163.03 162.95 T
3 F
(\330) 261.65 162.95 T
2 F
(On\050A,T) 274.49 162.95 T
(able) 334.5 162.95 T
(,Putontable\050B) 368.86 162.95 T
(, S\051\051) 483.88 162.95 T
1 F
(S is a constant \050the initial situation\051, NO substitu-) 63.65 125.95 T
(tion is possible!) 63.65 103.95 T
0 0 0 1 0 0 0 K
169.71 659.15 198.71 681.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 179.43 668.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 189.67 665.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
394.15 659.15 415.83 681.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 398.44 668.95 T
4 12 Q
(f) 410.45 665.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
383.87 637.15 403.92 659.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 386.53 646.95 T
4 12 Q
(f) 398.54 643.95 T
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
199.64 615.15 226.64 637.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 205.36 624.95 T
0 0 0 1 0 0 0 K
0 12 Q
(3) 215.61 621.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
144.85 527.15 169.85 552.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 147.57 536.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 157.82 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
381.32 527.15 408.32 549.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 385.03 536.95 T
0 0 0 1 0 0 0 K
0 12 Q
(9) 395.28 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
488.88 505.15 512.12 527.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 490.83 514.95 T
0 0 0 1 0 0 0 K
0 12 Q
(9) 501.08 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
175.29 483.15 204.29 505.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 185.01 492.95 T
0 0 0 1 0 0 0 K
0 12 Q
(4) 195.25 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
344.58 395.15 375.58 417.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 351.3 404.95 T
0 0 0 1 0 0 0 K
0 12 Q
(10) 361.54 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
488.88 351.15 512.12 373.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 487.83 360.95 T
0 0 0 1 0 0 0 K
0 12 Q
(10) 498.08 357.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
351.65 263.15 382.65 285.95 C
0 0 0 1 0 0 0 K
5 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 358.6 272.95 T
0 0 0 1 0 0 0 K
6 12 Q
(11) 368.85 269.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
488.88 241.15 512.12 263.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 487.83 250.95 T
0 0 0 1 0 0 0 K
0 12 Q
(11) 498.08 247.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
90 450 1.5 1.5 270 279.65 603.13 GG
279.65 601.63 283.45 601.63 279.65 588.39 275.85 601.63 4 Y
3 H
0 Z
N
279.65 601.63 283.45 601.63 279.65 588.39 275.85 601.63 4 Y
V
279.65 636.95 279.65 603.13 2 L
2 Z
N
90 450 1.5 1.5 270 279.65 468.13 GG
279.65 466.63 283.45 466.63 279.65 453.39 275.85 466.63 4 Y
0 Z
N
279.65 466.63 283.45 466.63 279.65 453.39 275.85 466.63 4 Y
V
279.65 510.95 279.65 468.13 2 L
2 Z
N
90 450 1.5 1.5 270 279.65 333.13 GG
279.65 331.63 283.45 331.63 279.65 318.39 275.85 331.63 4 Y
0 Z
N
279.65 331.63 283.45 331.63 279.65 318.39 275.85 331.63 4 Y
V
279.65 357.95 279.65 333.13 2 L
2 Z
N
90 450 1.5 1.5 270 279.65 225.13 GG
279.65 223.63 283.45 223.63 279.65 210.39 275.85 223.63 4 Y
0 Z
N
279.65 223.63 283.45 223.63 279.65 210.39 275.85 223.63 4 Y
V
279.65 240.95 279.65 225.13 2 L
2 Z
N
90 450 1.5 1.5 341.57 233.5 571.33 GG
234.93 570.85 236.13 574.46 247.49 566.67 233.72 567.25 4 Y
0 Z
N
234.93 570.85 236.13 574.46 247.49 566.67 233.72 567.25 4 Y
V
90.65 618.95 233.5 571.33 2 L
2 Z
N
90 450 1.5 1.5 344.48 233.2 444.35 GG
234.65 443.95 235.66 447.61 247.41 440.4 233.63 440.29 4 Y
0 Z
N
234.65 443.95 235.66 447.61 247.41 440.4 233.63 440.29 4 Y
V
90.65 483.95 233.2 444.35 2 L
2 Z
N
90 450 1.5 1.5 330.95 235.01 313.75 GG
236.32 313.02 238.16 316.34 247.9 306.59 234.47 309.7 4 Y
0 Z
N
236.32 313.02 238.16 316.34 247.9 306.59 234.47 309.7 4 Y
V
90.65 393.95 235.01 313.75 2 L
2 Z
N
90 450 1.5 1.5 336.04 234.21 204.14 GG
235.58 203.53 237.12 207 247.68 198.16 234.04 200.06 4 Y
0 Z
N
235.58 203.53 237.12 207 247.68 198.16 234.04 200.06 4 Y
V
90.65 267.95 234.21 204.14 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
pstopssaved restore
/pstopssaved save def
pstopsmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
/pstopsmatrix matrix currentmatrix def
initclip
pstopsxform concat
595.3 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(COMP221) 36.65 61.6 T
-1.25 ( 8) 551.15 61.6 P
36.65 87.95 558.65 771.95 18 RR
0.5 H
0 Z
N
1 18 Q
(F) 234.9 732.95 T
(rame Axiom) 247.58 732.95 T
2 F
1.8 (The Putontable axiom sa) 63.65 688.95 P
1.8 (ys what happens to the object) 276.27 688.95 P
0.94 (being moved, but it does not sa) 63.65 666.95 P
0.94 (y what happens to other) 326.19 666.95 P
-0.25 (objects) 63.65 644.95 P
-0.25 (. W) 119.87 644.95 P
-0.25 (e know bloc) 146.2 644.95 P
-0.25 (k A sta) 241.92 644.95 P
-0.25 (ys on the table after bloc) 300.25 644.95 P
-0.25 (k B) 503.23 644.95 P
0.52 (is put on the table) 63.65 622.95 P
0.52 (, but that piece of knowledge is not in) 216.44 622.95 P
2.51 (the logic! The system wouldn\325t know whic) 63.65 600.95 P
2.51 (h predicate\325) 424.26 600.95 P
2.51 (s) 523.32 600.95 P
4.51 (values are unc) 63.65 578.95 P
4.51 (hanged in going from one situation to) 193.22 578.95 P
(another) 63.65 556.95 T
(.) 126.85 556.95 T
1 F
1.85 (F) 63.65 512.95 P
1.85 (rame axiom:) 76.32 512.95 P
2 F
1.79 (A statement about how predicates sur-) 200.35 512.95 P
3.96 (vive operations) 63.65 490.95 P
3.96 (.) 193.5 490.95 P
1 F
4.09 (A frame axiom tells how On sur-) 207.47 490.95 P
(vives Putontable:) 63.65 468.95 T
3 F
(") 99.65 424.95 T
2 F
(s) 112.49 424.95 T
3 F
(") 125.82 424.95 T
2 F
(x) 138.66 424.95 T
3 F
(") 153.33 424.95 T
2 F
(y) 166.16 424.95 T
3 F
(") 180.83 424.95 T
2 F
(z [ On\050x, y) 193.67 424.95 T
(, s\051) 276.41 424.95 T
3 F
(L \330) 305.75 424.95 T
2 F
(Equal\050x, z\051) 335.43 424.95 T
3 F
(\336) 430.44 424.95 T
2 F
(On\050x, y) 216.65 403.95 T
(, Putontable\050z, s\051\051 ]) 274.74 403.95 T
2.56 (It means: if x is on y before the Putontable operation,) 63.65 361.95 P
0.66 (then x remains on y afterw) 63.65 340.95 P
0.66 (ard, as long as x w) 290.97 340.95 P
0.66 (as not the) 447.98 340.95 P
(object put on the table) 63.65 319.95 T
(. In CNF:) 248.69 319.95 T
3 F
-0.08 (  \330) 63.65 277.95 P
2 F
-0.09 (On\050p) 85.33 277.95 P
-0.09 (, q,) 126.33 277.95 P
-0.09 (\051 V) 171.66 277.95 P
-0.09 (Equal\050p) 199.99 277.95 P
-0.09 (, r\051) 265.67 277.95 P
-0.09 (V) 294 277.95 P
-0.09 (On\050p) 311.41 277.95 P
-0.09 (, q, Putontable\050r) 352.42 277.95 P
-0.09 (,) 486.14 277.95 P
-0.09 (\051\051) 519.66 277.95 P
(Resolving it with \05012\051:) 63.65 235.95 T
3 F
(\330) 257.03 235.95 T
2 F
(On\050A,T) 269.86 235.95 T
(able) 329.87 235.95 T
(,Putontable\050B) 364.23 235.95 T
(, S\051\051) 479.25 235.95 T
3 F
(\330) 135.65 193.95 T
2 F
(On\050A, T) 148.49 193.95 T
(able) 213.5 193.95 T
(,) 247.86 193.95 T
(S\051 V) 258.03 193.95 T
(Equal\050A, B\051) 297.87 193.95 T
1.66 (Resolving \05013\051 with \0505\051 and the result with \0502\051, a Nil is) 63.65 151.95 P
(obtained. Thus completed the proof) 63.65 130.95 T
(.) 356.01 130.95 T
0 0 0 1 0 0 0 K
151.26 268.15 171.66 293.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 153.98 277.95 T
0 0 0 1 0 0 0 K
0 12 Q
(0) 164.23 274.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
496.06 268.15 519.66 293.95 C
0 0 0 1 0 0 0 K
4 24 Q
0 X
0 0 0 1 0 0 0 K
(s) 498.78 277.95 T
0 0 0 1 0 0 0 K
0 12 Q
(0) 509.03 274.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
pstopssaved restore
%%Trailer
%%BoundingBox: 0 0 595.3 841.89
%%PageOrder: Ascend
%%Pages: 8
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Roman
%%+ Symbol
%%+ Times-Italic
%%+ Times-BoldItalic
%%+ Times-Bold
%%EOF
