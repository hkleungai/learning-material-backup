%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 20 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Courier-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Courier-BoldOblique FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
7 0 /Times-Italic FMFONTDEFINE
8 0 /Palatino-Bold FMFONTDEFINE
9 0 /Palatino-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 1) 383.04 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
1 11.45 Q
1 1 0 0 0 0 1 K
(String I/O) 187.36 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 10.18 Q
(\245) 72.82 705.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(String can be output using the operator <<) 89.36 705.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ex:) 90 681.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(char name[16] = "Chan Tai Man") 95.73 661.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cout << endl << name;) 95.73 638.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cout << endl << setw\05016\051 << name;) 95.73 582.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cout << endl << setiosflags\050ios::left\051) 95.73 526.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(     << setw\05016\051 << name;) 95.73 515.19 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
75.68 602.16 367.77 635.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 612.34 362.04 629.52 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 611.07 104.32 628.25 R
4 X
0 0 0 1 0 0 0 K
N
104.32 611.07 121.5 628.25 R
N
121.5 611.07 138.68 628.25 R
N
138.68 611.07 155.86 628.25 R
N
155.86 611.07 173.04 628.25 R
N
173.04 611.07 190.23 628.25 R
N
190.23 611.07 207.41 628.25 R
N
207.41 611.07 224.59 628.25 R
N
224.59 611.07 241.77 628.25 R
N
241.77 611.07 258.95 628.25 R
N
258.95 611.07 276.13 628.25 R
N
276.13 611.07 293.31 628.25 R
N
2 10.18 Q
0 X
(C  h  a  n    T  a  i    M  a  n) 92.86 616.8 T
293.31 611.07 310.5 628.25 R
4 X
N
310.49 611.07 327.68 628.25 R
N
327.68 611.07 344.86 628.25 R
N
344.86 611.07 362.04 628.25 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
75.68 546.16 367.77 579.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 556.34 362.04 573.52 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 555.07 104.32 572.25 R
4 X
0 0 0 1 0 0 0 K
N
104.32 555.07 121.5 572.25 R
N
121.5 555.07 138.68 572.25 R
N
138.68 555.07 155.86 572.25 R
N
155.86 555.07 173.04 572.25 R
N
173.04 555.07 190.23 572.25 R
N
190.23 555.07 207.41 572.25 R
N
207.41 555.07 224.59 572.25 R
N
224.59 555.07 241.77 572.25 R
N
241.77 555.07 258.95 572.25 R
N
258.95 555.07 276.13 572.25 R
N
276.13 555.07 293.31 572.25 R
N
2 10.18 Q
0 X
(           C  h  a  n    T  a  i     M  a  n) 92.86 560.8 T
293.31 555.07 310.5 572.25 R
4 X
N
310.49 555.07 327.68 572.25 R
N
327.68 555.07 344.86 572.25 R
N
344.86 555.07 362.04 572.25 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
75.68 478.71 367.77 511.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 488.89 362.04 506.07 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 487.62 104.32 504.8 R
4 X
0 0 0 1 0 0 0 K
N
104.32 487.62 121.5 504.8 R
N
121.5 487.62 138.68 504.8 R
N
138.68 487.62 155.86 504.8 R
N
155.86 487.62 173.04 504.8 R
N
173.04 487.62 190.23 504.8 R
N
190.23 487.62 207.41 504.8 R
N
207.41 487.62 224.59 504.8 R
N
224.59 487.62 241.77 504.8 R
N
241.77 487.62 258.95 504.8 R
N
258.95 487.62 276.13 504.8 R
N
276.13 487.62 293.31 504.8 R
N
2 10.18 Q
0 X
(C  h  a  n    T  a  i    M  a  n) 92.86 493.34 T
293.31 487.62 310.5 504.8 R
4 X
N
310.49 487.62 327.68 504.8 R
N
327.68 487.62 344.86 504.8 R
N
344.86 487.62 362.04 504.8 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 2) 781.49 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
3 11.45 Q
1 1 0 0 0 0 1 K
(String I/O) 595.19 742.79 T
0 0 0 1 0 0 0 K
0 10.18 Q
0 0 0 1 0 0 0 K
(\245) 471.27 716.28 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
1.37 (String can be input using the operator  >>,  b) 487.81 716.28 P
1.37 (ut  white spaces are) 683.87 716.28 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(skipped when strings are read this w) 488.45 704.83 T
(ay) 636.52 704.83 T
(.) 645.47 704.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ex.) 488.45 681.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(char a[80], b[80];) 528.54 681.92 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout  <<  "Enter a string:\134n" ;) 528.54 670.46 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cin  >>  a  >> b;) 528.54 659.01 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout  <<  a  <<  b  <<  "END OF OUTPUT\134n";) 528.54 647.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Output:) 488.45 624.65 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(Enter a string:) 528.54 624.65 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(This  is  a  test.) 528.54 613.19 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ThisisEND  OF OUTPUT) 528.54 601.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 568.65 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.22 (The function) 487.81 568.65 P
3 F
0.22 (getline) 545.87 568.65 P
0 F
0.22 (  can be used to read an entire line of input into) 574.72 568.65 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(a string v) 488.45 557.19 T
(ariable.) 526.09 557.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ex. 1:) 488.45 534.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(char a[80];) 528.54 534.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout <<  "Enter a string:\134n" ;) 528.54 522.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cin.getline \050 a, 80 \051;) 528.54 511.37 T
(// The 2nd ar) 623.55 511.37 T
(gument is the size of a) 675.68 511.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout  <<  a  <<   "END OF OUTPUT\134n";) 528.54 499.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Output:) 488.45 477.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(Enter a string:) 528.54 477.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(This  is  a  test.) 528.54 465.56 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(This  is  a  test.END  OF OUTPUT) 528.54 454.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Ex. 2:) 488.45 431.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(char a[5], b[80];) 528.54 431.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cin >> a;) 528.54 419.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cin.getline \050 b, 9 \051 ;) 528.54 408.29 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(cout <<  a  << "#" <<  b  <<  "END OF OUTPUT\134n";) 528.54 396.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Output:) 488.45 373.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(This is a test.) 528.54 373.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(This# is a teEND OF OUTPUT) 528.54 362.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 3) 383.04 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
3 10.18 Q
1 1 0 0 0 0 1 K
(Example) 202.49 743.64 T
0 0 0 1 0 0 0 K
0 F
0 0 0 1 0 0 0 K
(//Reads quiz scores for each student into the tw) 72.82 722.01 T
(o-dimensional array) 265.01 722.01 T
(//Computes the a) 72.82 710.55 T
(v) 141.62 710.55 T
(erage score for each student and the a) 146.56 710.55 T
(v) 299.31 710.55 T
(erage score for) 304.25 710.55 T
(// each quiz. Displays the quiz scores and the a) 72.82 699.1 T
(v) 262.63 699.1 T
(erages.) 267.57 699.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(#include <iostream.h>) 72.82 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include <fstream.h>) 72.82 676.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include <iomanip.h>) 72.82 664.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include <stdlib) 72.82 653.28 T
(.h>) 138.4 653.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Global constant NO_STUDENTS and NO_Q) 72.82 630.37 T
(UIZZES are the) 266.43 630.37 T
(// dimensions of the array grade) 72.82 618.92 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(const int NO_STUDENTS = 4,  NO_Q) 72.82 607.46 T
(UIZZES = 3;) 232.59 607.46 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(v) 72.82 584.55 T
(oid) 77.71 584.55 T
3 F
(std_a) 93.26 584.55 T
(v) 116.2 584.55 T
(e) 121.19 584.55 T
0 F
(\050const int grade[ ][NO_Q) 125.71 584.55 T
(UIZZES], double st_a) 228.81 584.55 T
(v) 318.82 584.55 T
(e[ ]\051;) 323.75 584.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//Pre:) 72.82 573.1 T
(Each of the inde) 101.45 573.1 T
(x) 167.75 573.1 T
(ed v) 172.68 573.1 T
(ariable grade[st_num-1, quiz_num-1]) 189.68 573.1 T
(//) 72.82 561.65 T
(contains the score for student st_num on quiz quiz_num.) 101.45 561.65 T
(//Post:) 72.82 550.19 T
(Each st_a) 101.45 550.19 T
(v) 140.55 550.19 T
(e[st_num-1] contains the a) 145.49 550.19 T
(v) 253.59 550.19 T
(erage for student number) 258.52 550.19 T
(//) 72.82 538.74 T
( stu_num.) 101.45 538.74 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(v) 72.82 515.83 T
(oid) 77.71 515.83 T
3 F
(qz_a) 93.26 515.83 T
(v) 113.37 515.83 T
(e) 118.36 515.83 T
0 F
(\050const int grade[ ][NO_Q) 122.88 515.83 T
(UIZZES], double quiz_a) 225.98 515.83 T
(v) 326.73 515.83 T
(e[ ]\051;) 331.67 515.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//Pre:) 72.82 504.37 T
(Each of the inde) 101.45 504.37 T
(x) 167.75 504.37 T
(ed v) 172.68 504.37 T
(ariables grade[st_num-1, quiz_num-1]) 189.68 504.37 T
(//) 72.82 492.92 T
(contains the score for student st_num on quiz quiz_num.) 101.45 492.92 T
(//Post:) 72.82 481.47 T
(Each quiz_a) 101.45 481.47 T
(v) 151.29 481.47 T
(e[quiz_num-1] contains the a) 156.23 481.47 T
(v) 275.07 481.47 T
(erage for quiz) 280.01 481.47 T
(//) 72.82 470.01 T
(numbered quiz_num.) 101.45 470.01 T
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(v) 72.82 447.1 T
(oid) 77.71 447.1 T
3 F
(display) 93.26 447.1 T
0 F
(\050const char names[ ][21],) 124.39 447.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                      const int grade[ ][NO_Q) 72.82 435.65 T
(UIZZES],) 228.52 435.65 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                             const double st_a) 72.82 424.19 T
(v) 217.13 424.19 T
(e[], const double quiz_a) 222.07 424.19 T
(v) 319.7 424.19 T
(e[ ]\051;) 324.64 424.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//Pre:) 72.82 412.74 T
(Each of the inde) 101.45 412.74 T
(x) 167.75 412.74 T
(ed v) 172.68 412.74 T
(ariables grade[st_num-1, quiz_num-1]) 189.68 412.74 T
(//) 72.82 401.29 T
(contains the score for student st_num on quiz quiz_num. Each) 101.45 401.29 T
(//) 72.82 389.83 T
(st_a) 101.45 389.83 T
(v) 117.65 389.83 T
(e[st_num-1] contains the a) 122.59 389.83 T
(v) 230.69 389.83 T
(erage for student stu_num.) 235.63 389.83 T
(//) 72.82 378.38 T
(Each quiz_a) 101.45 378.38 T
(v) 151.29 378.38 T
(e[quiz_num-1] contains the a) 156.23 378.38 T
(v) 275.07 378.38 T
(erage for quiz) 280.01 378.38 T
(//) 72.82 366.92 T
(numbered quiz_num. The array Names contains the names) 101.45 366.92 T
(//) 72.82 355.47 T
(of students. Each name is no more than 20 characters long.) 101.45 355.47 T
(//Post: All the data in grade, st_a) 72.82 344.01 T
(v) 205.82 344.01 T
(e, and quiz_a) 210.76 344.01 T
(v) 264.56 344.01 T
(e ha) 269.5 344.01 T
(v) 285.97 344.01 T
(e been output.) 290.91 344.01 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 4) 781.49 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
0 10.18 Q
1 1 0 0 0 0 1 K
(v) 471.27 743.64 T
(oid  main\050 \051  {) 476.15 743.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    int grade[NO_STUDENTS][NO_Q) 471.27 732.19 T
(UIZZES];) 626.4 732.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    double  st_a) 471.27 720.73 T
(v) 530.45 720.73 T
(e[NO_STUDENTS], quiz_a) 535.39 720.73 T
(v) 650.55 720.73 T
(e[NO_Q) 655.49 720.73 T
(UIZZES];) 690.45 720.73 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    char names[NO_STUDENTS][21], temp;) 471.27 709.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    ifstream ins;) 471.27 697.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    ins.open\050"in_\336le.dat"\051 {) 471.27 674.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(           cout << "Error: Can't open input \336le." << endl;) 471.27 664.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  e) 494.17 653.28 T
(xit\0501\051;) 503.63 653.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   };) 471.27 642.46 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    for  \050 int  i = 1;  i <= NO_STUDENTS;  i++ \051 {) 471.27 619.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(           ins.getline \050 names[i-1], 21 \051;) 471.27 608.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(           for \050 int  j = 1;  j <= NO_Q) 471.27 596.65 T
(UIZZES;  j++ \051) 608.59 596.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(                  ins   >>  grade [ i-1 ] [ j-1 ] ;) 471.27 585.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(           ins.get \050temp\051;) 471.27 573.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    }) 471.27 562.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(std_a) 481.45 539.37 T
(v) 502.74 539.37 T
(e\050grade, st_a) 507.67 539.37 T
(v) 559.49 539.37 T
(e\051;) 564.43 539.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(qz_a) 481.45 527.92 T
(v) 500.47 527.92 T
(e\050grade, quiz_a) 505.4 527.92 T
(v) 567.96 527.92 T
(e\051;) 572.9 527.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(display\050names, grade, st_a) 481.45 516.47 T
(v) 589.26 516.47 T
(e, quiz_a) 594.2 516.47 T
(v) 630.75 516.47 T
(e\051;) 635.69 516.47 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(    ins.close\050 \051;) 471.27 493.56 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(}) 471.27 482.1 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(v) 471.27 459.19 T
(oid) 476.15 459.19 T
3 F
(std_a) 491.71 459.19 T
(v) 514.65 459.19 T
(e) 519.64 459.19 T
0 F
(\050const int grade[ ][NO_Q) 524.16 459.19 T
(UIZZES], double st_a) 627.26 459.19 T
(v) 717.26 459.19 T
(e[ ]\051  {) 722.2 459.19 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(    double sum;) 471.27 447.74 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(    for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051 {) 471.27 436.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(        sum = 0;) 471.27 424.83 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(        for \050int quiz_num = 1; quiz_num <= NO_Q) 471.27 413.38 T
(UIZZES; quiz_num++\051) 669.1 413.38 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(            sum = sum + grade[st_num-1][quiz_num-1];) 471.27 401.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(         st_a) 471.27 379.01 T
(v) 510.37 379.01 T
(e[st_num-1] = sum/NO_Q) 515.31 379.01 T
(UIZZES;) 622.76 379.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(    }) 471.27 367.56 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(}) 471.27 356.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 5) 383.04 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 0 1 0 0 1 0 K
0 10.18 Q
1 0 1 0 0 1 0 K
(v) 72.82 743.64 T
(oid) 77.71 743.64 T
3 F
(qz_a) 93.26 743.64 T
(v) 113.37 743.64 T
(e) 118.36 743.64 T
0 F
(\050const int grade[ ][NO_Q) 122.88 743.64 T
(UIZZES],double quiz_a) 225.98 743.64 T
(v) 324.18 743.64 T
(e[ ]\051 {) 329.12 743.64 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    double sum;) 72.82 732.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    for \050int quiz_num = 1; quiz_num <= NO_Q) 72.82 720.73 T
(UIZZES; quiz_num++\051  {) 260.48 720.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(        sum = 0;) 72.82 709.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(        for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051) 72.82 697.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(            sum = sum + grade[st_num-1][quiz_num-1];) 72.82 686.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(        quiz_a) 72.82 663.46 T
(v) 120.12 663.46 T
(e[quiz_num-1] = sum/NO_STUDENTS;     }) 125.06 663.46 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(}) 72.82 652.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(v) 72.82 629.1 T
(oid) 77.71 629.1 T
3 F
(display) 93.26 629.1 T
0 F
(\050const char names[ ][21],) 124.39 629.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                      const int grade[ ][NO_Q) 72.82 617.65 T
(UIZZES],) 228.52 617.65 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                      const double st_a) 72.82 606.19 T
(v) 199.31 606.19 T
(e[ ], const double quiz_a) 204.25 606.19 T
(v) 304.43 606.19 T
(e[]\051   {) 309.37 606.19 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout.setf\050ios::\336x) 72.82 594.74 T
(ed\051;) 149.31 594.74 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout.setf\050ios::sho) 72.82 583.28 T
(wpoint\051;) 152.6 583.28 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout.precision\0501\051;) 72.82 571.83 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout << setw\05020\051 << "Student             ") 72.82 548.92 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(         << setw\0505\051 << "A) 72.82 537.46 T
(v) 167.62 537.46 T
(e") 172.56 537.46 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(         << setw\05015\051 << "Quizzes\134n";) 72.82 526.01 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    for \050int st_num = 1; st_num <= NO_STUDENTS; st_num++\051  {) 72.82 514.56 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(        cout << setw\05020\051 << names[st_num-1]) 72.82 503.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                  << setw\0505\051 << st_a) 72.82 491.65 T
(v) 195.98 491.65 T
(e[st_num-1] << " ";) 200.91 491.65 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(        for \050int quiz_num = 1; quiz_num <= NO_Q) 72.82 468.74 T
(UIZZES; quiz_num++\051) 270.66 468.74 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                 cout << setw\0505\051 << grade[st_num-1][quiz_num-1];) 72.82 457.28 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(        cout << endl;) 72.82 445.83 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    }) 72.82 434.38 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout << "Quiz a) 72.82 411.47 T
(v) 147.92 411.47 T
(erages =                ";) 152.85 411.47 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    for \050int quiz_num = 1; quiz_num <= NO_Q) 72.82 400.01 T
(UIZZES; quiz_num++\051) 260.48 400.01 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(                cout << setw\0505\051 << quiz_a) 72.82 388.56 T
(v) 221.7 388.56 T
(e[quiz_num-1];) 226.64 388.56 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(    cout << endl;) 72.82 377.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(}) 72.82 365.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 6) 781.49 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
3 10.18 Q
(Sample input:) 471.27 743.64 T
1 0 1 0 0 1 0 K
0 F
1 0 1 0 0 1 0 K
(Chan T) 471.27 720.73 T
(ai Man) 500.71 720.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(10) 574.35 720.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(10) 591.54 720.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(10) 608.72 720.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Chan W) 471.27 709.28 T
(ai Chung) 504.1 709.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(2) 574.35 709.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(0) 591.54 709.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(1) 608.72 709.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Cheung Kw) 471.27 697.83 T
(ok Lun) 520.09 697.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(8) 574.35 697.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(6) 591.54 697.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(9) 608.72 697.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(W) 471.27 686.37 T
(ong W) 480.06 686.37 T
(ing Hong) 507.08 686.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(8) 574.35 686.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(4) 591.54 686.37 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(10) 608.72 686.37 T
0 0 0 1 0 0 0 K
3 F
0 0 0 1 0 0 0 K
(Sample output:) 471.27 629.1 T
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Student) 471.27 606.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(                         A) 511.36 606.19 T
(v) 581.59 606.19 T
(e) 586.53 606.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(             Quizzes) 591.05 606.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Chan T) 471.27 594.74 T
(ai Man) 500.71 594.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(10.0) 574.35 594.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(10) 608.72 594.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(10) 631.63 594.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(10) 654.53 594.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Chan W) 471.27 583.28 T
(ai Chung) 504.1 583.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  1.0) 574.35 583.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   2) 608.72 583.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   0) 631.63 583.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  1) 654.53 583.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Cheung Kw) 471.27 571.83 T
(ok Lun) 520.09 571.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  7.7) 574.35 571.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   8) 608.72 571.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   6) 631.63 571.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  9) 654.53 571.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(W) 471.27 560.37 T
(ong W) 480.06 560.37 T
(ing Hong) 507.08 560.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  7.3) 574.35 560.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   8) 608.72 560.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   4) 631.63 560.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(10) 654.53 560.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Quiz A) 471.27 548.92 T
(v) 500.2 548.92 T
(erage =) 505.14 548.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(7.0) 608.72 548.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(5.0) 631.63 548.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(7.5) 654.53 548.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 7) 383.04 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
1 11.45 Q
1 1 0 0 0 0 1 K
(String Copy) 183.93 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 10.18 Q
(\245) 72.82 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strcpy\050dest, src\051) 89.36 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 F
(o) 90 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(copies string) 107.18 687.64 T
5 F
(src) 192.71 687.64 T
2 F
( into string) 211.03 687.64 T
5 F
(dest) 290.45 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 F
(o) 90 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(example:) 107.18 669.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(char name1[16], name2[16];) 95.73 650.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy\050name1,"Chan Tai Man"\051;) 95.73 627.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy\050name2,"999999999999999"\051;) 95.73 571.83 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy\050name2,name1\051;) 95.73 515.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 F
1 1 0 0 0 0 1 K
(\245) 72.82 438.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strncpy\050dest, src, n\051) 89.36 438.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 F
(o) 90 419.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(copies first) 107.18 419.74 T
5 F
(n) 186.6 419.74 T
2 F
(characters of) 198.82 419.74 T
5 F
(src) 284.34 419.74 T
2 F
( into) 302.67 419.74 T
5 F
(dest) 339.32 419.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
2 F
1 0 1 0 0 1 0 K
(char name1[16];) 95.73 401.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strncpy\050name1,"Chan Tai Man",16\051;) 95.73 378.38 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
75.68 591.34 367.77 624.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 601.52 362.04 618.71 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 600.25 104.32 617.43 R
0 0 0 1 0 0 0 K
N
104.32 600.25 121.5 617.43 R
N
121.5 600.25 138.68 617.43 R
N
138.68 600.25 155.86 617.43 R
N
155.86 600.25 173.04 617.43 R
N
173.04 600.25 190.23 617.43 R
N
190.23 600.25 207.41 617.43 R
N
207.41 600.25 224.59 617.43 R
N
224.59 600.25 241.77 617.43 R
N
241.77 600.25 258.95 617.43 R
N
258.95 600.25 276.13 617.43 R
N
276.13 600.25 293.31 617.43 R
N
2 10.18 Q
(C  h  a  n    T  a  i    M  a  n \1340  ? ?  ?) 92.86 605.98 T
293.31 600.25 310.5 617.43 R
N
310.49 600.25 327.68 617.43 R
N
327.68 600.25 344.86 617.43 R
N
344.86 600.25 362.04 617.43 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
75.68 535.34 367.77 568.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 545.52 362.04 562.71 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 544.25 104.32 561.43 R
0 0 0 1 0 0 0 K
N
104.32 544.25 121.5 561.43 R
N
121.5 544.25 138.68 561.43 R
N
138.68 544.25 155.86 561.43 R
N
155.86 544.25 173.04 561.43 R
N
173.04 544.25 190.23 561.43 R
N
190.23 544.25 207.41 561.43 R
N
207.41 544.25 224.59 561.43 R
N
224.59 544.25 241.77 561.43 R
N
241.77 544.25 258.95 561.43 R
N
258.95 544.25 276.13 561.43 R
N
276.13 544.25 293.31 561.43 R
N
2 10.18 Q
(9  9  9  9 9  9  9  9  9 9  9  9  9  9  9 \1340) 92.86 549.98 T
293.31 544.25 310.5 561.43 R
N
310.49 544.25 327.68 561.43 R
N
327.68 544.25 344.86 561.43 R
N
344.86 544.25 362.04 561.43 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
75.68 479.34 367.77 512.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 489.53 362.04 506.71 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 488.25 104.32 505.43 R
0 0 0 1 0 0 0 K
N
104.32 488.25 121.5 505.43 R
N
121.5 488.25 138.68 505.43 R
N
138.68 488.25 155.86 505.43 R
N
155.86 488.25 173.04 505.43 R
N
173.04 488.25 190.23 505.43 R
N
190.23 488.25 207.41 505.43 R
N
207.41 488.25 224.59 505.43 R
N
224.59 488.25 241.77 505.43 R
N
241.77 488.25 258.95 505.43 R
N
258.95 488.25 276.13 505.43 R
N
276.13 488.25 293.31 505.43 R
N
2 10.18 Q
(C  h  a  n    T  a  i    M  a  n \1340  9 9  \1340) 92.86 493.98 T
293.31 488.25 310.5 505.43 R
N
310.49 488.25 327.68 505.43 R
N
327.68 488.25 344.86 505.43 R
N
344.86 488.25 362.04 505.43 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
75.68 341.89 367.77 374.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
87.14 352.07 362.04 369.26 R
0 X
0 0 1 0 1 1 0 K
V
0.32 H
2 Z
N
0 0 0 1 0 0 0 K
87.14 350.8 104.32 367.98 R
0 0 0 1 0 0 0 K
N
104.32 350.8 121.5 367.98 R
N
121.5 350.8 138.68 367.98 R
N
138.68 350.8 155.86 367.98 R
N
155.86 350.8 173.04 367.98 R
N
173.04 350.8 190.23 367.98 R
N
190.23 350.8 207.41 367.98 R
N
207.41 350.8 224.59 367.98 R
N
224.59 350.8 241.77 367.98 R
N
241.77 350.8 258.95 367.98 R
N
258.95 350.8 276.13 367.98 R
N
276.13 350.8 293.31 367.98 R
N
2 10.18 Q
(C  h  a  n    T  a  i    M  a  n \1340 \1340 \1340 \1340) 92.86 356.53 T
293.31 350.8 310.5 367.98 R
N
310.49 350.8 327.68 367.98 R
N
327.68 350.8 344.86 367.98 R
N
344.86 350.8 362.04 367.98 R
N
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 8) 781.49 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
2 8.91 Q
(//Copy the value of a string to a string variable) 471.27 744.49 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(#include <iostream.h>) 471.27 734.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include <string.h>) 471.27 724.13 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 F
1 0 1 0 0 1 0 K
(void string_copy\050char target[], const char source[],) 471.27 703.76 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
( int target_size\051;) 562.9 693.58 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(//) 471.27 683.4 T
1 F
(Pre:) 481.96 683.4 T
2 F
(target_size is the declared size of target.) 517.08 683.4 T
(//) 471.27 673.22 T
(source contains a string ends with '\1340'.) 517.08 673.22 T
(//) 471.27 663.04 T
1 F
(Post:) 481.96 663.04 T
2 F
( The value of target has been set to the string) 508.68 663.04 T
(//) 471.27 652.86 T
(value in source, provided the declared size of) 517.08 652.86 T
(//) 471.27 642.68 T
(target is large enough. If target is not large) 517.08 642.68 T
(//) 471.27 632.49 T
(enough to hold the entire string, a string) 517.08 632.49 T
(//) 471.27 622.31 T
(equal to the lenght of source will be stored.) 517.08 622.31 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(void main\050 \051) 471.27 601.95 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
({) 471.27 591.77 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(    char short_string[11];) 471.27 581.59 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(char long_string[] = "This is rather long.";) 494.17 571.4 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(string_copy\050short_string, "Hello", 11\051;) 492.65 551.04 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(    cout << short_string << "STRING ENDS HERE.\134n";) 471.27 540.86 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(string_copy\050short_string, long_string, 11\051;) 492.65 520.49 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(    cout << short_string << "STRING ENDS HERE.\134n";) 471.27 510.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(}) 471.27 500.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//Uses string.h:) 471.27 479.77 T
1 0 1 0 0 1 0 K
1 F
1 0 1 0 0 1 0 K
(void string_copy\050char target[], const char source[],) 471.27 469.59 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
( int target_size\051) 562.9 459.41 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
2 F
({) 471.27 449.22 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    int new_length = strlen\050source\051;) 471.27 439.04 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    if \050new_length > \050target_size - 1\051\051) 471.27 418.68 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(        new_length = target_size - 1;) 471.27 408.5 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    for \050int index = 0; index < new_length; index++\051) 471.27 388.13 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(        target[index] = source[index];) 471.27 377.95 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    target[index] = '\1340';) 471.27 367.77 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(}) 471.27 357.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 9) 383.04 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 1 0 1 1 0 K
90 481.25 353.45 607.25 R
0 0 1 0 1 1 0 K
V
2 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
3 11.45 Q
1 1 0 0 0 0 1 K
(String Comparison) 174.79 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 10.18 Q
(\245) 72.82 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strcmp\050s1, s2\051) 89.36 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(o) 90 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(compares strings) 107.18 687.64 T
7 F
(s1) 178.44 687.64 T
0 F
( and) 187.49 687.64 T
7 F
(s2) 207.29 687.64 T
0 F
(, returns) 216.34 687.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(-) 107.18 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(< 0) 124.36 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(if) 153 669.19 T
7 F
(s1 <  s2) 164.31 669.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(-) 107.18 650.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(= 0) 124.36 650.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(if) 153 650.74 T
7 F
(s1) 164.31 650.74 T
0 F
( ==) 173.36 650.74 T
7 F
(s2       \050i.e) 189.94 650.74 T
(.) 229.94 650.74 T
6 F
(strcmp) 235.03 650.74 T
0 F
(returns) 265.86 650.74 T
3 F
(false) 296.68 650.74 T
7 F
(\051) 316.47 650.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(-) 107.18 632.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(> 0) 124.36 632.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(if) 153 632.28 T
7 F
( s1 >  s2) 161.76 632.28 T
0 0 0 1 0 0 0 K
0 8.91 Q
0 0 0 1 0 0 0 K
(o) 90 614.68 T
1 1 0 0 0 0 1 K
0 10.18 Q
1 1 0 0 0 0 1 K
(le) 107.18 614.68 T
(xicographical comparison) 114.38 614.68 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(\245) 72.82 454.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strncmp\050s1, s2, n\051) 89.36 454.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(o) 90 436.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(mak) 107.18 436.28 T
(e at most) 124.61 436.28 T
7 F
(n) 163.92 436.28 T
0 F
( comparisons) 169.01 436.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strncmp\050"abcdefg", "abc123", 3\051   ----->   0) 107.18 417.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(\245) 72.82 384.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strlen\050s\051) 89.36 384.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(o) 90 366.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(return length of string \050not including \325\1340\325\051) 107.18 366.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strlen\050"abcde"\051  ----->  returns 5) 107.18 347.83 T
0 0 0 1 0 0 0 K
6 8.91 Q
0 0 0 1 0 0 0 K
(str1) 114 587.95 T
(str2) 168.98 587.95 T
(return) 214.67 593.04 T
(value) 216.41 582.86 T
(reason) 287.24 587.95 T
0 F
("AAAA") 104.43 566.31 T
("ABCD") 159.9 566.31 T
(< 0) 220.45 566.31 T
(\325A) 283.25 566.31 T
(\325 < \325B\325) 291.66 566.31 T
("B123") 107.64 551.04 T
("A089") 162.37 551.04 T
(> 0) 220.45 551.04 T
(\325B\325 > \325A) 283.25 551.04 T
(\325) 313.01 551.04 T
("127") 110.61 535.77 T
("409") 165.59 535.77 T
(< 0) 220.45 535.77 T
(\3251\325 < \3254\325) 284.49 535.77 T
("abc12") 106.65 520.49 T
("abc12") 161.63 520.49 T
(= 0) 220.45 520.49 T
(equal strings) 276.97 520.49 T
("abc") 111.11 505.22 T
("abcde") 161.88 505.22 T
(< 0) 220.45 505.22 T
(str1 a substring of st2) 261.26 505.22 T
("3") 115.06 489.95 T
("12345") 161.14 489.95 T
(> 0) 220.45 489.95 T
(\3253\325 > \3251\325) 284.49 489.95 T
148.42 604.71 148.42 484.28 2 L
V
0 Z
N
203.4 604.71 203.4 484.28 2 L
V
N
249.21 604.71 249.21 484.28 2 L
V
N
93.43 604.07 350.01 604.07 2 L
V
1.27 H
N
93.43 576.07 350.01 576.07 2 L
V
N
93.43 560.8 350.01 560.8 2 L
V
0.32 H
N
93.43 545.53 350.01 545.53 2 L
V
N
93.43 530.25 350.01 530.25 2 L
V
N
93.43 514.98 350.01 514.98 2 L
V
N
93.43 499.71 350.01 499.71 2 L
V
N
93.43 484.44 350.01 484.44 2 L
V
N
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 10) 778.31 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
1 11.45 Q
1 1 0 0 0 0 1 K
(Some Common Errors) 558.32 742.79 T
0 0 0 1 0 0 0 K
2 10.18 Q
0 0 0 1 0 0 0 K
(\245) 471.27 706.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.03 (Illegal to assign a value to a atring variable) 487.81 706.1 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\050except at declaration\051.) 488.45 694.64 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Ex.) 488.45 671.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(char a_string[10];) 511.36 671.74 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(a_string = "Hello";) 511.36 660.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// illegal assignment) 633.53 660.28 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Use) 488.45 637.37 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(strcpy \050 a_string,  "Hello" \051) 518.99 637.37 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(  instead.) 696.15 637.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 604.28 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.8 (The operator ==  doesn\325t test two strings for) 487.81 604.28 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(equality.) 488.45 592.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.04 (Use) 488.45 569.92 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
-0.04 (strcmp \050 string1, string2 \051) 518.91 569.92 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
-0.04 ( instead  \050but) 683.68 569.92 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4.31 (note that strcmp returns false if the two) 488.45 558.46 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(strings are the same\051.) 488.45 547.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 471.27 513.92 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
2.32 (strcpy will let you assign a string that is) 487.81 513.92 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.72 (too long for the string variable to store the) 488.45 502.47 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(value.) 488.45 491.01 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(Ex.) 488.45 468.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(char  short_string[3];) 511.36 468.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(strcpy\050 short_string,) 511.36 456.65 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(            "This string is too long." \051;) 488.45 445.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(The memory locations follows the memory) 511.36 422.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(allocated for short_string will be filled.) 511.36 410.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 11) 379.86 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
8 14 Q
1 1 0 0 0 0 1 K
(Insertion Sort Algorithm) 142.39 741.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 12.73 Q
(The array is di) 72.82 682.13 T
(vided into tw) 146.37 682.13 T
(o parts. The left part of it is) 213.41 682.13 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(sorted while the right part is not.) 72.82 668.77 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Initially) 72.82 642.04 T
(, the left part consists of one element.) 112.3 642.04 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.17 (F) 72.82 615.31 P
-0.17 (or each \324\336rst\325 component of the unsorted part of the array) 79.7 615.31 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 11.45 Q
(1.) 72.82 589.43 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(temporarily remove it;) 86.56 589.43 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(2.) 72.82 558.25 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(find its proper place in the sorted part) 86.56 558.25 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(of the array;) 81.56 545.53 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(3.) 72.82 514.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.65 (slide smaller values one component to the) 86.56 514.34 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(right;) 81.56 501.62 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(4.) 72.82 470.44 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.65 (insert the \324first\325 component into its new) 86.56 470.44 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(position;) 81.56 457.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 454.08 315.58 T
(Lecture 21) 606.48 315.58 T
-0.8 ( 12) 778.31 315.58 P
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
668.32 738.86 572.03 738.86 2 L
1 1 0 0 0 0 1 K
V
0.49 H
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 15.27 Q
(Insertion Sort) 572.03 740.25 T
0 0 0 1 0 0 0 K
2 10.18 Q
0 0 0 1 0 0 0 K
(// Sort an array of integers in descending order) 471.27 690.19 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
-0.38 (void insertsort\050int data[],) 471.27 678.74 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (//input/output: array) 641.17 678.74 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(                int size\051) 471.27 667.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(  //input: array size) 623.99 667.28 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
({) 471.27 644.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   int current_item,) 471.27 632.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// item under consideration) 599.55 632.92 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(       insert_point;) 471.27 621.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// insertion point) 599.55 621.46 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
-0.19 (   for \050int current=1; current<size; current++\051 {) 471.27 598.55 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(      current_item = data[current];) 471.27 575.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// find insertion point) 507.92 564.19 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(      insert_point = current;) 471.27 552.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(while \050\050insert_point != 0\051 &&) 507.92 541.28 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
-0.59 (             \050data[insert_point-1]>current_item\051\051{) 471.27 529.83 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// shift item right to make room) 526.25 518.37 T
1 1 0 0 0 0 1 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
-0.17 (data[insert_point]=data[insert_point-1];) 524.72 506.92 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(         insert_point--;) 471.27 495.47 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(      }) 471.27 484.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// insert item) 507.92 461.1 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(      data[insert_point] = current_item;) 471.27 449.65 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(   }) 471.27 438.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(}) 471.27 426.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( // insertsort) 477.37 426.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Page: "mini" 7
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 6.36 Q
0 X
0 0 0 1 0 0 0 K
(COMP102) 55.64 315.58 T
(Lecture 21) 208.03 315.58 T
-0.8 ( 13) 379.86 315.58 P
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
269.87 738.86 173.58 738.86 2 L
1 1 0 0 0 0 1 K
V
0.49 H
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
8 15.27 Q
(Insertion Sort) 173.58 740.25 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
72.82 435.44 370.63 695.7 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
69.6 435.44 373.85 695.7 R
7 X
0 0 0 1 0 0 0 K
V
0 1 1 0 1 0 0 K
101.81 558.25 124.72 578.75 R
3 X
0 1 1 0 1 0 0 K
V
1.27 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 11.45 Q
0 0 0 1 0 0 0 K
(84) 107.54 563.1 T
0 1 1 0 1 0 0 K
78.9 669.48 101.81 689.98 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 84.63 674.32 T
101.81 669.48 124.72 689.98 R
7 X
V
0 X
N
(35) 107.54 674.32 T
124.72 669.48 147.63 689.98 R
7 X
V
0 X
N
(22) 130.45 674.32 T
147.63 669.48 170.54 689.98 R
7 X
V
0 X
N
(97) 153.36 674.32 T
170.54 669.48 193.45 689.98 R
7 X
V
0 X
N
(84) 176.27 674.32 T
193.45 669.48 216.36 689.98 R
7 X
V
0 X
N
(55) 199.17 674.32 T
216.36 669.48 239.26 689.98 R
7 X
V
0 X
N
(61) 222.08 674.32 T
239.26 669.48 262.17 689.98 R
7 X
V
0 X
N
(10) 244.99 674.32 T
262.17 669.48 285.08 689.98 R
7 X
V
0 X
N
(47) 267.9 674.32 T
0 1 1 0 1 0 0 K
78.9 643.86 101.81 664.36 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 84.63 648.7 T
0 1 1 0 1 0 0 K
101.81 643.86 124.72 664.36 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 107.54 648.7 T
124.72 643.86 147.63 664.36 R
7 X
V
0 X
N
(22) 130.45 648.7 T
147.63 643.86 170.54 664.36 R
7 X
V
0 X
N
(97) 153.36 648.7 T
170.54 643.86 193.45 664.36 R
7 X
V
0 X
N
(84) 176.27 648.7 T
193.45 643.86 216.36 664.36 R
7 X
V
0 X
N
(55) 199.17 648.7 T
216.36 643.86 239.26 664.36 R
7 X
V
0 X
N
(61) 222.08 648.7 T
239.26 643.86 262.17 664.36 R
7 X
V
0 X
N
(10) 244.99 648.7 T
262.17 643.86 285.08 664.36 R
7 X
V
0 X
N
(47) 267.9 648.7 T
0 1 1 0 1 0 0 K
78.9 615.52 101.81 636.02 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 84.63 620.37 T
0 1 1 0 1 0 0 K
101.81 615.52 124.72 636.02 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 107.54 620.37 T
0 1 1 0 1 0 0 K
124.72 615.52 147.63 636.02 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 130.45 620.37 T
147.63 615.52 170.54 636.02 R
7 X
V
0 X
N
(97) 153.36 620.37 T
170.54 615.52 193.45 636.02 R
7 X
V
0 X
N
(84) 176.27 620.37 T
193.45 615.52 216.36 636.02 R
7 X
V
0 X
N
(55) 199.17 620.37 T
216.36 615.52 239.26 636.02 R
7 X
V
0 X
N
(61) 222.08 620.37 T
239.26 615.52 262.17 636.02 R
7 X
V
0 X
N
(10) 244.99 620.37 T
262.17 615.52 285.08 636.02 R
7 X
V
0 X
N
(47) 267.9 620.37 T
0 1 1 0 1 0 0 K
101.81 587.01 124.72 607.51 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 107.54 591.85 T
0 1 1 0 1 0 0 K
124.72 587.01 147.63 607.51 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 130.45 591.85 T
0 1 1 0 1 0 0 K
147.63 587.01 170.54 607.51 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 153.36 591.85 T
170.54 586.89 193.45 607.39 R
7 X
V
0 X
N
(84) 176.27 591.73 T
193.45 586.89 216.36 607.39 R
7 X
V
0 X
N
(55) 199.17 591.73 T
216.36 586.89 239.26 607.39 R
7 X
V
0 X
N
(61) 222.08 591.73 T
239.26 586.89 262.17 607.39 R
7 X
V
0 X
N
(10) 244.99 591.73 T
262.17 586.89 285.08 607.39 R
7 X
V
0 X
N
(47) 267.9 591.73 T
0 1 1 0 1 0 0 K
78.9 587.01 101.81 607.51 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 591.85 T
0 1 1 0 1 0 0 K
124.72 558.37 147.63 578.87 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 130.45 564.17 T
0 1 1 0 1 0 0 K
147.63 558.25 170.54 578.75 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 153.36 563.1 T
0 1 1 0 1 0 0 K
170.54 558.25 193.45 578.75 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 176.27 563.1 T
193.45 558.25 216.36 578.75 R
7 X
V
0 X
N
(55) 199.17 563.1 T
216.36 558.25 239.26 578.75 R
7 X
V
0 X
N
(61) 222.08 563.1 T
239.26 558.25 262.17 578.75 R
7 X
V
0 X
N
(10) 244.99 563.1 T
262.17 558.25 285.08 578.75 R
7 X
V
0 X
N
(47) 267.9 563.1 T
0 1 1 0 1 0 0 K
78.9 558.37 101.81 578.87 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 563.22 T
0 1 1 0 1 0 0 K
101.81 529.62 124.72 550.11 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 107.54 534.46 T
0 1 1 0 1 0 0 K
124.72 529.74 147.63 550.23 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
147.63 529.62 170.54 550.11 R
3 X
V
0 X
N
170.54 529.62 193.45 550.11 R
3 X
V
0 X
N
193.45 529.62 216.36 550.11 R
3 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 130.45 536.45 T
216.36 529.62 239.26 550.11 R
7 X
V
0 X
N
(61) 222.08 534.46 T
239.26 529.62 262.17 550.11 R
7 X
V
0 X
N
(10) 244.99 534.46 T
262.17 529.62 285.08 550.11 R
7 X
V
0 X
N
(47) 267.9 534.46 T
0 1 1 0 1 0 0 K
78.9 529.74 101.81 550.23 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 534.58 T
(35) 153.36 536.93 T
(22) 176.26 535.64 T
(18) 199.17 536.54 T
0 1 1 0 1 0 0 K
101.81 500.98 124.72 521.48 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 107.54 505.82 T
0 1 1 0 1 0 0 K
147.63 501.1 170.54 521.6 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
170.54 500.98 193.45 521.48 R
3 X
V
0 X
N
193.45 500.98 216.36 521.48 R
3 X
V
0 X
N
216.36 500.98 239.26 521.48 R
3 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 153.36 507.82 T
0 1 1 0 1 0 0 K
124.72 501.1 147.63 521.6 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 130.45 505.95 T
239.26 500.98 262.17 521.48 R
7 X
V
0 X
N
(10) 244.99 505.82 T
262.17 500.98 285.08 521.48 R
7 X
V
0 X
N
(47) 267.9 505.82 T
0 1 1 0 1 0 0 K
81.05 501.1 101.81 521.6 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 505.95 T
(35) 176.27 508.29 T
(22) 199.17 507 T
(18) 222.08 507.9 T
0 1 1 0 1 0 0 K
101.81 443.71 124.72 464.21 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 107.54 448.55 T
0 1 1 0 1 0 0 K
147.63 443.83 170.54 464.33 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
170.54 443.71 193.45 464.21 R
3 X
V
0 X
N
193.45 443.71 216.36 464.21 R
3 X
V
0 X
N
216.36 443.71 239.26 464.21 R
3 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 153.36 450.55 T
0 1 1 0 1 0 0 K
124.72 443.83 147.63 464.33 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 130.45 448.67 T
0 1 1 0 1 0 0 K
239.26 443.71 262.17 464.21 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 244.99 448.55 T
0 1 1 0 1 0 0 K
262.17 443.71 285.08 464.21 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 267.9 448.55 T
0 1 1 0 1 0 0 K
78.9 443.83 101.81 464.33 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 448.67 T
(47) 176.27 451.02 T
(35) 199.17 449.73 T
(22) 222.08 450.63 T
0 1 1 0 1 0 0 K
101.81 472.34 124.72 492.84 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 107.54 477.19 T
0 1 1 0 1 0 0 K
147.63 472.47 170.54 492.96 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
170.54 472.34 193.45 492.84 R
3 X
V
0 X
N
193.45 472.34 216.36 492.84 R
3 X
V
0 X
N
216.36 472.34 239.26 492.84 R
3 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 153.36 479.18 T
0 1 1 0 1 0 0 K
124.72 472.47 147.63 492.96 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 130.45 477.31 T
0 1 1 0 1 0 0 K
239.26 472.34 262.17 492.84 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 244.99 477.19 T
262.17 472.34 285.08 492.84 R
7 X
V
0 X
N
(47) 267.9 477.19 T
0 1 1 0 1 0 0 K
78.9 472.47 101.81 492.96 R
3 X
0 1 1 0 1 0 0 K
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 84.63 477.31 T
(35) 176.27 479.66 T
(22) 199.17 478.37 T
(18) 222.08 479.27 T
1 1 0 0 0 0 1 K
9 F
1 1 0 0 0 0 1 K
(unsorted array) 293.58 673.68 T
(sorted array) 291.76 453.82 T
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 7
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 7
%%DocumentFonts: Times-Roman
%%+ Courier-Bold
%%+ Courier
%%+ Times-Bold
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ Times-BoldItalic
%%+ Times-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%EOF
