%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 13 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /NewCenturySchlbk-Roman FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
7 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 1) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
(Softwar) 173.48 742.79 T
(e Life Cycle) 212.08 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 10.18 Q
(\245) 72.82 706.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(T) 89.36 706.1 T
(ypical de) 94.77 706.1 T
(v) 131.55 706.1 T
(elopment steps of lar) 136.49 706.1 T
(ge and comple) 221.43 706.1 T
(x softw) 280.65 706.1 T
(are:) 310.81 706.1 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 F
1 0 1 0 0 1 0 K
(1.) 86.56 680.01 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Requir) 101.45 680.01 T
(ement speci\336cations) 131.82 680.01 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 F
(o) 90 661.55 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Prepare a complete and unambiguous problem statement or soft-) 107.18 661.55 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(w) 107.18 650.1 T
(are speci\336cation) 114.43 650.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
1 F
0 1 0 0 1 0 1 K
(2.) 86.56 624.01 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Pr) 101.45 624.01 T
(oblem analysis) 112.01 624.01 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 F
(o) 90 605.55 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Understand the problem: input/output requirements, perfor-) 107.18 605.55 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(mance requirements and constraints.) 107.18 594.1 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(o) 90 575.65 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Ev) 107.18 575.65 T
(aluate alternati) 118.24 575.65 T
(v) 178.21 575.65 T
(e solutions) 183.15 575.65 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(o) 90 557.19 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Choose a preferred solution) 107.18 557.19 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 F
1 0 0 0 0 1 1 K
(3.) 86.56 531.1 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Pr) 101.45 531.1 T
(ogram design) 112.01 531.1 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 F
(o) 90 512.65 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(High le) 107.18 512.65 T
(v) 137.19 512.65 T
(el design) 142.12 512.65 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(- Perform a top-do) 107.18 489.74 T
(wn design of the system) 182.42 489.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(- Specify the o) 107.18 478.28 T
(v) 166.69 478.28 T
(erall softw) 171.63 478.28 T
(are structure) 214.79 478.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(- F) 107.18 466.83 T
(or each module, specify its interf) 118.62 466.83 T
(ace with other modules) 252.55 466.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(o) 90 448.38 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Lo) 107.18 448.38 T
(w le) 118.24 448.38 T
(v) 135.23 448.38 T
(el design) 140.17 448.38 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(- Algorithm design for each lo) 107.18 425.47 T
(w-le) 230.5 425.47 T
(v) 248.34 425.47 T
(el module, using pseudo-) 253.28 425.47 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(code) 107.18 414.01 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
1 F
0 1 1 0 1 0 0 K
(4.) 86.56 387.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Pr) 101.45 387.92 T
(ogram implementation) 112.01 387.92 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(o) 90 369.47 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Code the solution according to the design.) 107.18 369.47 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 2) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 10.18 Q
1 0 1 0 0 1 0 K
(5.) 485.01 743.64 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(T) 499.9 743.64 T
(esting and v) 505.76 743.64 T
(alidation) 557.7 743.64 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 F
(o) 488.45 725.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(T) 505.63 725.19 T
(est indi) 511.14 725.19 T
(vidual module) 540.58 725.19 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(o) 488.45 706.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Inte) 505.63 706.73 T
(gration testing, v) 521.31 706.73 T
(alidate correstness according to speci\336ca-) 589.78 706.73 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(tion) 505.63 695.28 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
1 F
0 1 0 0 1 0 1 K
(6.) 485.01 669.19 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Operation) 499.9 669.19 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 F
(o) 488.45 650.74 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Run the completed system) 505.63 650.74 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(o) 488.45 632.28 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(Ev) 505.63 632.28 T
(aluate performance) 516.69 632.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 F
1 0 0 0 0 1 1 K
(7.) 485.01 606.19 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(P) 499.9 606.19 T
(ossible enhancements and maintenance) 505.92 606.19 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 F
(o) 488.45 587.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Remo) 505.63 587.74 T
(v) 529.8 587.74 T
(e the reported b) 534.74 587.74 T
(ugs) 598.15 587.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(o) 488.45 569.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Update softw) 505.63 569.28 T
(are speci\336cation) 560.1 569.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(o) 488.45 550.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Mak) 505.63 550.83 T
(e required changes to k) 524.19 550.83 T
(eep the system up-to-date) 618.52 550.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(o) 488.45 532.37 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Fully test and v) 505.63 532.37 T
(alidate the system after an) 568.45 532.37 T
(y ne) 674.61 532.37 T
(w changes) 691.61 532.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(This is roughly the \337o) 471.27 502.47 T
(w of de) 560.96 502.47 T
(v) 591.24 502.47 T
(elopment. In practice, there are usually) 596.17 502.47 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(man) 471.27 491.01 T
(y iterations and re) 488.65 491.01 T
(visions.) 561.63 491.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 3) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
(What is an Object?) 174.48 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 9.55 Q
(\245) 72.82 707.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.16 (Examples of) 89.36 707.8 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
-0.16 (real-w) 139.41 707.8 P
-0.16 (orld) 163.69 707.8 P
1 F
-0.16 (objects) 181.29 707.8 P
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
-0.16 (: person, table, computer) 209.92 707.8 P
-0.16 (, city) 303.69 707.8 P
-0.16 (, MTR tick) 322 707.8 P
-0.16 (et) 363.74 707.8 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(machine, airline \337ight schedule, bank account, ...) 90 696.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 665.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
3.07 (Most objects in the real w) 89.36 665.8 P
3.07 (orld ha) 203.51 665.8 P
3.07 (v) 233.16 665.8 P
3.07 (e) 237.79 665.8 P
0 1 1 0 1 0 0 K
1 F
0 1 1 0 1 0 0 K
3.07 (attrib) 247.48 665.8 P
3.07 (utes) 270.62 665.8 P
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
3.07 (.  F) 287.06 665.8 P
3.07 (or e) 305.52 665.8 P
3.07 (xample, the) 323.02 665.8 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1.45 (attrib) 90 654.98 P
1.45 (utes of a person include the person\325) 109.96 654.98 P
1.45 (s age, name, gender) 253.87 654.98 P
1.45 (, address,) 333.39 654.98 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(birthdate, ph) 90 644.16 T
(ysical condition, etc.) 138.2 644.16 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 612.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.31 (Most objects ha) 89.36 612.98 P
0.31 (v) 150.24 612.98 P
0.31 (e) 154.87 612.98 P
0 1 1 0 1 0 0 K
1 F
0 1 1 0 1 0 0 K
0.31 (beha) 161.8 612.98 P
0.31 (viors) 181.19 612.98 P
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
0.31 (. Beha) 201.34 612.98 P
0.31 (viors are things that an object can do.) 225.84 612.98 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(F) 90 602.16 T
(or e) 95.16 602.16 T
(xample, a person can sing, program, w) 109.6 602.16 T
(alk, jump, etc.) 257.16 602.16 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 570.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.96 (Consider objects as intelligent beings.) 89.36 570.98 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
0.96 (Objects) 241.6 570.98 P
2 F
0.96 (know) 274.11 570.98 P
0 F
0.96 ( things and the) 294.27 570.98 P
0.96 (y) 352.96 570.98 P
2 F
0.96 (do) 361.08 570.98 P
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
0.18 (things) 90 560.16 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.18 (. The things an object kno) 113.34 560.16 P
0.18 (ws are its attrib) 213.15 560.16 P
0.18 (utes. The things an object) 272.08 560.16 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(can do are its beha) 90 549.34 T
(viors.) 160.84 549.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 518.16 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.76 (Real-w) 89.36 518.16 P
0.76 (orld objects are often e) 116.83 518.16 P
0.76 (xtremely complicated.) 207.2 518.16 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
0.76 (Simple models) 296.46 518.16 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.76 ( can) 354.24 518.16 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(be constructed in a program to represent objects in real-w) 90 507.34 T
(orld system.) 309.65 507.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 72.82 476.16 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.78 (Only the characteristics of the real-w) 89.36 476.16 P
0.78 (orld system that are) 234.43 476.16 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
0.78 (rele) 314.95 476.16 P
0.78 (v) 329.02 476.16 P
0.78 (ant) 333.55 476.16 P
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
0.78 ( to the) 345.21 476.16 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(problem are represented in  the corresponding model.) 90 465.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
0.49 (F) 90 443.71 P
0.49 (or e) 95.16 443.71 P
0.49 (xample, in a library information system to maintain information on) 110.09 443.71 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
2.72 (the library\325) 90 432.89 P
2.72 (s borro) 134.88 432.89 P
2.72 (wers, the books and borro) 164.14 432.89 P
2.72 (wers are represented as) 273.68 432.89 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0.56 (objects in the system. The attrib) 90 422.07 P
0.56 (utes of each borro) 214.55 422.07 P
0.56 (wer may be limited to) 284.63 422.07 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0.57 (the name, id, address, list of books being check) 90 411.25 P
0.57 (ed out, amount o) 275.01 411.25 P
0.57 (wed for) 340.64 411.25 P
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(o) 90 400.44 T
(v) 94.63 400.44 T
(erdue books.) 99.26 400.44 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
0.09 (In a ph) 90 378.8 P
0.09 (ysician\325) 116.63 378.8 P
0.09 (s of) 146.33 378.8 P
0.09 (\336ce, an information system also models each person as) 160.23 378.8 P
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1.31 (an object b) 90 367.98 P
1.31 (ut the rele) 134.31 367.98 P
1.31 (v) 174.86 367.98 P
1.31 (ant attrib) 179.4 367.98 P
1.31 (utes are the name, age, gender) 214.72 367.98 P
1.31 (, weight,) 336.18 367.98 P
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(height, ph) 90 357.16 T
(ysical condition.) 128.13 357.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 4) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
(Data-dir) 569.53 742.79 T
(ected design) 611.32 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
2 10.18 Q
(Design dir) 471.27 718.83 T
(ected by the c) 514.16 718.83 T
(hoice and r) 569.7 718.83 T
(epr) 615.7 718.83 T
(esentation of data structur) 628.9 718.83 T
(es) 736.28 718.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(\245) 471.27 689.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Data requirements:) 487.81 689.55 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 671.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(What functions to be performed on the data) 505.63 671.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 652.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(What\325) 505.63 652.64 T
(s the proper scope) 530.51 652.64 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(-) 505.63 634.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ownership?) 522.81 634.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(-) 505.63 615.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Ho) 522.81 615.74 T
(w is it shared?) 535 615.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
(Data Abstraction and Objects) 547.16 584.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 10.18 Q
(\245) 471.27 548.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Information hidding) 487.81 548.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 529.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Abstraction for e) 505.63 529.83 T
(xternal use \050logical vie) 574.47 529.83 T
(w\051) 667.24 529.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 511.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Hidding internal details \050ph) 505.63 511.37 T
(ysical vie) 617.85 511.37 T
(w\051) 656.34 511.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 471.27 478.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Data encapsulation) 487.81 478.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 459.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Protect data from unintented modi\336cations) 505.63 459.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 441.38 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Access control) 505.63 441.38 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\245) 471.27 408.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Abstract data types \050ADT\051) 487.81 408.29 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 389.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Speci\336cation \050e) 505.63 389.83 T
(xternal\051) 569.1 389.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 371.38 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(What information encapsulated, access control, operations) 505.63 371.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8.91 Q
0 0 0 1 0 0 0 K
(o) 488.45 353.77 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 10.18 Q
1 1 0 0 0 0 1 K
(Implementation \050hidden\051) 505.63 353.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 5) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 10.18 Q
1 0 0 0 0 1 1 K
(Object-Oriented Pr) 154.09 743.64 T
(ogramming) 239.02 743.64 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 F
(Object-oriented programming is a relati) 72.82 722.01 T
(v) 234.31 722.01 T
(ely ne) 239.25 722.01 T
(w programming para-) 263.59 722.01 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(digm.) 72.82 710.55 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 677.46 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(All data are primarily objects of abstract data types) 89.36 677.46 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 644.37 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Objects are abstract entities.) 89.36 644.37 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 611.28 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0.94 (Internal information are hidden and encapsulated within the object;) 89.36 611.28 P
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(only e) 90 599.83 T
(xternal information and beha) 115.01 599.83 T
(vior is visible to outside.) 232.73 599.83 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 566.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Objects ha) 89.36 566.74 T
(v) 132.42 566.74 T
(e their o) 137.36 566.74 T
(wn functions \050called) 170.47 566.74 T
2 F
(methods) 256.15 566.74 T
0 F
(\051) 290.08 566.74 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 533.65 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(W) 89.36 533.65 T
(orks are performed by in) 98.16 533.65 T
(v) 198.41 533.65 T
(oking) 203.29 533.65 T
2 F
(methods) 229.03 533.65 T
0 F
( in an object) 262.97 533.65 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 500.56 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Objects are cate) 89.36 500.56 T
(gorized into types or classes) 154.23 500.56 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(\245) 72.82 467.47 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
2.14 (An object can belong to a subclass of a parent class and inherit) 89.36 467.47 P
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(properties from its parent class.) 90 456.01 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(o) 90 437.56 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(E.g. T) 107.18 437.56 T
(riangle objects are inherently polygon objects.) 131.99 437.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 6) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 11.45 Q
(C++ Objects \320 Classes) 565.76 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 10.18 Q
(Concept) 471.27 718.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Members) 471.27 524.1 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 F
(o) 488.45 501.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Attrib) 505.63 501.19 T
(utes) 529.75 501.19 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(-) 505.63 482.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Data members) 522.81 482.74 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(-) 505.63 464.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Data type de\336nitions) 522.81 464.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(o) 488.45 445.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Member functions) 505.63 445.83 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 F
(Basic access contr) 471.27 415.92 T
(ols) 549.12 415.92 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
0 F
1 0 1 0 0 1 0 K
(o) 488.45 393.01 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(Public) 505.63 393.01 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(o) 488.45 374.56 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(Pri) 505.63 374.56 T
(v) 517.26 374.56 T
(ate) 522.09 374.56 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
482.72 555.07 757.62 715.43 C
1 0 0 0 0 1 1 K
528.54 570.34 717.53 702.07 11.45 RR
4 X
1 0 0 0 0 1 1 K
V
0.32 H
2 Z
0 X
N
1 0 1 0 0 1 0 K
551.45 616.16 660.26 679.16 R
1 0 1 0 0 1 0 K
V
N
0 0 0 1 0 0 0 K
551.45 587.52 585.81 598.98 5.73 RR
0 0 0 1 0 0 0 K
N
614.45 576.07 648.81 587.52 5.73 RR
N
597.26 598.98 631.63 610.43 5.73 RR
N
620.17 621.89 654.53 633.34 5.73 RR
N
580.08 621.89 614.44 633.34 5.73 RR
N
614.45 650.52 648.81 661.98 5.73 RR
N
557.17 650.52 591.54 661.98 R
N
557.17 639.07 591.54 650.52 R
N
665.99 616.16 700.35 627.61 R
N
665.99 604.71 700.35 616.16 R
N
665.99 593.25 700.35 604.71 R
N
4 8.91 Q
(public \050visible\051) 557.17 667.7 T
(private\050hidden\051) 637.35 690.61 T
0 0 0 1 0 0 0 K
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 7) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 11.45 Q
(Class \320 Definition Section) 132.38 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(class) 72.82 717.98 T
6 F
(class-name) 114.05 717.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
( {) 118.64 693.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 F
(public:) 132.38 669.61 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(public-attribute-list) 177.05 645.43 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(public-member-function-list) 177.05 621.25 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 F
(private:) 132.38 597.07 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(private-attribute-list) 177.05 572.89 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(private-member-function-list) 177.05 548.71 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
( };) 118.64 524.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 8) 781.49 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
5 11.45 Q
1 0 1 0 0 1 0 K
(Structs) 534.26 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(as) 589.24 742.79 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(Public Classes) 609.86 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
1 1 0 0 0 0 1 K
(Struct in C++ is treated as public class) 471.27 717.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(  struct employee) 471.27 677.89 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(  {) 471.27 665.16 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    int    ID;) 471.27 652.43 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    char   name[20];) 471.27 639.71 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    char   gender;) 471.27 626.98 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    int    num_depend;) 471.27 614.25 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    float  rate, wages;) 471.27 601.52 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(  };) 471.27 588.8 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(is the same as:) 471.27 549.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(  class employee) 471.27 495.89 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(  {) 471.27 483.16 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(    public:) 471.27 470.44 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(      int    ID;) 471.27 457.71 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(      char   name[20];) 471.27 444.98 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(      char   gender;) 471.27 432.25 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(      int    num_depend;) 471.27 419.53 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(      float  rate, wages;) 471.27 406.8 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(  };) 471.27 394.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 9) 383.04 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 11.45 Q
(Example:) 194.23 742.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
0 0 0 1 0 0 0 K
(// FILE: counter.h) 72.82 717.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//   Definition file) 72.82 705.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(#define COUNTER_H) 72.82 679.8 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(class counter) 72.82 654.34 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
({) 72.82 641.61 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(  public:) 72.82 628.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // Member functions) 72.82 616.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // Initialize counter) 72.82 603.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(void initialize\050\051;) 100.31 590.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // increment counter) 72.82 577.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(void increment\050\051;) 100.31 565.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // decrement counter) 72.82 552.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(void decrement\050\051;) 100.31 539.8 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // get counter value) 72.82 527.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(int access_value\050\051;) 100.31 514.34 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(  private:) 72.82 488.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    // Private data members) 72.82 476.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(int value;) 100.31 463.44 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(};) 72.82 450.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( // Must end with a semicolon) 86.56 450.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 10) 778.31 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 11.45 Q
(Class \320 Implementation Section) 517.08 742.79 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(type) 471.27 717.98 T
(class-name) 505.63 717.98 T
5 F
(::) 581.23 717.98 T
6 F
(fname) 601.84 717.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
( \050) 517.08 694.43 T
6 F
(argument-list) 530.83 694.43 T
7 F
(\051) 620.17 694.43 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
( {) 517.08 670.89 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(function-body) 575.5 647.34 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
( }) 517.08 623.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(Scope resolution operator) 471.27 600.25 T
5 F
(::) 649.95 600.25 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Example:) 592.68 520.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
0 0 0 1 0 0 0 K
(// FILE: counter.cpp) 471.27 495.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//   Class implementation) 471.27 482.53 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(#include <iostream.h>) 471.27 469.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include <limits.h>) 471.27 457.07 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(#include "counter.h") 471.27 444.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// initialize counter) 471.27 418.89 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
1 0 0 0 0 1 1 K
(void counter::initialize\050\051) 471.27 406.16 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
({) 471.27 393.44 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(  value = 0;) 471.27 380.71 T
0 0 0 1 0 0 0 K
1 0 0 0 0 1 1 K
(}) 471.27 367.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 55.64 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 208.03 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 11) 379.86 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
55.64 332.35 387.81 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11.45 Q
0 0 0 1 0 0 0 K
(// increment counter) 72.82 719.89 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(void counter::increment\050\051) 72.82 707.16 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
({) 72.82 694.43 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(  if \050value < INT_MAX\051) 72.82 681.7 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(    value++;) 72.82 668.98 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(  else) 72.82 656.25 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(    cerr << "Counter overflow: ") 72.82 643.52 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(         << "Increment ignored.") 72.82 630.8 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(         << endl;) 72.82 618.07 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(}) 72.82 605.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// decrement counter) 72.82 567.16 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(void counter::decrement\050\051) 72.82 554.43 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
({) 72.82 541.71 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(  if \050value > INT_MIN\051) 72.82 528.98 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    value--;) 72.82 516.25 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(  else) 72.82 503.53 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(    cerr << "Counter underflow: ") 72.82 490.8 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(         << "Decrement ignored.") 72.82 478.07 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(         << endl;) 72.82 465.34 T
0 0 0 1 0 0 0 K
1 0 1 0 0 1 0 K
(}) 72.82 452.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// get counter value) 72.82 414.44 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
0 1 0 0 1 0 1 K
(int counter::access_value\050\051) 72.82 401.71 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
({) 72.82 388.98 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(  return value;) 72.82 376.26 T
0 0 0 1 0 0 0 K
0 1 0 0 1 0 1 K
(}) 72.82 363.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 6.36 Q
0 X
1 1 0 0 0 0 1 K
(COMP102) 454.08 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Lecture 25) 606.48 315.58 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.8 ( 12) 778.31 315.58 P
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
454.08 332.35 786.26 767.61 11.45 RR
0.32 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 11.45 Q
(Declaring class objects) 541.14 732.61 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(class-name) 494.17 707.8 T
(variable-name) 569.77 707.8 T
7 F
(;) 659.12 707.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
5 F
(Accessing class members) 541.14 656.89 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
6 F
(class-variable-name) 494.17 632.07 T
5 F
(.) 624.75 632.07 T
6 F
(member-name) 631.63 632.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
7 F
(#include "counter.h") 471.27 568.43 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  counter cntr;) 471.27 555.71 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  int current_val;) 471.27 542.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  cntr.initialize\050\051;) 471.27 530.25 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  cntr.increment\050\051;) 471.27 517.53 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(  cntr.decrement\050\051;) 471.27 504.8 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-1.27 (  current_val = cntr.value;) 471.27 492.07 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.27 (  // NOT ALLOWED!) 651.73 492.07 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(current_val = cntr.access_value\050\051;) 485.01 479.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Descend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Bold
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Courier
%%EOF
