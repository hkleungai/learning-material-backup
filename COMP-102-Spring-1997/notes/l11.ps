%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 14 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
7 0 /Courier-Bold FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
9 0 /Times-BoldItalic FMFONTDEFINE
10 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (1) 389.72 315.8 P
1 15.27 Q
( Ar) 156.97 740.25 T
(guments P) 178.44 740.25 T
(assing) 246.59 740.25 T
2 8.91 Q
(\245) 72.82 710.13 T
3 F
(formal) 89.36 710.13 T
(argument) 122.86 710.13 T
2 F
(o) 118.36 693.58 T
(arguments  dec) 135.31 693.58 T
(lared in the argument list of a function) 198.27 693.58 T
(\245) 72.82 664.31 T
(formal arguments are referred to in the body a function) 89.36 664.31 T
(\245) 72.82 635.04 T
1.45 (a function call has to supply a variable) 89.36 635.04 P
1.45 (, a value or an expression) 258.6 635.04 P
(\050) 90 624.86 T
3 F
(actual argument) 92.97 624.86 T
2 F
(\051 for eac) 170.26 624.86 T
(h of the formal argument) 202.86 624.86 T
(\245) 72.82 595.59 T
4 F
(argument passing) 89.36 595.59 T
3 F
(o) 118.36 579.04 T
(pass-by-value) 135.31 579.04 T
2 F
(-) 146.12 562.49 T
(eac) 159.87 562.49 T
(h actual argument \050a variable) 173.17 562.49 T
(, a value or an) 295.95 562.49 T
(expression\051 is) 159.87 552.31 T
3 F
(evaluated) 218.44 552.31 T
2 F
( to a) 263.66 552.31 T
5 F
(value) 283.96 552.31 T
2 F
(-) 146.12 535.77 T
(value is) 159.87 535.77 T
3 F
(copied) 194.2 535.77 T
2 F
( to data area of function) 223.9 535.77 T
(-) 146.12 519.22 T
(function manipulates) 159.87 519.22 T
3 F
(local) 250.29 519.22 T
2 F
( copies only) 273.06 519.22 T
5 F
(o) 118.36 502.68 T
(c) 135.31 502.68 T
(harateristics) 139.1 502.68 T
2 F
(-) 146.12 486.13 T
(function) 159.87 486.13 T
3 F
(never) 196.33 486.13 T
2 F
( accesses) 221.25 486.13 T
5 F
(actual) 260.35 486.13 T
(argument) 288.56 486.13 T
2 F
(-) 146.12 469.59 T
(c) 159.87 469.59 T
(hanges are) 163.76 469.59 T
3 F
(not) 211.28 469.59 T
2 F
( re\337ected in actual argument) 226.13 469.59 T
(-) 146.12 453.04 T
(function terminates) 159.87 453.04 T
(, local values are lost) 241.15 453.04 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (2) 788.17 315.8 P
1 15.27 Q
(P) 574.29 740.25 T
(ass-by-V) 583.47 740.25 T
(alue) 638.9 740.25 T
0 12.73 Q
(Example:) 471.27 708.22 T
6 10.18 Q
(#include <iostream.h>) 517.08 683.83 T
(void) 517.08 660.92 T
7 F
(Increment) 547.63 660.92 T
6 F
(\050int Number\051 {) 602.61 660.92 T
(Number = Number + 1;) 539.99 649.46 T
(cout << Number << endl;) 539.99 638.01 T
(}) 528.54 626.55 T
(void main\050\051 {) 517.08 603.65 T
(int I = 10;) 528.54 592.19 T
(//actual argument is a variable) 528.54 569.28 T
7 F
(Increment) 528.54 557.83 T
6 F
(\050I\051;) 583.52 557.83 T
(cout << I << endl;) 528.54 546.37 T
(//actual argument is a value) 528.54 523.47 T
7 F
(Increment) 528.54 512.01 T
6 F
(\05035\051;) 583.52 512.01 T
(//actual argument is an expression) 528.54 489.1 T
7 F
(Increment) 528.54 477.65 T
6 F
(\050I+26\051;) 583.52 477.65 T
(}) 517.08 466.19 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (3) 389.72 315.8 P
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
85.61 543.12 357.84 706.52 C
0 0 0 1 0 0 0 K
89.43 546.94 203.97 684.39 R
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
238.33 609.93 352.88 661.48 R
N
6 10.18 Q
(Increment\050I\051) 95.15 655.12 T
(cout << I << endl) 95.15 632.22 T
(Increment\05035\051) 95.15 609.31 T
(Increment\050I+26\051) 95.15 589.13 T
(Number=Number+1) 244.06 646.4 T
(cout<<Number<<endl) 244.06 623.5 T
7 F
(Main) 100.88 695.84 T
(Increment) 244.06 678.66 T
231.15 655.75 231.15 657.65 237.76 655.75 231.15 653.86 4 Y
0 Z
N
231.15 655.75 231.15 657.65 237.76 655.75 231.15 653.86 4 Y
V
175.33 655.75 230.99 655.75 2 L
2 Z
N
182.51 644.3 182.51 642.4 175.91 644.3 182.51 646.19 4 Y
0 Z
N
182.51 644.3 182.51 642.4 175.91 644.3 182.51 646.19 4 Y
V
244.06 615.66 215.42 615.66 215.42 644.3 182.67 644.3 4 L
2 Z
N
0 0 0 1 0 0 0 K
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
72.82 338.07 370.63 750.43 C
0 0 0 1 0 0 0 K
73.14 391.53 370.31 511.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97 406.16 210.27 471.07 R
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
244.95 406.16 359.49 471.07 R
N
6 10.18 Q
(calling function) 96.04 488.25 T
(data area) 96.04 478.07 T
8 F
(Increment) 244.95 489.53 T
6 F
(data area) 244.95 479.35 T
(actual argument) 107.5 457.71 T
(I+26) 107.5 437.35 T
(Number) 256.4 457.71 T
(36) 256.4 437.35 T
256.4 429.07 273.59 446.25 R
N
243.5 440.53 243.5 442.42 250.1 440.53 243.5 438.63 4 Y
0 Z
N
243.5 440.53 243.5 442.42 250.1 440.53 243.5 438.63 4 Y
V
147.59 440.53 243.34 440.53 2 L
2 Z
N
(evaluate) 153.32 429.07 T
107.5 414.44 124.68 431.62 R
N
(10) 113.23 420.16 T
72.82 338.07 370.63 750.43 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (4) 788.17 315.8 P
1 12.73 Q
(Example:) 471.27 741.95 T
0 F
(// Print the sum and a) 471.27 716.49 T
(v) 579.55 716.49 T
(erage of tw) 585.72 716.49 T
(o numbers) 642.84 716.49 T
(// Input: tw) 471.27 701.86 T
(o numbers x & y) 527.71 701.86 T
(// Output: sum - the sum of x & y) 471.27 687.22 T
(//              a) 471.27 672.58 T
(v) 528.28 672.58 T
(erage - the a) 534.46 672.58 T
(v) 596.74 672.58 T
(erage of x & y) 602.91 672.58 T
(#include <iostream.h>) 471.27 657.95 T
(v) 471.27 631.22 T
(oid) 477.37 631.22 T
1 F
(PrintSumA) 496.82 631.22 T
(v) 557.77 631.22 T
(e) 564.01 631.22 T
0 F
( \050 \337oat, \337oat \051;) 569.66 631.22 T
(v) 471.27 604.49 T
(oid) 477.37 604.49 T
1 F
(main) 496.82 604.49 T
0 F
( \050 \051 {) 524.4 604.49 T
(\337oat x, y;) 494.17 589.86 T
(cout << "Enter tw) 494.17 563.13 T
(o numbers: ";) 585.35 563.13 T
(cin >> x >> y;) 494.17 548.49 T
(PrintSumA) 494.17 521.77 T
(v) 550.52 521.77 T
(e \050 x , y \051;) 556.69 521.77 T
(}) 471.27 507.13 T
(v) 471.27 480.41 T
(oid) 477.37 480.41 T
1 F
(PrintSumA) 496.82 480.41 T
(v) 557.77 480.41 T
(e) 564.01 480.41 T
0 F
( \050\337oat no1, \337oat no2\051 {) 569.66 480.41 T
(\337oat sum, a) 494.17 465.77 T
(v) 552.96 465.77 T
(erage;) 559.13 465.77 T
(sum = no1 + no2;) 494.17 439.04 T
(a) 494.17 424.41 T
(v) 499.57 424.41 T
(erage = sum / 2;) 505.74 424.41 T
(cout << "The sum is " << sum << endl;) 494.17 397.68 T
(cout << "The a) 494.17 383.04 T
(v) 570.37 383.04 T
(erage is " << a) 576.54 383.04 T
(v) 650.26 383.04 T
(erage << endl;) 656.43 383.04 T
(}) 471.27 368.41 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (5) 389.72 315.8 P
1 12.73 Q
(Data ar) 72.82 741.95 T
(eas after call to PrintSumA) 113.94 741.95 T
(v) 260.41 741.95 T
(e:) 266.65 741.95 T
(Main pr) 107.18 684.56 T
(ogram) 151.85 684.56 T
95.73 532.8 204.54 647.34 R
4 X
V
0.64 H
0 X
N
256.09 452.62 370.63 664.52 R
4 X
V
0 X
N
(PrintSumA) 273.27 684.31 T
(v) 334.22 684.31 T
(e) 340.45 684.31 T
(F) 261.81 653.07 T
(ormal parameters) 269.27 653.07 T
135.82 601.52 164.45 612.98 R
7 X
V
0 X
N
296.18 601.52 324.81 612.98 R
7 X
V
0 X
N
135.82 555.71 164.45 567.16 R
7 X
V
0 X
N
296.18 555.71 324.81 567.16 R
7 X
V
0 X
N
(X) 147.27 618.71 T
(Y) 147.27 572.89 T
(no1) 301.9 618.71 T
(no2) 301.9 572.89 T
J
90 450 0.95 0.95 277.61 618.71 G
278.56 618.71 278.56 621.12 286.99 618.71 278.56 616.29 4 Y
1.91 H
0 Z
N
278.56 618.71 278.56 621.12 286.99 618.71 278.56 616.29 4 Y
V
J
170.18 618.71 277.61 618.71 2 L
J
170.18 618.71 171.77 618.71 2 L
2 Z
N
[3.198 5.756] 3.198 I
171.77 618.71 276.01 618.71 2 L
N
J
276.01 618.71 277.61 618.71 2 L
N
J
90 450 0.95 0.95 277.61 572.89 G
278.56 572.89 278.56 575.31 286.99 572.89 278.56 570.47 4 Y
0 Z
N
278.56 572.89 278.56 575.31 286.99 572.89 278.56 570.47 4 Y
V
J
170.18 572.89 277.61 572.89 2 L
J
170.18 572.89 171.77 572.89 2 L
2 Z
N
[3.198 5.756] 3.198 I
171.77 572.89 276.01 572.89 2 L
N
J
276.01 572.89 277.61 572.89 2 L
N
(Local v) 267.54 527.07 T
(ariables) 307.36 527.07 T
J
267.54 481.25 296.18 492.71 R
7 X
V
0.32 H
0 X
N
330.54 481.25 359.18 492.71 R
7 X
V
0 X
N
( sum) 267.54 498.44 T
(a) 324.81 498.44 T
(v) 330.86 498.44 T
(erage) 337.1 498.44 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (6) 788.17 315.8 P
1 15.27 Q
(Function with inputs and single output:) 491.39 740.25 T
0 1 1 0 1 0 0 K
7 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 540.22 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(<fn_type>  <function_id> \050 <parameter list> \051 {) 480.01 540.22 T
(< local declarations >) 511.36 525.59 T
(< sequences of statements > ;) 511.36 510.95 T
(}) 480.02 496.31 T
0 1 1 0 1 0 0 K
7 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 468.95 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Function \322function_id\323 returns a single result of type) 480.01 468.95 T
(\322fn_type\323.) 480.02 454.31 T
0 1 1 0 1 0 0 K
7 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 426.95 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(One of the statements has the form:) 480.01 426.95 T
1 F
(r) 499.11 397.68 T
(etur) 504.53 397.68 T
(n) 526.95 397.68 T
0 F
(  < e) 534.03 397.68 T
(xpression > ;) 556.21 397.68 T
471.27 338.07 769.08 750.43 C
482.92 599.61 757.43 704.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
558.89 603.43 690.61 700.8 R
4 X
0 0 0 1 0 0 0 K
V
1.27 H
2 Z
0 X
N
90 450 0.64 0.64 547.88 689.34 G
548.51 689.34 548.51 691.65 556.58 689.34 548.51 687.03 4 Y
0 Z
N
548.51 689.34 548.51 691.65 556.58 689.34 548.51 687.03 4 Y
V
507.34 689.34 547.88 689.34 2 L
2 Z
N
90 450 0.64 0.64 547.88 672.16 G
548.51 672.16 548.51 674.47 556.58 672.16 548.51 669.85 4 Y
0 Z
N
548.51 672.16 548.51 674.47 556.58 672.16 548.51 669.85 4 Y
V
507.34 672.16 547.88 672.16 2 L
2 Z
N
90 450 0.64 0.64 547.88 614.89 G
548.51 614.89 548.51 617.2 556.58 614.89 548.51 612.57 4 Y
0 Z
N
548.51 614.89 548.51 617.2 556.58 614.89 548.51 612.57 4 Y
V
507.34 614.89 547.88 614.89 2 L
2 Z
N
90 450 0.64 0.64 721.99 654.98 G
722.63 654.98 722.63 657.29 730.69 654.98 722.63 652.67 4 Y
0 Z
N
722.63 654.98 722.63 657.29 730.69 654.98 722.63 652.67 4 Y
V
687.18 654.98 721.99 654.98 2 L
2 Z
N
J
530.25 654.98 530.25 632.07 2 L
J
530.25 654.98 530.25 653.07 2 L
N
[3.182 4.242] 3.182 I
530.25 653.07 530.25 633.98 2 L
N
J
530.25 633.98 530.25 632.07 2 L
N
0 10.18 Q
(I N P U T S) 0 -270 493.68 632.07 TF
(O U T P U T) 0 -270 751.4 626.34 TF
0 12.73 Q
( F u n c t i o n) 581.79 654.98 T
J
471.27 338.07 769.08 750.43 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (7) 389.72 315.8 P
1 12.73 Q
(Example:) 72.82 741.95 T
0 F
(// Compute the  a) 72.82 716.49 T
(v) 160.24 716.49 T
(erage of tw) 166.41 716.49 T
(o numbers) 223.53 716.49 T
(// Input: tw) 72.82 701.86 T
(o numbers x & y) 129.26 701.86 T
(// Output: the a) 72.82 687.22 T
(v) 149.28 687.22 T
(erage of x & y) 155.45 687.22 T
(#include <iostream.h>) 72.82 672.58 T
(\337oat) 72.82 645.86 T
1 F
(a) 101.81 645.86 T
(v) 107.86 645.86 T
(erage) 114.09 645.86 T
0 F
( \050 \337oat, \337oat \051;) 143.77 645.86 T
(v) 72.82 619.13 T
(oid main \050 \051 {) 78.93 619.13 T
(\337oat x, y;) 95.73 604.49 T
(cout << "Enter tw) 95.73 577.77 T
(o numbers: ";) 186.9 577.77 T
(cin >> x >> y;) 95.73 563.13 T
(a) 95.73 536.4 T
(v) 101.12 536.4 T
(e =) 107.29 536.4 T
1 F
(a) 126.49 536.4 T
(v) 132.53 536.4 T
(erage) 138.77 536.4 T
0 F
(\050x, y\051;) 168.45 536.4 T
(cout << "The a) 95.73 521.77 T
(v) 171.92 521.77 T
(erage is " << a) 178.1 521.77 T
(v) 251.81 521.77 T
(e << endl;) 257.98 521.77 T
(}) 72.82 507.13 T
(\337oat) 72.82 480.41 T
1 F
(a) 98.63 480.41 T
(v) 104.67 480.41 T
(erage) 110.91 480.41 T
0 F
( \050\337oat no1, \337oat no2\051 {) 140.59 480.41 T
(\337oat sum;) 95.73 465.77 T
(sum = no1 + no2;) 95.73 439.04 T
1 F
(r) 95.73 424.41 T
(etur) 101.15 424.41 T
(n) 123.57 424.41 T
0 F
(  sum / 2 ;) 130.65 424.41 T
(}) 72.82 409.77 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (8) 788.17 315.8 P
1 15.27 Q
(Example) 471.27 740.25 T
0 12.73 Q
(#include <iostream.h>) 471.27 708.22 T
1 F
(double new_balance\050double) 471.27 681.49 T
9 F
(balance) 625.43 681.49 T
1 F
(, double) 666.43 681.49 T
9 F
(rate) 712.76 681.49 T
1 F
(\051;) 733.26 681.49 T
0 F
(//Returns the balance in a bank account after posting) 471.27 666.86 T
(//simple interest. The formal parameter) 471.27 652.22 T
10 F
(balance) 673.45 652.22 T
0 F
( is the old) 713.74 652.22 T
(//balance. The formal parameter) 471.27 637.58 T
10 F
(r) 637.72 637.58 T
(ate) 642.48 637.58 T
0 F
( is the interest rate.) 658.03 637.58 T
(//F) 471.27 622.95 T
(or e) 485.23 622.95 T
(xample, if rate is 5.0, then the interest rate is 5%) 504.47 622.95 T
(//and so ne) 471.27 608.31 T
(w_balance\050100, 5.0\051 returns 105.00.) 526.09 608.31 T
(main\050\051 {) 471.27 581.59 T
(    double interest, balance = 100;) 471.27 554.86 T
(    cout << "Enter interest rate: " << endl;) 471.27 528.13 T
(    cin >> interest;) 471.27 513.49 T
(    cout << "balance = $" << balance << endl;) 471.27 486.77 T
(    cout << "ne) 471.27 472.13 T
(w balance = $") 543.52 472.13 T
(            <<) 471.27 457.5 T
1 F
(new_balance\050balance, inter) 526.98 457.5 T
(est\051) 675.23 457.5 T
0 F
( << endl;) 694.31 457.5 T
(    return 0;) 471.27 430.77 T
(}) 471.27 404.04 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (9) 389.72 315.8 P
0 12.73 Q
(// Ne) 72.82 708.22 T
(w balance is computed as balance + balance * %rate) 97.6 708.22 T
(double ne) 72.82 678.95 T
(w_balance\050double) 122.34 678.95 T
10 F
(balance) 218.82 678.95 T
0 F
(, double) 259.12 678.95 T
10 F
(r) 303.3 678.95 T
(ate) 308.06 678.95 T
0 F
(\051 {) 323.62 678.95 T
(    double interest_fraction, interest;) 72.82 652.22 T
(    interest_fraction =) 72.82 625.49 T
10 F
(r) 182.5 625.49 T
(ate) 187.26 625.49 T
0 F
( / 100;) 202.81 625.49 T
(    interest = interest_fraction *) 72.82 610.86 T
10 F
(balance) 232.7 610.86 T
0 F
(;) 272.99 610.86 T
(    return \050balance + interest\051;) 72.82 596.22 T
(}) 72.82 569.49 T
(// Ne) 72.82 528.13 T
(w balance is computed as balance * \0501 + %rate\051) 97.6 528.13 T
(double ne) 72.82 501.4 T
(w_balance\050double) 122.34 501.4 T
10 F
(balance) 218.82 501.4 T
0 F
(, double) 259.12 501.4 T
10 F
(r) 303.3 501.4 T
(ate) 308.06 501.4 T
0 F
(\051 {) 323.62 501.4 T
(    double interest_fraction, updated_balance;) 72.82 474.68 T
(    interest_fraction =) 72.82 447.95 T
10 F
(r) 182.5 447.95 T
(ate) 187.26 447.95 T
0 F
( / 100;) 202.81 447.95 T
(    updated_balance =) 72.82 433.32 T
10 F
(balance) 184.61 433.32 T
0 F
( * \0501 + interest_fraction\051;) 224.91 433.32 T
(    return updated_balance;) 72.82 418.68 T
(}) 72.82 391.95 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (10) 784.35 315.8 P
1 15.27 Q
(Example) 471.27 740.25 T
2 8.91 Q
(\245) 471.27 710.13 T
(Example program:) 487.81 710.13 T
6 10.18 Q
(// Convert inches to feet and inches) 471.27 681.28 T
(// Input: inches) 471.27 669.83 T
(// Output: feet and inches) 471.27 658.37 T
(#include <iostream.h>) 471.27 635.46 T
(void main\050\051 {) 471.27 612.55 T
(     /* inches to feet conversion factor */) 471.27 589.65 T
(     const int in2feet = 12;) 471.27 578.19 T
(     int  inches; /* number of inches */) 471.27 555.28 T
(     cout<< "Enter number in inches: ";) 471.27 532.37 T
(     cin >> inches;) 471.27 520.92 T
(     cout<< inches / in2feet << " feet ") 471.27 498.01 T
(         << inches % in2feet << " inches ") 471.27 486.56 T
(         << endl;) 471.27 475.1 T
(}) 471.27 463.65 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 332.35 393.54 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 309.44 393.54 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 315.8 T
(Lecture 11) 205.29 315.8 T
-1.91 (11) 385.9 315.8 P
1 15.27 Q
(Example \050Cont\325) 72.82 740.25 T
(d\051) 176.44 740.25 T
7 10.18 Q
(// File main.cpp) 72.82 698.46 T
6 F
(// Input  inches) 72.82 687.01 T
(// Output feet and inches) 72.82 675.55 T
(#include <iostream.h>) 72.82 652.64 T
(// Function Prototype) 72.82 629.74 T
(int) 72.82 618.28 T
7 F
(feet) 97.25 618.28 T
6 F
(\050int\051;) 121.69 618.28 T
(int) 72.82 606.83 T
7 F
(rinches) 97.25 606.83 T
6 F
(\050int\051;) 140.02 606.83 T
(void) 72.82 572.46 T
7 F
(main) 103.36 572.46 T
6 F
(\050\051 {) 127.8 572.46 T
(     int  inches;       // Number of inches) 72.82 561.01 T
(     cout << "Inches: ";) 72.82 538.1 T
(     cin >> inches;) 72.82 526.65 T
(     cout <<) 72.82 515.19 T
7 F
(feet) 152.23 515.19 T
6 F
(\050inches\051 << " feet  ") 176.67 515.19 T
(          <<) 72.82 503.74 T
7 F
(rinches) 152.23 503.74 T
6 F
(\050inches\051 << " inches") 195 503.74 T
(          << endl;) 72.82 492.28 T
(}) 72.82 480.83 T
(// Functions for Converting inches to feet) 72.82 457.92 T
(const int i2ffactor = 12;  // conversion factor) 72.82 446.47 T
(int) 72.82 423.56 T
7 F
(feet) 97.25 423.56 T
6 F
(\050int inches\051 {) 121.69 423.56 T
(     return inches / i2ffactor;) 72.82 412.1 T
(}) 72.82 400.65 T
(int) 72.82 377.74 T
7 F
(rinches) 97.25 377.74 T
6 F
(\050int inches\051 {) 140.02 377.74 T
(     return inches % i2ffactor;) 72.82 366.29 T
(}) 72.82 354.83 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 332.35 791.99 767.61 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 309.44 791.99 320.89 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 315.8 T
(Lecture 11) 603.74 315.8 T
-1.91 (12) 784.35 315.8 P
1 15.27 Q
(Example \050Cont\325) 471.27 740.25 T
(d\051) 574.89 740.25 T
7 10.18 Q
(// File i2f.h) 471.27 709.92 T
6 F
(int) 471.27 698.46 T
7 F
(feet) 495.7 698.46 T
6 F
(\050int\051;) 520.14 698.46 T
(int) 471.27 687.01 T
7 F
(rinches) 495.7 687.01 T
6 F
(\050int\051;) 538.46 687.01 T
7 F
(// File i2f.cpp) 471.27 652.64 T
6 F
(// Functions for Converting inches to feet) 471.27 641.19 T
(const int i2ffactor = 12;  // conversion factor) 471.27 629.74 T
(int) 471.27 618.28 T
7 F
(feet) 495.7 618.28 T
6 F
(\050int inches\051 {) 520.14 618.28 T
(     return inches / i2ffactor;) 471.27 606.83 T
(}) 471.27 595.37 T
(int) 471.27 583.92 T
7 F
(rinches) 495.7 583.92 T
6 F
(\050int inches\051 {) 538.46 583.92 T
(     return inches % i2ffactor;) 471.27 572.46 T
(}) 471.27 561.01 T
7 F
(// File main.cpp) 471.27 526.65 T
6 F
(// Input  inches) 471.27 515.19 T
(// Output feet and inches) 471.27 503.74 T
(#include <iostream.h>) 471.27 480.83 T
(#include "i2f.h") 471.27 469.38 T
(void) 471.27 446.47 T
7 F
( main) 495.7 446.47 T
6 F
(\050\051 {) 526.25 446.47 T
(     int  inches;       // Number of inches) 471.27 435.01 T
(     cout << "Inches: ";) 471.27 412.1 T
(     cin >> inches;) 471.27 400.65 T
(     cout <<) 471.27 389.19 T
7 F
(feet) 550.68 389.19 T
6 F
(\050inches\051 << " feet  ") 575.12 389.19 T
(          <<) 471.27 377.74 T
7 F
(rinches) 550.68 377.74 T
6 F
(\050inches\051 << " inches") 593.45 377.74 T
(          << endl;) 471.27 366.29 T
(}) 471.27 354.83 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-BoldItalic
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Times-BoldItalic
%%+ Times-Italic
%%EOF
