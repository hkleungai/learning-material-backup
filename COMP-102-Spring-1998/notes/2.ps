%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Courier-Bold FMFONTDEFINE
3 0 /Palatino-Roman FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (1) 389.72 338.71 P
1 14 Q
(COMPUTER GENERA) 72.82 718.19 T
(TIONS) 219.68 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 679.58 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(Pr) 90 679.58 T
(ehistory \050befor) 102.48 679.58 T
(e 1945\051:) 184.83 679.58 T
3 11.45 Q
(\245) 88.85 653.07 T
(\322Mechanical\323 computers such as abacus, loom, and) 100.31 653.07 T
(tabulating machines) 100.31 639.71 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 612.77 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(First generation \0501945 - 1954\051:) 90 612.77 T
3 11.45 Q
(\245) 88.85 586.25 T
(First commer) 100.31 586.25 T
(cial computer \050vacuum tube\051 in 1951) 167.36 586.25 T
(\245) 88.85 569.07 T
(Machine languages) 100.31 569.07 T
(\245) 88.85 551.89 T
(Single-user machines) 100.31 551.89 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 524.95 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(Second generation \0501955 - 1964\051:) 81.56 524.95 T
3 11.45 Q
(\245) 88.85 498.44 T
(T) 100.31 498.44 T
(ransistors) 106.3 498.44 T
(\245) 88.85 481.25 T
(Assembly languages) 100.31 481.25 T
(\245) 88.85 464.07 T
(Pr) 100.31 464.07 T
(ocedural \050high-level\051 languages \050e.g., Fortran\051) 111.54 464.07 T
(\245) 88.85 446.89 T
(Single-user machines) 100.31 446.89 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 419.95 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(Thir) 81.56 419.95 T
(d generation \0501965 - 1974\051:) 105.27 419.95 T
3 11.45 Q
(\245) 88.85 393.44 T
(Integrated cir) 100.31 393.44 T
(cuits \050ICs\051) 168.5 393.44 T
(\245) 88.85 376.26 T
(Multipr) 100.31 376.26 T
(ogramming and time-sharing) 139.65 376.26 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (2) 788.17 338.71 P
1 14 Q
(COMPUTER GENERA) 471.27 718.19 T
(TIONS \050cont\325d\051) 618.12 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 679.58 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(Fourth generation \0501975 - 1990\051:) 480.01 679.58 T
3 11.45 Q
(\245) 487.3 653.07 T
(Lar) 498.76 653.07 T
(ge scale integrated \050LSI\051 and very lar) 515.8 653.07 T
(ge scale) 701.51 653.07 T
(integrated \050VLSI\051 cir) 498.76 639.71 T
(cuits \321> micr) 602.05 639.71 T
(ocomputers/PC\325s) 672.94 639.71 T
(\245) 487.3 622.52 T
(Graphical user interface \050Macintosh\051) 498.76 622.52 T
(\245) 487.3 605.34 T
(Database applications) 498.76 605.34 T
(\245) 487.3 588.16 T
(Local ar) 498.76 588.16 T
(ea computer networks \050LAN\325s\051) 539.06 588.16 T
(\245) 487.3 570.98 T
(Arpanet\321>Internet) 498.76 570.98 T
(\245) 487.3 553.8 T
(Object-oriented pr) 498.76 553.8 T
(ogramming languages \050Smalltalk,) 591.44 553.8 T
(C++\051) 498.76 540.43 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 513.49 T
0 0 0 1 0 0 0 K
3 12.73 Q
0 0 0 1 0 0 0 K
(Fifth generation \0501991 - pr) 480.01 513.49 T
(esent\051:) 625.97 513.49 T
3 11.45 Q
(\245) 487.3 486.98 T
(Ultra lar) 498.76 486.98 T
(ge scale integrated \050ULSI\051 cir) 541.23 486.98 T
(cuits) 687.24 486.98 T
(\245) 487.3 469.8 T
(\322Cheaper\323 personal computers) 498.76 469.8 T
(\245) 487.3 452.62 T
(Distributed computing) 498.76 452.62 T
(\245) 487.3 435.44 T
(The web) 498.76 435.44 T
(\245) 487.3 418.25 T
(Multimedia technologies \050DVD\051) 498.76 418.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (3) 389.72 338.71 P
1 14 Q
(Levels of a Computer System) 128.4 718.19 T
4 11.45 Q
(User/Pr) 81.56 680.43 T
(ogrammer:) 119.52 680.43 T
4 10.18 Q
(Human le) 107.18 657.1 T
(v) 149.74 657.1 T
(el) 154.73 657.1 T
4 11.45 Q
(Softwar) 81.56 633.34 T
(e applications:) 120.17 633.34 T
4 10.18 Q
(Pr) 107.18 610.01 T
(ocedural \050high-le) 117.74 610.01 T
(v) 191.4 610.01 T
(el\051 pr) 196.39 610.01 T
(ogramming language) 219.68 610.01 T
(Assembly language) 107.18 588.37 T
(Machine language) 107.18 566.74 T
4 11.45 Q
(Operating system:) 81.56 542.98 T
4 10.18 Q
(W) 107.18 519.65 T
(indo) 117.18 519.65 T
(ws \050pr) 136.32 519.65 T
(ogram\051 management) 163.57 519.65 T
(File management) 107.18 498.01 T
(Input/output contr) 107.18 476.37 T
(ol system) 188.75 476.37 T
4 11.45 Q
(Hard) 81.56 452.62 T
(war) 107.49 452.62 T
(e:) 126.36 452.62 T
4 10.18 Q
(Digital logic) 107.18 429.28 T
(Digital-analog con) 107.18 407.65 T
(v) 186.25 407.65 T
(ersion) 191.24 407.65 T
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (4) 788.17 338.71 P
1 14 Q
(High-level Programming Languages) 504.28 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 679.58 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Closer to natural languages than machine/assembly) 480.01 679.58 T
(languages.) 480.02 664.95 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 622.95 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(T) 480.01 622.95 T
(ranslated into e) 487.34 622.95 T
(x) 564.91 622.95 T
(ecutable form using) 571.09 622.95 T
725.55 621.79 675.36 621.79 2 L
V
0.41 H
0 Z
N
(compilers) 675.36 622.95 T
( or) 725.55 622.95 T
537.98 607.16 480.02 607.16 2 L
V
N
(interpreters) 480.02 608.31 T
(.) 537.98 608.31 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 566.31 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(A compiler translates the entire source program written) 480.01 566.31 T
(in a high-le) 480.02 551.68 T
(v) 537.67 551.68 T
(el language into machine language.) 543.84 551.68 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 509.68 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(An interpreter translates and e) 480.01 509.68 T
(x) 633.21 509.68 T
(ecutes each source) 639.38 509.68 T
-0.01 (program instruction before translating and e) 480.02 495.04 P
-0.01 (x) 703.53 495.04 P
-0.01 (ecuting the) 709.71 495.04 P
(ne) 480.02 480.41 T
(xt.) 491.84 480.41 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 438.41 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Interpreters can ease program de) 480.01 438.41 T
(v) 645.78 438.41 T
(elopment, although) 651.95 438.41 T
(interpreted code usually e) 480.02 423.77 T
(x) 610.95 423.77 T
(ecutes more slo) 617.12 423.77 T
(wly than) 695.98 423.77 T
(compiled code.) 480.02 409.13 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (5) 389.72 338.71 P
1 14 Q
(Assembly Languages) 153.87 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 679.58 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(An assembly language is the) 81.56 679.58 T
277.05 678.43 230.38 678.43 2 L
V
0.41 H
0 Z
N
(symbolic) 230.38 679.58 T
( v) 277.05 679.58 T
(ersion of the) 286.41 679.58 T
(computer\325) 81.57 664.95 T
(s machine language.) 133.18 664.95 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 622.95 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(An) 81.56 622.95 T
151.19 621.79 100.3 621.79 2 L
V
N
(assembler) 100.3 622.95 T
( translates an assembly language program) 151.19 622.95 T
(to a corresponding machine language program.) 81.57 608.31 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 566.31 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Assembly languages use easily recognized symbols to) 81.56 566.31 T
(represent instructions and memory locations for data) 81.57 551.68 T
(\050e.g. ADD for addition, SUM for the location to store) 81.57 537.04 T
(result.\051) 81.57 522.4 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 480.41 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Example of an assembly language instruction:) 81.56 480.41 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 394.5 T
0 0 0 1 0 0 0 K
72.82 372.44 370.63 727.52 C
84.27 418.26 359.18 451.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.18 Q
0 X
0 0 0 1 0 0 0 K
(ADD) 140.43 434.16 T
( 10h) 176.64 434.16 T
( AX) 218.03 434.16 T
130.09 428.44 244.63 445.62 R
0.64 H
0 Z
N
207.68 445.62 207.68 428.44 2 L
2 Z
N
169.75 445.62 169.75 428.44 2 L
N
72.82 372.44 370.63 727.52 C
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (6) 788.17 338.71 P
1 14 Q
(Machine Languages) 556.21 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 679.58 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(All programming languages must be translated into the) 480.01 679.58 T
(computer\325) 480.02 664.95 T
(s machine language, which is the) 531.62 664.95 T
725.69 663.79 703.06 663.79 2 L
V
0.41 H
0 Z
N
(only) 703.06 664.95 T
(language that can be e) 480.02 650.31 T
(x) 592.92 650.31 T
(ecuted) 599.09 650.31 T
674.37 649.15 635.49 649.15 2 L
V
N
(directly) 635.49 650.31 T
(.) 673.54 650.31 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 608.31 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(An) 480.01 608.31 T
553.19 607.16 498.75 607.16 2 L
V
N
(instruction) 498.75 608.31 T
( is coded as a sequence of 0\325) 553.19 608.31 T
(s and 1\325) 697.75 608.31 T
(s.) 737.34 608.31 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 566.31 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Machine language programs are cumbersome and) 480.01 566.31 T
(dif) 480.02 551.68 T
(\336cult to write.) 493.84 551.68 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 509.68 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Example of a machine language instruction:) 480.01 509.68 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 471.27 482.31 T
0 0 0 1 0 0 0 K
471.27 372.44 769.08 727.52 C
471.27 386.44 769.08 478.07 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
517.08 455.16 574.35 466.62 R
7 X
0 0 0 1 0 0 0 K
V
3 10.18 Q
0 X
(   00000101) 517.08 459.83 T
580.08 455.16 637.35 466.62 R
7 X
V
0 X
(   00010000) 580.08 459.83 T
648.81 455.16 706.08 466.62 R
7 X
V
0 X
(   00000000) 648.81 459.83 T
511.36 449.44 717.53 472.32 R
0.64 H
0 Z
N
574.35 472.34 574.35 449.44 2 L
2 Z
N
643.08 472.34 643.08 449.44 2 L
N
( V) 586.21 430.59 T
(alue of) 595.16 430.59 T
(1st operand) 584.3 417.81 T
(ADD) 528.4 430.62 T
(operation) 519.49 417.84 T
(Addr) 660.26 430.62 T
(ess to) 684.46 430.62 T
(stor) 660.26 417.84 T
(e r) 677.3 417.84 T
(esult) 688.56 417.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 372.44 769.08 727.52 C
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (7) 389.72 338.71 P
4 15.27 Q
(                       Data Repr) 72.82 720.73 T
(esentation) 228.64 720.73 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 652.86 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Numbers are represented in binary form) 95.73 652.86 T
(\050i.e. 0\325) 95.73 638.22 T
(s & 1\325) 128.6 638.22 T
(s\051.) 159.72 638.22 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 610.86 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Indi) 95.73 610.86 T
(vidual objects can be assigned some unique) 115.91 610.86 T
(inte) 95.73 596.22 T
(ger inde) 114.63 596.22 T
(x. \050e.g.,) 155.79 596.22 T
-0.79 (each English character is assigned) 197.49 596.22 P
(a unique inte) 95.73 581.59 T
(ger inde) 161.28 581.59 T
(x.\051) 202.44 581.59 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 554.22 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Multimedia information) 95.73 554.22 T
(- T) 95.73 526.86 T
(e) 110.03 526.86 T
(xt and numbers) 115.49 526.86 T
(- Graphics) 95.73 507.77 T
(- Audio) 95.73 488.68 T
(- Images \050bit maps\051) 95.73 469.59 T
(- V) 95.73 450.5 T
(ideo \050encoded bit maps\051) 111.57 450.5 T
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (8) 788.17 338.71 P
1 14 Q
(                     NUMBER SYSTEMS) 471.27 718.19 T
471.27 372.44 769.08 727.52 C
471.27 415.71 769.08 713.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.27 421.44 539.99 684.89 R
7 X
0 0 0 1 0 0 0 K
V
524.27 677.17 486.99 677.17 2 L
0 X
V
0.32 H
0 Z
N
3 10.18 Q
(Decimal) 486.99 678.1 T
(0) 503.08 660.28 T
(1) 503.08 645.01 T
(2) 503.08 629.74 T
(3) 503.08 614.46 T
(4) 503.08 599.19 T
(5) 503.08 583.92 T
(6) 503.08 568.65 T
(7) 503.08 553.37 T
(8) 503.08 538.1 T
(9) 503.08 522.83 T
(10) 500.54 507.56 T
(1) 500.82 492.28 T
(1) 505.35 492.28 T
(12) 500.54 477.01 T
(13) 500.54 461.74 T
(14) 500.54 446.47 T
(15) 500.54 431.19 T
545.72 421.44 614.45 684.89 R
7 X
V
595.02 677.17 565.14 677.17 2 L
0 X
V
N
(Binary) 565.14 678.1 T
(0000) 569.9 660.28 T
(0001) 569.9 645.01 T
(0010) 569.9 629.74 T
(001) 570.18 614.46 T
(1) 584.89 614.46 T
(0100) 569.9 599.19 T
(0101) 569.9 583.92 T
(01) 570.18 568.65 T
(10) 579.8 568.65 T
(01) 570.46 553.37 T
(1) 580.08 553.37 T
(1) 584.61 553.37 T
(1000) 569.9 538.1 T
(1001) 569.9 522.83 T
(1010) 569.9 507.56 T
(101) 570.18 492.28 T
(1) 584.89 492.28 T
(1) 570.18 477.01 T
(100) 574.71 477.01 T
(1) 570.18 461.74 T
(101) 574.71 461.74 T
(1) 570.46 446.47 T
(1) 574.99 446.47 T
(10) 579.52 446.47 T
(1) 570.74 431.19 T
(1) 575.27 431.19 T
(1) 579.8 431.19 T
(1) 584.33 431.19 T
620.17 421.44 688.9 684.89 R
7 X
V
666.48 677.17 642.59 677.17 2 L
0 X
V
N
(Octal) 642.59 678.1 T
(00) 649.44 660.28 T
(01) 649.44 645.01 T
(02) 649.44 629.74 T
(03) 649.44 614.46 T
(04) 649.44 599.19 T
(05) 649.44 583.92 T
(06) 649.44 568.65 T
(07) 649.44 553.37 T
(10) 649.44 538.1 T
(1) 649.72 522.83 T
(1) 654.26 522.83 T
(12) 649.44 507.56 T
(13) 649.44 492.28 T
(14) 649.44 477.01 T
(15) 649.44 461.74 T
(16) 649.44 446.47 T
(17) 649.44 431.19 T
694.62 421.44 763.35 684.89 R
7 X
V
758.65 677.17 699.33 677.17 2 L
0 X
V
N
(Hexadecimal) 699.33 678.1 T
(0) 726.44 660.28 T
(1) 726.44 645.01 T
(2) 726.44 629.74 T
(3) 726.44 614.46 T
(4) 726.44 599.19 T
(5) 726.44 583.92 T
(6) 726.44 568.65 T
(7) 726.44 553.37 T
(8) 726.44 538.1 T
(9) 726.44 522.83 T
(A) 725.03 507.56 T
(B) 725.88 492.28 T
(C) 725.38 477.01 T
(D) 725.05 461.74 T
(E) 725.88 446.47 T
(F) 726.16 431.19 T
471.27 372.44 769.08 727.52 C
425.45 292.26 814.9 796.25 C
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (9) 389.72 338.71 P
1 14 Q
(DA) 72.82 718.19 T
(T) 94.08 718.19 T
(A REPRESENT) 102.13 718.19 T
(A) 199.22 718.19 T
(TION) 208.82 718.19 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 679.58 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Bit \050or binary digit\051:) 81.56 679.58 T
3 11.45 Q
(\245) 88.85 653.07 T
(Basic unit for storing data in computer memory \050\3220\323) 100.31 653.07 T
(for OFF) 100.31 639.71 T
(, \3221\323 for ON\051) 138.45 639.71 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 612.77 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(Byte:) 81.56 612.77 T
3 11.45 Q
(\245) 88.85 586.25 T
(8 bits) 100.31 586.25 T
(\245) 88.85 569.07 T
(Each byte usually r) 100.31 569.07 T
(epr) 197.05 569.07 T
(esents one character of data) 213.74 569.07 T
(\050number) 100.31 555.71 T
(, letter) 143.31 555.71 T
(, special character\051) 174.49 555.71 T
(\245) 88.85 538.53 T
(Unit to expr) 100.31 538.53 T
(ess capacity of memory:) 161.27 538.53 T
( -) 104.89 521.34 T
(1 kilobyte \050KB\051 = 1024 bytes) 116.34 521.34 T
( -) 104.89 504.16 T
(1 megabyte \050MB\051 = 1024 x 1024 bytes) 116.34 504.16 T
( -) 104.89 486.98 T
(1 gigabyte \050GB\051 = 1024 x 1024 x 1024 bytes) 116.34 486.98 T
0 1 1 0 1 0 0 K
2 10.18 Q
0 1 1 0 1 0 0 K
(\245) 72.82 460.04 T
0 0 0 1 0 0 0 K
0 12.73 Q
0 0 0 1 0 0 0 K
(W) 81.56 460.04 T
(ord:) 92.56 460.04 T
3 11.45 Q
(\245) 88.85 433.53 T
-0.23 (Number of bits that constitute a common unit of data) 100.31 433.53 P
(in a computer system) 100.31 420.16 T
(\245) 88.85 402.98 T
(1 computer wor) 100.31 402.98 T
(d = 16 bits for 16-bit machines, = 32) 180.88 402.98 T
(bits for 32-bit machines, and so on) 100.31 389.62 T
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (10) 784.35 338.71 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 12.73 Q
1 1 0 0 0 0 1 K
(Softwar) 595.9 719.04 T
(e) 638.79 719.04 T
0 0 0 1 0 0 0 K
0 10.18 Q
0 0 0 1 0 0 0 K
(Operating System) 580.08 548.77 T
(W) 597.26 531.59 T
(in95, Unix) 606.47 531.59 T
(Compilers) 514.77 615.19 T
(P) 494.17 600.31 T
(ascal, F) 499.68 600.31 T
(ortran, C++) 530.64 600.31 T
(Application Programs) 645.4 617.49 T
(Editor) 653.93 600.31 T
(, VC++) 678.98 600.31 T
488.45 630.16 580.08 630.16 580.08 590.07 488.45 590.07 4 Y
N
637.35 635.89 746.17 635.89 746.17 584.34 637.35 584.34 4 Y
N
568.63 561.43 665.99 561.43 665.99 521.34 568.63 521.34 568.63 561.43 5 L
N
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 292.26 416.45 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
49.91 349.53 393.54 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
49.91 332.35 393.54 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 49.91 338.71 T
(Lecture 2) 207.2 338.71 T
-1.91 (11) 385.9 338.71 P
1 1 0 0 0 0 1 K
4 12.73 Q
1 1 0 0 0 0 1 K
(A Sample Pr) 169.52 719.04 T
(ogram) 238.58 719.04 T
0 0 0 1 0 0 0 K
4 11.45 Q
0 0 0 1 0 0 0 K
(C++ pr) 72.82 668.98 T
(ogram) 108.26 668.98 T
0 10.18 Q
(v) 141.54 645.64 T
(oid main\050\051{) 146.43 645.64 T
(int sum = 5 + 16 + 32;) 164.45 624.01 T
(}) 141.54 602.37 T
4 11.45 Q
(Assembly language pr) 72.82 556.98 T
(ogram) 180.8 556.98 T
0 10.18 Q
(mo) 141.54 533.65 T
(v) 154.4 533.65 T
(ax,5) 164.45 533.65 T
(add) 141.54 512.01 T
(ax,10h) 164.45 512.01 T
(add) 141.54 490.37 T
(ax,20h) 164.45 490.37 T
(sto) 141.54 468.74 T
(sum,ax) 164.45 468.74 T
4 11.45 Q
(Machine language pr) 72.82 423.35 T
(ogram) 176.34 423.35 T
0 10.18 Q
(10111000 00000101 00000000 00000101 00010000 00000000) 81.56 400.01 T
(00000101 00100000 00000000 10100011 00000000 00000001) 81.57 388.56 T
425.45 292.26 814.9 796.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
448.36 349.53 791.99 750.43 11.45 RR
0.32 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
448.36 332.35 791.99 343.8 R
7 X
V
0 7.64 Q
0 X
(COMP102) 448.36 338.71 T
(Lecture 2) 605.65 338.71 T
-1.91 (12) 784.35 338.71 P
1 1 0 0 0 0 1 K
4 12.73 Q
1 1 0 0 0 0 1 K
(A Pr) 557.48 719.04 T
(ogrammer\325) 583.05 719.04 T
(s T) 644.07 719.04 T
(asks) 659.52 719.04 T
0 0 0 1 0 0 0 K
0 10.18 Q
0 0 0 1 0 0 0 K
(1.) 480.01 692.73 T
(WRITE THE PR) 505.63 692.73 T
(OGRAM \050SOFTW) 574.79 692.73 T
(ARE\051) 651.91 692.73 T
(Use the Editor to prepare a program \336le \050source code\051, e.g.:) 505.63 671.1 T
(#include <iostream.h>) 539.99 649.46 T
(v) 539.99 627.83 T
(oid main\050\051{) 544.88 627.83 T
(cout << "hello" << endl;) 562.9 606.19 T
(}) 539.99 584.55 T
(2.) 480.01 541.28 T
(COMPILE THE PR) 505.63 541.28 T
(OGRAM) 587.24 541.28 T
(Use the C++ compiler \050a piece of softw) 505.63 519.65 T
(are\051 to) 666.59 519.65 T
(generate e) 505.63 498.01 T
(x) 547.03 498.01 T
(ecutable code \050stored in a dif) 551.97 498.01 T
(ferent \336le\051) 669.61 498.01 T
(3.) 480.01 454.74 T
(R) 505.63 454.74 T
(UN THE PR) 512.01 454.74 T
(OGRAM) 563.64 454.74 T
(NO) 471.27 411.47 T
(TE:) 485.56 411.47 T
(V) 505.63 411.47 T
(isual C++ has an inte) 512.37 411.47 T
(grated en) 598.36 411.47 T
(vironment for these tasks.) 635.56 411.47 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 6
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Times-Roman
%%+ Palatino-Bold
%%+ Courier-Bold
%%+ Palatino-Roman
%%+ Times-Bold
%%EOF
