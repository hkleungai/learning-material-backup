%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.01 841.97 0 1 15 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 0 /NewCenturySchlbk-Italic FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Bold FMFONTDEFINE
6 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Shell Basics) 129.91 768.25 T
1 7.15 Q
(\245) 59.17 742.52 T
(Y) 67.22 742.52 T
(ou already know:) 71.54 742.52 T
1 6.26 Q
(\245) 67.22 729.26 T
(What the major kinds of shell are) 75.26 729.26 T
(\245) 67.22 716.3 T
(That the shell is a sort of command interpreter) 75.26 716.3 T
(\245) 67.22 703.34 T
(The basics of input and output redirection) 75.26 703.34 T
(\245) 67.22 690.39 T
(The basics of pipes) 75.26 690.39 T
(\245) 67.22 677.43 T
(The basics of \336lename completion) 75.26 677.43 T
1 7.15 Q
(\245) 59.17 661.19 T
(The rest of this introduction to shell basics covers:) 67.22 661.19 T
1 6.26 Q
(\245) 67.22 647.93 T
(What the shell is) 75.26 647.93 T
(, what it does and how it does it) 124.23 647.93 T
(\245) 67.22 634.98 T
(Standard input, standard output and standard error) 75.26 634.98 T
(\245) 67.22 622.02 T
(More on redirection) 75.26 622.02 T
(\245) 67.22 609.06 T
(What a \336lter is) 75.26 609.06 T
(, and more on pipes) 118.67 609.06 T
(\245) 67.22 596.1 T
(Bac) 75.26 596.1 T
(kground, foreground and job control) 85.99 596.1 T
(\245) 67.22 583.14 T
(F) 75.26 583.14 T
(inding information on and controlling processes) 79.37 583.14 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(The UNIX Shell\050s\051) 389.02 768.25 T
1 7.15 Q
(\245) 334.18 742.52 T
(What is the shell?) 342.22 742.52 T
1 6.26 Q
(\245) 342.22 729.26 T
(A process that provide an interactive interface between) 350.27 729.26 T
(applications and the UNIX kernel \050the core of the operating) 350.27 721.66 T
(system.\051) 350.27 714.07 T
(\245) 342.22 701.11 T
(Executes a program when you give it a command on the) 350.27 701.11 T
(command line \050current prompt\051.) 350.27 693.51 T
(\245) 342.22 680.55 T
(It\325) 350.27 680.55 T
(s also a programming language in its own right. W) 356.36 680.55 T
(e\325ll cover) 502.45 680.55 T
(shell programming later in the course) 350.27 672.96 T
(.) 459.52 672.96 T
1 7.15 Q
(\245) 334.18 656.72 T
(Basic syntax) 342.22 656.72 T
2 6.26 Q
(command) 342.22 644.37 T
1 F
( [-[) 370.49 644.37 T
2 F
(\337ags) 378.48 644.37 T
1 F
(]] [) 392.03 644.37 T
2 F
(arg) 400.02 644.37 T
1 F
(] [) 409.74 644.37 T
2 F
(arg) 415.65 644.37 T
1 F
(] \311) 425.38 644.37 T
3 F
(\277) 437.19 644.37 T
1 F
(\245) 342.22 631.41 T
(The name of the command is \336rst) 350.27 631.41 T
(\245) 342.22 618.45 T
(Flags are normally single letters that turn an option on or off) 350.27 618.45 T
(.) 526.96 618.45 T
(They can be combined or given separately:) 350.27 610.85 T
4 F
(% ls -dil) 350.27 599.47 T
(% ls -l -d -i) 350.27 590.98 T
1 F
(\245) 342.22 579.12 T
(Options are like \337ags) 350.27 579.12 T
(, except that they take a value) 411.76 579.12 T
(. The value) 499.13 579.12 T
(can usually be either given right after the option or separately:) 350.27 571.53 T
4 F
(% ypcat -d ug.cs.ust.hk passwd | sort -t:) 350.27 560.15 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Command options) 95.37 369.77 T
1 7.15 Q
(\245) 59.17 352.52 T
(Some commands support a \322) 67.22 352.52 T
0 F
(?) 160.57 352.52 T
1 F
(\323 \337ag that gives you one line) 163.75 352.52 T
-0.24 (help) 67.22 344.03 P
-0.24 (, or at least treat the \322) 81.39 344.03 P
0 F
-0.22 (?) 153.04 344.03 P
1 F
-0.24 (\323 as an unknown argument and) 156.21 344.03 P
(tell you the correct usage as an error message) 67.22 335.54 T
(.) 218.3 335.54 T
0 5.36 Q
(% \336le \322-?\323) 67.22 324.14 T
(\336le: unkno) 67.22 315.74 T
(wn option -?) 90.17 315.74 T
(usage: \336le [-c] [-f name\336le] [-m magic\336le] \336le...) 67.22 307.33 T
1 7.15 Q
(\245) 59.17 275.22 T
(Many commands require you to give all \337ags and options) 67.22 275.22 T
(before \336lename arguments) 67.22 266.73 T
(\245) 59.17 250.19 T
-0.14 (Spaces separate options) 67.22 250.19 P
-0.14 (. T) 145.81 250.19 P
-0.14 (o turn something with spaces in) 154.02 250.19 P
(it into a single argument, use quotes:) 67.22 241.7 T
0 6.26 Q
(% ypcat passwd | grep \322Cheng Kw) 67.22 229.69 T
(ok Sing\323) 154.23 229.69 T
1 F
(\245) 67.22 208.25 T
-0.15 (Double quotes and single quotes are a bit different. F) 75.26 208.25 P
-0.15 (or now) 227.08 208.25 P
-0.15 (, you) 245.61 208.25 P
(can use them interc) 75.26 200.65 T
(hangeably) 132.22 200.65 T
(.) 161.33 200.65 T
(\245) 67.22 187.69 T
(T) 75.26 187.69 T
(o escape a single c) 79.09 187.69 T
(haracter \050prevent it from being treated) 131.53 187.69 T
(specially\051 you can precede it with a bac) 75.26 180.1 T
(kslash:) 187.84 180.1 T
4 F
(% echo \322*\323) 75.26 168.72 T
(% echo \325*\325) 75.26 160.22 T
(% echo \134*) 75.26 151.73 T
(all work.) 75.26 143.24 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Executing a Command) 378.6 369.77 T
1 7.15 Q
(\245) 334.18 344.03 T
(How does the shell \336nd a command?) 342.22 344.03 T
1 6.26 Q
(\245) 342.22 330.78 T
-0.14 (The shell searc) 350.27 330.78 P
-0.14 (hes a list of directories for an executable \336le with) 393.4 330.78 P
(the same name) 350.27 323.18 T
(.) 394.07 323.18 T
(\245) 342.22 310.22 T
(The list of directories is stored in the) 350.27 310.22 T
0 F
(P) 458.36 310.22 T
(A) 461.27 310.22 T
(TH) 465.09 310.22 T
1 F
( variable for Bourne) 473.43 310.22 T
(shells and in the) 350.27 302.63 T
0 F
(path) 399.98 302.63 T
1 F
( arra) 410.75 302.63 T
(y for) 424.94 302.63 T
2 F
(csh) 439.76 302.63 T
1 F
( and family:) 449.14 302.63 T
4 F
($ PATH=/usr/local/bin:$PATH) 350.27 290.57 T
2 F
(sh, etc) 516 290.57 T
(.) 533.52 290.57 T
4 F
(% set path=\050/usr/local/bin $path\051) 350.27 281.1 T
2 F
(csh, tcsh) 510.83 281.1 T
1 F
(See the text for more details) 350.27 270.28 T
(.) 431.79 270.28 T
(\245) 342.22 257.33 T
(If there\325) 350.27 257.33 T
(s a matc) 373.04 257.33 T
(h in more than one directory) 397.1 257.33 T
(, the shell uses the) 478.81 257.33 T
(\336rst one it \336nds) 350.27 249.73 T
(.) 395.87 249.73 T
(\245) 342.22 236.77 T
(If you w) 350.27 236.77 T
(ant to run a command that\325) 373.44 236.77 T
(s not in one of these) 452.54 236.77 T
(directories) 350.27 229.17 T
(, you can give a pathname \050relative or absolute\051) 380.69 229.17 T
(instead:) 350.27 221.58 T
4 F
(% /usr/local/share/packages/khoros/khoros) 350.27 210.19 T
1 F
(\245) 342.22 198.34 T
(A few commands are built in to the shell. This varies from shell) 350.27 198.34 T
(to shell. The ec) 350.27 190.74 T
(ho command, for example) 393.56 190.74 T
(, is often a builtin, for) 467.48 190.74 T
(ef\336ciency) 350.27 183.15 T
(.) 376.35 183.15 T
(\245) 342.22 170.19 T
-0.29 (Y) 350.27 170.19 P
-0.29 (ou can \336nd out where the shell is getting a particular command) 354.04 170.19 P
-0.13 (using the \322whic) 350.27 162.59 P
-0.13 (h\323 command in any shell, or the \322type\323 command) 394.57 162.59 P
(in) 350.27 154.99 T
2 F
(bash) 357.8 154.99 T
1 F
( or) 371.47 154.99 T
2 F
(zsh) 380.85 154.99 T
1 F
(.) 390.35 154.99 T
4 F
($ type tail) 350.27 143.61 T
(tail is /usr/ucb/tail) 350.27 135.12 T
($ which head) 350.27 126.63 T
(/usr/ucb/head) 350.27 118.14 T
($ type echo) 350.27 109.64 T
(echo is a shell builtin) 350.27 101.15 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Executing a Command) 103.6 768.25 T
1 7.15 Q
(\245) 59.17 742.52 T
(The shell creates a new process) 67.22 742.52 T
1 6.26 Q
(\245) 67.22 729.26 T
(Once the shell has found the \336le containing the command, it) 75.26 729.26 T
(creates a) 75.26 721.66 T
2 F
(process) 102.84 721.66 T
1 F
( for it) 123.44 721.66 T
(\245) 67.22 708.71 T
(It does this by creating a copy of itself \321 brie\337y) 75.26 708.71 T
(, there are) 212.12 708.71 T
2 F
(two) 243.75 708.71 T
1 F
(shells running!) 75.26 701.11 T
(\245) 67.22 688.15 T
(It then load the command from the \336le onto the copy) 75.26 688.15 T
(, replacing) 226.14 688.15 T
(itself with the requested command) 75.26 680.55 T
(\245) 67.22 667.6 T
-0.18 (F) 75.26 667.6 P
-0.18 (or a pipeline \050more than one command connected by pipes\051, the) 79.09 667.6 P
(shell does this for) 75.26 660 T
2 F
(eac) 127.86 660 T
(h) 136.9 660 T
1 F
( command in the pipe) 140.72 660 T
(, handling the) 202.94 660 T
(plumbing at the same time) 75.26 652.4 T
1 7.15 Q
(\245) 59.17 636.17 T
(Normally) 67.22 636.17 T
(, the shell then w) 97.58 636.17 T
(aits for the command to \336nish) 154.52 636.17 T
(running) 67.22 627.68 T
(\245) 59.17 611.14 T
(Once the command \050or pipeline\051 \336nishes) 67.22 611.14 T
(, the shell \322w) 199.84 611.14 T
(akes) 242.49 611.14 T
(up\323, prints a prompt and starts handling input again) 67.22 602.65 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Standard input, output and error) 352.58 768.25 T
1 8.04 Q
(\245) 334.18 741.92 T
(Commands typically take input to process and) 342.22 741.92 T
(produce some result or output:) 342.22 732.09 T
0 6.26 Q
(% sort names) 342.22 718.88 T
(Abig) 342.22 709.68 T
(ail) 354.7 709.68 T
(Jef) 342.22 700.47 T
(fery) 349.36 700.47 T
(Jenn) 342.22 691.27 T
(y) 353.6 691.27 T
(K) 342.22 682.06 T
(en) 346.58 682.06 T
(Ralph) 342.22 672.86 T
1 7.15 Q
(\245) 334.18 657.35 T
(Many commands ha) 342.22 657.35 T
(ve an) 408.62 657.35 T
2 F
(optional) 428.35 657.35 T
1 F
( \336lename argument \050or) 455.36 657.35 T
(arguments\051. Suc) 342.22 648.86 T
(h commands read from \322standard input\323) 396.32 648.86 T
(\050abbreviated stdin\051. Almost all commands write to) 342.22 640.37 T
(\322standard output\323 \050abbreviated stdout\051.) 342.22 631.88 T
1 8.04 Q
(\245) 334.18 613.85 T
(Suc) 342.22 613.85 T
(h commands are \050usually\051 oblivious to where) 355.72 613.85 T
(stdin comes from. These are all equivalent:) 342.22 604.02 T
0 5.36 Q
(% sort) 342.22 591.42 T
(Abig) 342.22 583.92 T
(ail) 352.92 583.92 T
(Ralph) 342.22 576.41 T
(Jef) 342.22 568.9 T
(fery) 348.34 568.9 T
(Jenn) 342.22 561.4 T
(y) 351.97 561.4 T
(K) 342.22 553.89 T
(en) 345.96 553.89 T
(^D) 342.22 546.38 T
(Abig) 342.22 538.87 T
(ail) 352.92 538.87 T
(Jef) 342.22 531.37 T
(fery) 348.34 531.37 T
(Jenn) 342.22 523.86 T
(y) 351.97 523.86 T
(K) 342.22 516.35 T
(en) 345.96 516.35 T
(Ralph) 342.22 508.85 T
(% sort < names) 342.22 501.34 T
(% cat names | sort) 342.22 493.83 T
(In all three cases, sort is reading from stdin) 342.22 486.32 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Standard input) 121.87 369.77 T
1 7.15 Q
(\245) 59.17 344.03 T
(The default for stdin, stdout and stderr are the \322terminal\323.) 67.22 344.03 T
1 6.26 Q
(\245) 67.22 330.78 T
(Every time you login, or run a shell in a terminal window) 75.26 330.78 T
(, you) 240.4 330.78 T
(are \322connected\323 to the computer on a particular terminal:) 75.26 323.18 T
4 F
(% who) 75.26 311.8 T
(scott console) 75.26 303.31 T
(Sep 12 15:39) 143.63 303.31 T
(scott ttyp2) 75.26 294.81 T
(Sep) 143.63 294.81 T
( 12) 154.89 294.81 T
( 15:55) 166.15 294.81 T
(scott) 75.26 286.32 T
( ttyp3) 95.37 286.32 T
(Sep 12 15:57) 143.63 286.32 T
1 F
(\245) 67.22 265.97 T
(These devices \050) 75.26 265.97 T
2 F
(ttyp2) 118.82 265.97 T
1 F
(, etc) 133.42 265.97 T
(.\051 are actually \336les in the directory) 145.13 265.97 T
(\322) 75.26 258.38 T
0 F
(/de) 77.69 258.38 T
(v) 85.18 258.38 T
1 F
(\323. So) 88.31 258.38 T
(, if you\325re logged in on) 101.18 258.38 T
2 F
(ttyp2) 166.18 258.38 T
1 F
(, this works just \336ne:) 180.78 258.38 T
4 F
(% date > /dev/ttyp2) 75.26 247 T
(Thu Sep 15 10:41:45 HKT 1994) 75.26 238.5 T
1 F
(\245) 67.22 226.65 T
(In fact, you can redirect stdout to a) 75.26 226.65 T
2 F
(different) 178.37 226.65 T
1 F
( tty) 202.8 226.65 T
(, if you ha) 211.99 226.65 T
(ve) 240.54 226.65 T
(permission.) 75.26 219.05 T
(\245) 67.22 206.09 T
(Y) 75.26 206.09 T
(ou can \336nd out whic) 79.04 206.09 T
(h terminal a particular shell is connected) 137.04 206.09 T
(to using the \322) 75.26 198.5 T
2 F
(tty) 113.73 198.5 T
1 F
(\323 command.) 121.26 198.5 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Standard error) 397.49 369.77 T
1 7.15 Q
(\245) 334.18 344.03 T
(Error and diagnostic messages are written to standard) 342.22 344.03 T
(error \050stderr\051) 342.22 335.54 T
1 6.26 Q
(\245) 342.22 322.29 T
-0.25 (Stderr and stdout are separate) 350.27 322.29 P
-0.25 (, even though both normally go to) 438.27 322.29 P
-0.16 (the terminal. Redirecting stdout does not redirect stderr) 350.27 314.69 P
-0.16 (. This is) 511.06 314.69 P
(so that you\325ll see error messages:) 350.27 307.09 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
4 F
1 1 0 0 0 0 1 K
(% cat zorkon > copy) 350.27 287.22 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cat: cannot open zorkon) 350.27 278.73 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(\245) 342.22 266.87 T
(Suppose \336le x exists) 350.27 266.87 T
(, but not zorkon:) 408.39 266.87 T
1 1 0 0 0 0 1 K
4 F
1 1 0 0 0 0 1 K
(% cat x zorkon) 350.27 255.49 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(This is file x.) 350.27 247 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cat: cannot open zorkon) 350.27 238.51 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(% cat x zorkon > copy) 350.27 230.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(cat: cannot open zorkon) 350.27 221.52 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(Otherwise) 350.27 211.01 T
(, the error message would be put into the output \336le!) 380.04 211.01 T
(\245) 342.22 198.05 T
(Y) 350.27 198.05 T
(ou can redirect stderr in a Bourne shell using \322) 354.04 198.05 T
0 F
(2>) 489.47 198.05 T
1 F
(\323:) 496.13 198.05 T
1 1 0 0 0 0 1 K
4 F
1 1 0 0 0 0 1 K
($ ypcat passwd |) 350.27 186.67 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(>) 350.27 178.17 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
(time) 357.77 178.17 T
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
( sort > pass.sort 2> sort.time) 372.79 178.17 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
1 F
0 1 1 0 1 0 0 K
(time) 350.27 167.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( reports the time spent on a command on) 363.36 167.66 T
5 F
(stderr) 483.39 167.66 T
1 F
(.) 502.82 167.66 T
(Y) 350.27 156.04 T
(ou can\325t redirect stderr in csh without also redirecting stdout.) 354.04 156.04 T
(The \3222\323 above means \322\336le descriptor number two\323. Stdin is 0,) 350.27 148.44 T
(stdout is 1 and stderr is 2 in UNIX.) 350.27 140.85 T
(\245) 342.22 127.89 T
(If you w) 350.27 127.89 T
(ant to get) 373.44 127.89 T
2 F
(reall) 402.87 127.89 T
(y) 416.12 127.89 T
1 F
( fancy) 419.25 127.89 T
(, you can put stderr and stdout) 435.73 127.89 T
(together for redirection using ") 350.27 120.29 T
0 F
(2>&1) 439.23 120.29 T
1 F
(". This sa) 453.88 120.29 T
(ys \322put stderr) 480.71 120.29 T
(wherever stdout is going\323:) 350.27 112.7 T
4 F
($ ypcat passwd |) 350.27 101.31 T
(> time sort 2>&1 | less) 350.27 92.82 T
1 F
(This will write the output and error streams to the pipe!) 350.27 73.81 T
7 X
90 450 10.05 8.04 476.95 289.19 G
0.22 H
2 Z
0 X
90 450 10.05 8.04 476.95 289.19 A
494.28 295.64 493.86 296.9 498.68 297.11 494.7 294.38 4 Y
0 Z
N
494.28 295.64 493.86 296.9 498.68 297.11 494.7 294.38 4 Y
V
487 293.22 494.18 295.61 2 L
2 Z
N
494.28 282.75 494.7 284.01 498.68 281.28 493.86 281.48 4 Y
0 Z
N
494.28 282.75 494.7 284.01 498.68 281.28 493.86 281.48 4 Y
V
487 285.17 494.18 282.78 2 L
2 Z
N
(stdout) 500.87 296.65 T
0 F
(stderr) 500.91 276.88 T
1 F
(cat) 474.29 288.6 T
461.85 289.19 461.85 290.52 466.49 289.19 461.85 287.86 4 Y
0 Z
N
461.85 289.19 461.85 290.52 466.49 289.19 461.85 287.86 4 Y
V
450.81 289.19 461.74 289.19 2 L
2 Z
N
(stdin) 448.16 292.63 T
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.01 841.97 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 432.13 293 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 448.81 T
39.35 458.44 280.65 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Pipes) 146.49 768.25 T
1 7.15 Q
(\245) 59.17 742.52 T
(A pipe is a w) 67.22 742.52 T
(a) 109.34 742.52 T
(y to join stdout of one process to stdin of the) 113.24 742.52 T
(next:) 67.22 734.03 T
0 6.26 Q
(% who > tmp) 67.22 722.01 T
(% sort < tmp) 67.22 712.8 T
(% rm tmp) 67.22 703.6 T
(is the same as:) 67.22 694.39 T
(% who | sort) 67.22 685.19 T
1 7.15 Q
(\245) 59.17 669.68 T
(Pipes can be arbitrarily long:) 67.22 669.68 T
0 6.26 Q
(% who | sort | head -1 | mail g) 67.22 657.66 T
(ankw) 141.66 657.66 T
1 7.15 Q
(\245) 59.17 642.15 T
-0.24 (A) 67.22 642.15 P
2 F
-0.24 (\336lter) 74.12 642.15 P
1 F
-0.24 ( is a command that can read from stdin and write to) 89.74 642.15 P
(stdout.) 67.22 633.66 T
1 6.26 Q
(\245) 67.22 620.41 T
(Examples of \336lters inc) 75.26 620.41 T
(lude) 139.75 620.41 T
2 F
(sort) 154 620.41 T
1 F
(,) 164.88 620.41 T
2 F
(head) 168.36 620.41 T
1 F
(,) 182.38 620.41 T
2 F
(tail) 185.85 620.41 T
1 F
(, and) 195.81 620.41 T
2 F
(cat) 211.92 620.41 T
1 F
(.) 220.49 620.41 T
(\245) 67.22 607.45 T
-0.01 (Programs that do not read from stdin are called sources) 75.26 607.45 P
-0.01 (, e) 236.03 607.45 P
-0.01 (.g) 242.51 607.45 P
-0.01 (.,) 247.45 607.45 P
2 F
-0.01 (ls) 252.66 607.45 P
1 F
-0.01 (,) 257.36 607.45 P
2 F
(who) 75.26 599.85 T
1 F
(, and) 86.97 599.85 T
2 F
(ps) 103.08 599.85 T
1 F
(.) 109.29 599.85 T
(\245) 67.22 586.89 T
(Programs that do not write to stdout are called sinks) 75.26 586.89 T
(, e) 227.82 586.89 T
(.g) 234.31 586.89 T
(.,) 239.26 586.89 T
2 F
(lpr) 244.47 586.89 T
1 F
(,) 252.3 586.89 T
2 F
(mail) 75.26 579.3 T
1 F
(.) 88.58 579.3 T
1 7.15 Q
(\245) 59.17 563.06 T
(A special \336lter called) 67.22 563.06 T
2 F
(tee) 138.46 563.06 T
1 F
( acts like a T joint in plumbing) 147.32 563.06 T
0 6.26 Q
(% who | sort | tee sortedwho | wc -l) 67.22 551.04 T
(In this e) 67.22 532.63 T
(xample, the output of) 87.28 532.63 T
6 F
(sort) 142.37 532.63 T
0 F
( is placed in \336le \322sortedwho\323 and piped to) 152.1 532.63 T
6 F
(wc -l) 67.22 525.66 T
0 F
(.) 79.56 525.66 T
302.01 432.13 568.01 808.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 448.81 T
314.36 458.44 555.66 796.26 R
0.11 H
0 Z
N
1 10.72 Q
(Bac) 351.33 768.25 T
(kground processing and \322jobs\323) 369.73 768.25 T
1 7.15 Q
(\245) 334.18 742.52 T
(A simple command or pipeline can be put into the) 342.22 742.52 T
(bac) 342.22 734.03 T
(kground by following it with the \322) 353.3 734.03 T
0 6.26 Q
(&) 464.27 734.03 T
1 7.15 Q
(\323 c) 469.13 734.03 T
(haracter:) 477.03 734.03 T
0 6.26 Q
(% ypcat passwd | sort > passwd.sort&) 342.22 722.01 T
([1] 6235) 342.22 712.8 T
(%) 342.22 703.6 T
1 F
(\245) 342.22 691.37 T
(The shell will print the process ID \050PID\051 of the process) 350.27 691.37 T
(, and a) 507.32 691.37 T
(\322job number\323 \0501, in this case\051.) 350.27 683.77 T
(\245) 342.22 670.81 T
(In some shells) 350.27 670.81 T
(, you\325ll be noti\336ed when the job completes:) 391.36 670.81 T
4 5.36 Q
(% ypcat passwd | sort > passwd.sort&) 350.27 659.99 T
([1] 6235) 350.27 653.1 T
(%) 350.27 646.2 T
([1] + done ypcat passwd | sort > passwd.sort) 350.27 639.31 T
(%) 350.27 632.41 T
1 7.15 Q
(\245) 334.18 617.86 T
(Y) 342.22 617.86 T
(ou can put a job into the bac) 346.54 617.86 T
(kground by typing \322CTRL-Z\323) 439.59 617.86 T
0 5.36 Q
(% ypcat passwd | sort > passwd.sort) 342.22 606.46 T
(^Z) 342.22 598.95 T
(zsh: suspended ypcat passwd | sort > passwd.sort) 342.22 591.44 T
(%) 342.22 583.93 T
1 6.26 Q
(\245) 342.22 572.34 T
-0.27 (The job is suspended- not running-until you either place it in the) 350.27 572.34 P
(bac) 350.27 564.75 T
(kground using bg:) 359.96 564.75 T
4 5.36 Q
(% bg) 350.27 553.93 T
([1] + continued ypcat passwd|sort>passwd.sort&) 350.27 547.03 T
4 6.26 Q
(%) 350.27 539.13 T
(or back into the foreground uysing fg:) 350.27 530.64 T
4 5.36 Q
(% fg) 350.27 522.7 T
([1] + continued ypcat passwd|sort>passwd.sort) 350.27 515.81 T
1 7.15 Q
(\245) 334.18 493.76 T
(The) 342.22 493.76 T
2 6.26 Q
(jobs) 356.92 493.76 T
1 7.15 Q
( command tells you what jobs are running) 368.28 493.76 T
27 33.64 293 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 137.43 50.33 T
39.35 59.96 280.65 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(Bac) 76.33 369.77 T
(kground processing and \322jobs\323) 94.72 369.77 T
1 7.15 Q
(\245) 59.17 344.03 T
(Y) 67.22 344.03 T
(ou can stop a running process with the \322kill\323 command:) 71.54 344.03 T
0 6.26 Q
(% ypcat passwd | sort > passwd.sort &) 67.22 332.02 T
([1] 6235) 67.22 322.81 T
(% kill %1) 67.22 313.61 T
([1] + terminated ypcat passwd | sort > passwd.sort) 67.22 304.4 T
(The notation \322%1\323 refers to \322job number 1\323. Y) 67.22 285.99 T
(ou can also use a PID.) 184.15 285.99 T
1 7.15 Q
(\245) 59.17 261.28 T
(The) 67.22 261.28 T
2 F
(ps) 81.92 261.28 T
1 F
( command is the main w) 89.2 261.28 T
(a) 169.72 261.28 T
(y to \336nd out about) 173.62 261.28 T
(processes) 67.22 252.79 T
1 6.26 Q
(\245) 67.22 239.53 T
-0.03 (I mostly use \322) 75.26 239.53 P
0 F
-0.03 (ps x) 114.55 239.53 P
1 F
-0.03 (\323 \050to see what jobs I ha) 124.78 239.53 P
-0.03 (ve running\051 and \322) 189.98 239.53 P
0 F
-0.03 (ps aux |) 240.38 239.53 P
(head) 75.26 231.93 T
1 F
(\323 \050to see what the biggest jobs are\051) 87.07 231.93 T
(\245) 67.22 218.97 T
(The ps command has a lot of options) 75.26 218.97 T
(. Read the man page) 180.2 218.97 T
(.) 239.3 218.97 T
1 7.15 Q
(\245) 59.17 202.74 T
(Note that if you put something into the bac) 67.22 202.74 T
(kground, you) 209.65 202.74 T
(ha) 67.22 194.25 T
(ve to redirect stdout, or the output will appear on your) 75.49 194.25 T
(screen anyw) 67.22 185.76 T
(a) 108 185.76 T
(y!) 111.9 185.76 T
302.01 33.64 568.01 409.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.58 Q
0 X
0 0 0 1 0 0 0 K
(COMP111 Lecture Notes) 412.43 50.33 T
314.36 59.96 555.66 397.78 R
0.11 H
0 Z
N
1 10.72 Q
(P) 391.35 369.77 T
(attern matc) 398.1 369.77 T
(hing) 456.42 369.77 T
1 7.15 Q
(\245) 334.18 344.03 T
(Y) 342.22 344.03 T
(ou already know about \322*\323 and \322?\323) 346.54 344.03 T
1 6.26 Q
(% ypcat -d ust.hk passwd >passwd.ust) 342.22 328.1 T
(% ypcat -d ug) 342.22 312.46 T
(.cs) 380.99 312.46 T
(.ust.hk passwd > passwd.ug) 388.25 312.46 T
(% sort passwd* | uniq | wc -l) 342.22 296.82 T
(and) 342.22 281.18 T
(% ls -ld /student/??/??_abc) 342.22 265.54 T
(drwx--x--x 10 bi_abc 1024 Sep 14 10:01 /student/bi/bi_abc) 342.22 249.9 T
(drwx------ 6 ec_abc 512 J) 342.22 234.26 T
(ul 21 23:04 /student/ec/ec_abc) 412.28 234.26 T
1 7.15 Q
(\245) 334.18 218.02 T
(The notation \322[abcd]\323 matc) 342.22 218.02 T
(hes any single one of the) 430.36 218.02 T
(enc) 342.22 209.53 T
(losed c) 353.29 209.53 T
(haracters) 375.22 209.53 T
(.) 406.55 209.53 T
0 6.26 Q
(% ls *.[ch] | wc -l) 342.22 197.51 T
(22) 342.22 188.31 T
(tells me that there are 22 \336les in the current directory that end in \322.c\323 or \322.h\323.) 342.22 169.9 T
1 7.15 Q
(\245) 334.18 154.39 T
(F) 342.22 154.39 T
(inally) 346.92 154.39 T
(, many shells allow you to give a list of strings in) 364.96 154.39 T
(curly brac) 342.22 145.9 T
(kets) 375.27 145.9 T
(, comma separated:) 388.99 145.9 T
0 6.26 Q
(% ls -l tcs.{1,ps}) 342.22 133.88 T
(-rw-rw-r) 342.22 124.68 T
(-- 1 scott 2381 May 26 1993 tcs.1) 363.63 124.68 T
(-rw-rw-r) 342.22 115.47 T
(-- 1 scott 15058 May 26 1993 tcs.ps) 363.63 115.47 T
FMENDPAGE
%%EndPage: "mini" 3
%%Trailer
%%BoundingBox: 0 0 595.01 841.97
%%PageOrder: Descend
%%Pages: 3
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Italic
%%+ Symbol
%%+ Courier
%%+ NewCenturySchlbk-Bold
%%+ Times-Italic
%%EOF
