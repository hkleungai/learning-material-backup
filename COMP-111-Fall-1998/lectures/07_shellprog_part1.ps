%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 14 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /NewCenturySchlbk-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(1) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(The UNIX Shells) 202.74 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Main kinds of shells \050but you wouldn\325t) 90.01 694.62 T
3 F
(believe) 377.16 694.62 T
1 F
( some of the) 426.33 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(strange things that are out there on the net\311\051) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 645.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Bourne shell and kin) 108.01 645.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sh) 126.01 619.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Bourne shell; \322original\323 UNIX shell written in) 216.01 619.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C \210 la pseudo Algol \050!\051) 225.01 602.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ksh) 126.01 583.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(K) 216.01 583.96 T
(orn shell; job history) 227.04 583.96 T
(, functions) 358.04 583.96 T
(, arithmetic) 425.35 583.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bash) 126.01 564.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(GNU Bourne\320again shell with features from) 216.01 564.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ksh and csh) 225.01 547.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(zsh) 126.01 528.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Z shell; superset of all of the rest) 216.01 528.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 499.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(C shell and kin) 108.01 499.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(csh) 126.01 473.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C shell, written by Bill J) 216.01 473.96 T
(oy \050who else?\051 at UCB) 374.36 473.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tcsh) 126.01 454.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C shell with command line editting) 216.01 454.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 425.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(rc) 108.01 425.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (Written as part of Plan 9 from Bell Labs) 216.01 399.96 P
-0.34 (, whic) 473.77 399.96 P
-0.34 (h) 511.18 399.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is a new distributed operating system) 225.01 382.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(intended to replace UNIX. A UNIX version of) 225.01 365.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(rc is a) 225.01 348.96 T
(vailable from the net.) 263.76 348.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(2) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shells and Processes) 182.75 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Switc) 90.01 694.62 T
(hing shells:) 130.79 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(T) 108.01 664.96 T
(o try it out, just type the name) 116.58 664.96 T
(.) 313.91 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 635.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(T) 108.01 635.96 T
(o replace your shell for) 116.58 635.96 T
3 F
(this session onl) 267.72 635.96 T
(y) 365.02 635.96 T
1 F
(, type \322) 370.27 635.96 T
4 F
(exec name) 415.39 635.96 T
1 F
(\323) 490.99 635.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 606.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.57 (T) 108.01 606.96 P
-0.57 (o switc) 116.58 606.96 P
-0.57 (h to a different shell whenever you login, use) 160.24 606.96 P
4 F
-1.24 (chsh) 449.35 606.96 P
1 F
-0.57 ( \050read) 482.95 606.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the man page\051) 108.01 589.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 560.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Shells are almost alw) 108.01 560.96 T
(a) 246.76 560.96 T
(ys in /bin) 254.41 560.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 524.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(A shell can be used in one of two w) 90.01 524.62 T
(a) 346.65 524.62 T
(ys:) 355.39 524.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 494.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(A) 108.01 494.96 T
3 F
(command interpreter) 122.01 494.96 T
1 F
(, used interactively) 256.16 494.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 465.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(A) 108.01 465.96 T
3 F
(programming language) 122.01 465.96 T
1 F
(, to write shell scripts) 273.39 465.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(3) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(The Shell as a Command Interpreter) 92.96 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Interpreting commands) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Processes) 108.01 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 638.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(A process is the execution of a UNIX command, e) 126.01 638.96 T
(.g) 443.11 638.96 T
(. logging) 454.17 638.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.64 (in, running a utility on the command line) 126.01 621.96 P
-0.64 (, or executing a shell) 389.09 621.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(script.) 126.01 604.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 578.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Processes are hierarc) 126.01 578.96 T
(hical, something like the UNIX \336le) 263.31 578.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(system. There is a root process) 126.01 561.96 T
(, and every process has a) 324.26 561.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent.) 126.01 544.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 518.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.46 (Y) 126.01 518.96 P
-0.46 (ou can use the) 134.47 518.96 P
3 F
-0.46 (ps) 229.33 518.96 P
1 F
-0.46 ( command to \336nd out about processes \050read) 243.59 518.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the manual\051.) 126.01 501.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 475.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Every process has a unique id, called the) 126.01 475.96 T
3 F
(pid) 393.59 475.96 T
1 F
( \050process id\051,) 414.84 475.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(whic) 126.01 458.96 T
(h is analogous to an inode number) 155.98 458.96 T
(.) 376.81 458.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 429.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Creating a new process) 108.01 429.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 403.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(Every) 126.01 403.96 T
1 F
( process must be explicitly created by some other) 162.82 403.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(process using the) 126.01 386.96 T
3 F
(f) 241.64 386.96 T
(or) 246.16 386.96 T
(k) 259.12 386.96 T
1 F
( system call.) 266.91 386.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 360.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(The process executing the system call is the parent, and the) 126.01 360.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(new process is the c) 126.01 343.96 T
(hild.) 253.47 343.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 317.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(By default, the c) 126.01 317.96 T
(hild and the parent run in parallel) 232.21 317.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thereafter) 126.01 300.96 T
(.) 189.93 300.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 108.01 274.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(The parent ma) 126.01 274.96 T
(y) 221.81 274.96 T
3 F
(c) 233.22 274.96 T
(hoose) 239.19 274.96 T
1 F
( to w) 274.17 274.96 T
(ait for the c) 305.04 274.96 T
(hild to \336nish before) 379.35 274.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(proceeding) 126.01 257.96 T
(.) 195.65 257.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(4) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shells and Processes) 182.75 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Creating processes from the shell) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(The most basic job of the shell is to create c) 108.01 664.96 T
(hild processes based) 387.44 664.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on input from the user) 108.01 647.96 T
(, and to w) 252.31 647.96 T
(ait until they \336nish executing) 315.34 647.96 T
(.) 506.86 647.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 618.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(When you run a job in the bac) 108.01 618.96 T
(kground with \322&\323, this instructs) 301.85 618.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the shell not to w) 108.01 601.96 T
(ait for the c) 219.52 601.96 T
(hild process to die before) 293.83 601.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(proceeding) 108.01 584.96 T
(.) 177.65 584.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 555.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(The) 108.01 555.96 T
3 F
(fg) 136.79 555.96 T
1 F
( command instructs the shell to w) 148.97 555.96 T
(ait for a speci\336c c) 367.56 555.96 T
(hild) 479.46 555.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(process to die \050\336nish\051 before proceeding) 108.01 538.96 T
(.) 361.97 538.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 502.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Commands that) 90.01 502.62 T
3 F
(don\325t) 213.29 502.62 T
1 F
( create a new process) 249.74 502.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 472.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Some commands are performed directly by the shell \050depending) 108.01 472.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.54 (on the shell\051 because there\325) 108.01 455.96 P
-0.54 (s no other w) 281.02 455.96 P
-0.54 (a) 357.96 455.96 P
-0.54 (y to do so) 365.61 455.96 P
-0.54 (. These inc) 423.89 455.96 P
-0.54 (lude) 491.94 455.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(cd) 108.01 438.96 T
1 F
(,) 122.78 438.96 T
3 F
(pwd) 130.56 438.96 T
1 F
(,) 158.05 438.96 T
3 F
(read) 165.83 438.96 T
1 F
(,) 194.85 438.96 T
3 F
(export) 202.64 438.96 T
1 F
(, etc) 242.03 438.96 T
(. Read the manual page) 268.23 438.96 T
(.) 421.23 438.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 409.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Some are performed directly for ef\336ciency) 108.01 409.96 T
(, like) 375.86 409.96 T
3 F
(ec) 411.66 409.96 T
(ho) 423.84 409.96 T
1 F
( in the) 439.39 409.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Bourne shell.) 108.01 392.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(5) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Combining Commands) 171.19 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 18 Q
(Pipelines) 259.31 693.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(One \322command line\323 is a) 72.01 635.96 T
3 F
(pipeline) 234.34 635.96 T
1 F
(. That is) 285.13 635.96 T
(, a sequence of) 338.47 635.96 T
3 F
(processes) 435.97 635.96 T
1 F
(,) 494.17 635.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(connected end to end using) 72.01 618.96 T
3 F
(pipes) 250.64 618.96 T
(.) 283.1 618.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 582.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(A pipe is a construct provided by the UNIX operating) 90.01 582.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(system. It provides two \322\336le descriptors\323 suc) 90.01 563.62 T
(h that) 416.12 563.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(whatever is written on the \336rst \336le descriptor can then be) 90.01 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(read from the second \336le descriptor) 90.01 525.62 T
(.) 349.13 525.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 488.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(When you type a pipeline) 90.01 488.62 T
(, e) 277.29 488.62 T
(.g) 293.9 488.62 T
(.:) 306.54 488.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% who | a) 90.01 461.73 T
(wk \325{print $1}\325 | sort | uniq -c) 145.09 461.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(the shell does the following:) 90.01 428.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 399.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Create a pipe with the) 108.01 399.36 T
3 F
(pipe) 256.59 399.36 T
1 F
( system call) 283.54 399.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 370.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Create the) 108.01 370.36 T
3 F
(who) 180.35 370.36 T
1 F
( process) 206.79 370.36 T
(, using the) 257.77 370.36 T
3 F
(f) 329.85 370.36 T
(or) 334.38 370.36 T
(k) 347.34 370.36 T
1 F
( and) 355.12 370.36 T
3 F
(exec) 387.28 370.36 T
1 F
( system calls) 412.93 370.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 341.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Reconnect the output of) 108.01 341.36 T
3 F
(who) 265.37 341.36 T
1 F
( to the input end of the pipe) 291.82 341.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 312.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Create the) 108.01 312.36 T
3 F
(awk) 180.35 312.36 T
1 F
( process) 207.06 312.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 283.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Connect the) 108.01 283.36 T
3 F
(output) 189.67 283.36 T
1 F
( end of the pipe to stdin of the a) 231.67 283.36 T
(wk process) 436.11 283.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.54 (and so on, for eac) 90.01 248.36 P
-0.54 (h of the four processes and three pipe connections) 199.5 248.36 P
-0.54 (.) 516.04 248.36 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In other words) 90.01 231.36 T
(, the shell constructs a pipeline \322by hand\323 for you,) 184.54 231.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and provides a convenient syntax for you to use to do so) 90.01 214.36 T
(.) 449.38 214.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(6) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Combining Commands) 171.19 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Multiple pipelines can be input on one command line by) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(separating them with semicolons:) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% date; sort my\336le -o my\336le; date) 90.01 648.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 614.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Commands can be grouped together using parentheses) 90.01 614.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 577.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(There are two reasons to group commands:) 90.01 577.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 547.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(T) 108.01 547.36 T
(o create a \322single command\323 out of a group of commands for) 116.58 547.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(semantic or syntactic reasons:) 108.01 530.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(% {uptime; date} > load) 90.01 504.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 476.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(T) 108.01 476.76 T
(o run a set of commands \050or pipelines\051 in their own subshell,) 116.58 476.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 108.01 459.76 T
(.g) 114.76 459.76 T
(. to limit the effect of a) 125.82 459.76 T
3 F
(cd) 275.95 459.76 T
1 F
( command:) 290.72 459.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(% \050cd ~/lib;ls | wc -l\051; ls | wc -l) 90.01 433.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(has the effect of counting the \336les in) 108.01 409.16 T
0 F
(~/lib) 346.28 409.16 T
1 F
( and then counting the) 372.53 409.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336les in the current directory) 108.01 392.16 T
(.) 288.5 392.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 355.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Commands that are grouped function as a single) 90.01 355.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\322command\323. F) 90.01 336.82 T
(or example) 192.55 336.82 T
(, the shell w) 273.75 336.82 T
(aits for the) 362.97 336.82 T
3 F
(group) 448.31 336.82 T
1 F
( to) 490.97 336.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336nish before executing the next command from the user:) 90.01 317.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% \050cd ~/src/glorp; mak) 90.01 290.93 T
(e install\051; glorp) 219.15 290.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(7) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Combining Commands) 171.19 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 18 Q
(Running Commands Conditionally) 153.31 693.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 634.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The shell also allows you to execute a command) 90.01 634.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(conditionall) 90.01 615.62 T
(y) 178.41 615.62 T
1 F
(, depending on whether the last command) 184.41 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(completed with no errors) 90.01 596.62 T
(, using the \322) 273.9 596.62 T
4 F
(&&) 362.51 596.62 T
1 F
(\323 construct) 381.71 596.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% mak) 90.01 569.73 T
(e home) 129.14 569.73 T
(w) 169.61 569.73 T
(ork2.ps && ghostvie) 179.58 569.73 T
(w home) 297.07 569.73 T
(w) 341.44 569.73 T
(ork2.ps) 351.4 569.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(will run ghostview only if the) 90.01 536.36 T
3 F
(make) 283.18 536.36 T
1 F
( command succeeds) 317.66 536.36 T
(.) 443.57 536.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 500.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Similarly) 90.01 500.02 T
(, the \322) 157.07 500.02 T
4 F
(||) 200.63 500.02 T
1 F
(\323 construct runs a command only if the) 219.83 500.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(previous command) 90.01 481.02 T
3 F
(failed) 233.42 481.02 T
1 F
(:) 275.47 481.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% \050who | grep -s -f ~/etc/friends\051 ||) 90.01 454.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(> echo \325Ev) 90.01 433.53 T
(erybody\325) 151.34 433.53 T
(s gone!\325) 201.11 433.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 398.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Both constructs are useful when using the shell as a) 90.01 398.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(command interpreter) 90.01 379.82 T
(, but they are especially useful for) 246.03 379.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(writing shell scripts) 90.01 360.82 T
(.) 237.47 360.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(8) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shell Scripts) 226.75 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(A shell script is just a \336le containing shell commands) 72.01 695.96 T
(, but with a few) 415.99 695.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(extras) 72.01 678.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 642.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The \336rst line of a shell script should be a comment of the) 90.01 642.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(form:) 90.01 623.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(#!/bin/sh) 90.01 596.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(for a Bourne shell script, or:) 90.01 563.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(#!/bin/csh) 90.01 537.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(for a C shell script. The most common shell scripts are one or the) 90.01 503.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(other of these) 90.01 486.76 T
(, since) 177.9 486.76 T
3 F
(all) 222.24 486.76 T
1 F
( UNIXes ha) 239.6 486.76 T
(ve both. Most of the really nice) 315.44 486.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(features of the other shells are for interactive use anyw) 90.01 469.76 T
(a) 447.81 469.76 T
(y) 455.45 469.76 T
(.) 461.22 469.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 433.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(A shell script \050sometimes called a \322shell \336le\323\051 must be) 90.01 433.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(readable and executable\321not just executable) 90.01 414.42 T
(. This is) 424.59 414.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(because a shell program is run by a shell, whic) 90.01 395.42 T
(h has to be) 434.84 395.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(able to read it to interpret it.) 90.01 376.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 339.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(As with any command, a shell script has to be \322in your) 90.01 339.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(path\323 to be executed. Y) 90.01 320.42 T
(ou must either:) 258.22 320.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 290.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Ha) 108.01 290.76 T
(ve the directory that the shell script is in as part of your) 127.32 290.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(P) 108.01 273.76 T
(A) 116.65 273.76 T
(TH) 126.08 273.76 T
1 F
( variable \050) 147.34 273.76 T
3 F
(path) 212.69 273.76 T
1 F
( for) 242.24 273.76 T
3 F
(csh) 267.9 273.76 T
1 F
(\051, or) 288.89 273.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 244.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.68 (Y) 108.01 244.76 P
-0.68 (ou must give a complete \050relative or absolute\051 pathname for the) 116.47 244.76 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(command name to the shell:) 108.01 227.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(% ~/scripts/friends) 90.01 201.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.11 (If \322.) 108.01 177.16 P
-0.11 (\323 is not in your P) 130.98 177.16 P
-0.11 (A) 238.07 177.16 P
-0.11 (TH, you must specify \322) 247.92 177.16 P
0 F
-0.09 (./scriptname) 393.73 177.16 P
1 F
-0.11 (\323 instead) 462.55 177.16 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of just \322) 108.01 160.16 T
0 F
(scriptname) 157.53 160.16 T
1 F
(\323) 218.96 160.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(9) 286.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shell V) 213.76 752.21 T
(ariables) 292.62 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Both C shell and the Bourne shell ha) 90.01 694.62 T
(ve three kinds of) 363.35 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variables:) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 645.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(User variables) 108.01 645.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 616.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.66 (Environment variables \050a user ma) 108.01 616.96 P
-0.66 (y make a user variable into an) 326.92 616.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(environment variable\051) 108.01 599.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 570.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Read-only variables \050mostly with non-alphabetic names\051) 108.01 570.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 534.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(User variables) 90.01 534.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.51 (A user variable name can be any sequence of letters) 90.01 498.96 P
-0.51 (, digits) 420.63 498.96 P
-0.51 (, and the) 463.86 498.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(underscore c) 90.01 481.96 T
(haracter) 171.29 481.96 T
(, but the \336rst c) 225.11 481.96 T
(haracter must be a letter) 320.17 481.96 T
(.) 480.57 481.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 445.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(T) 90.01 445.62 T
(o assign a value to a variable:) 99.8 445.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ name=fred) 90.01 417.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Bourne shell) 441.16 417.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(% set name=fred) 90.01 396.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(C shell) 477.7 396.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 361.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(T) 90.01 361.91 T
(o use a variable) 99.8 361.91 T
(, precede the name with a \322$\323, in any) 215.4 361.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shell:) 90.01 342.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ echo $name) 90.01 316.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fred) 90.01 295.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo name) 90.01 274.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(name) 90.01 254.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(10) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shell V) 213.76 752.21 T
(ariables) 292.62 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
-0.02 (Single quotes surrounding the name or a bac) 90.01 694.62 P
-0.02 (kslash before) 421.08 694.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \322$\323 prevent the shell from dereferencing the variable) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(name:) 90.01 656.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ echo \325$name\325) 90.01 629.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($name) 90.01 609.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo \134$name) 90.01 588.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($name) 90.01 567.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 533.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Double quotes prevents interpretation of special) 90.01 533.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(c) 90.01 514.22 T
(haracters like \322*\323 and \322?\323, but does not inhibit variable) 97 514.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(expansion:) 90.01 495.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ echo "$name") 90.01 468.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fred) 90.01 447.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 413.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Y) 90.01 413.02 T
(ou can also use double quotes to assign a value that has) 99.67 413.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(spaces in it to a variable:) 90.01 394.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ name=fred ralph herman) 90.01 367.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ralph: not found) 90.01 346.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ name="fred ralph herman") 90.01 325.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $name) 90.01 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fred ralph herman) 90.01 284.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 250.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Double quotes also prevent the shell from expanding) 90.01 250.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(special c) 90.01 231.02 T
(haracters in the) 152.12 231.02 T
3 F
(value) 274.79 231.02 T
1 F
( of the variable:) 314.49 231.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ name="f*") 90.01 204.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $name) 90.01 183.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fred) 90.01 162.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo "$name") 90.01 142.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(f*) 90.01 121.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(11) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Shell V) 213.76 752.21 T
(ariables) 292.62 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(A variable exists as long as the shell in whic) 90.01 694.62 T
(h it w) 417.08 694.62 T
(as) 459.18 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(created exists) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 638.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(T) 90.01 638.62 T
(o remove the value of a variable) 99.8 638.62 T
(, either set it to nothing) 335.11 638.62 T
(,) 509.85 638.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or use) 90.01 619.62 T
3 F
(unset) 139.19 619.62 T
1 F
(:) 178.59 619.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ name=a) 90.01 592.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $name) 90.01 572.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a) 90.01 551.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ name=) 90.01 530.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $name) 90.01 510.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ name=a) 90.01 469.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ unset name) 90.01 448.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $name) 90.01 427.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 372.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(Y) 90.01 372.62 T
(ou can use the variable anywhere:) 99.67 372.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ suf) 90.01 345.73 T
(\336x=c) 117.27 345.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ls -l *.$suf) 90.01 325.13 T
(\336x) 159.66 325.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 290.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The) 90.01 290.42 T
3 F
(readonl) 122.91 290.42 T
(y) 179.02 290.42 T
1 F
( command makes it impossible to c) 187.02 290.42 T
(hange the) 443.85 290.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of a particular variable) 90.01 271.42 T
(.) 304.87 271.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(12) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Environment V) 168.66 752.21 T
(ariables) 337.72 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If a variable is dec) 90.01 694.62 T
(lared to be an \322exported variable\323 using) 225.63 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the export command, then c) 90.01 675.62 T
(hild processes of the shell will) 295.53 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(get a copy of the variable and its value) 90.01 656.62 T
(.) 374.52 656.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 619.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If a c) 90.01 619.62 T
(hild process c) 126.63 619.62 T
(hanges the value of an \322inherited\323) 225.77 619.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variable) 90.01 600.62 T
(, the parent process does not see the c) 150.19 600.62 T
(hange in) 428.6 600.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value) 90.01 581.62 T
(.) 130.03 581.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If not exported, variable values are not shared between) 90.01 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent and subshells in Bourne shell:) 90.01 525.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat e) 90.01 498.73 T
(xport_test) 126.34 498.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 478.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(color=red) 90.01 457.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color1: $color") 90.01 436.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child_test) 90.01 416.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color2: $color") 90.01 395.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ cat child_test) 90.01 354.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 333.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child_color1: $color") 90.01 313.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(color=orange) 90.01 292.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child_color2: $color") 90.01 272.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ e) 90.01 230.93 T
(xport_test) 106.52 230.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color1: red) 90.01 210.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child_color1:) 90.01 189.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child_color2: orange) 90.01 169.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color2: red) 90.01 148.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(13) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Environment V) 168.66 752.21 T
(ariables) 337.72 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If a variable is exported \050Bourne shell\051, then its value is) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shared from the parent to the c) 90.01 675.62 T
(hild, but not vice versa.) 320.12 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat e) 90.01 648.73 T
(xport_test) 126.34 648.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 628.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 90.01 607.53 T
(xport color) 96.02 607.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(color=red) 90.01 586.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color1: $color") 90.01 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(./child_test) 90.01 545.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color2: $color") 90.01 525.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ cat child_test) 90.01 483.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 463.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child_color1: $color") 90.01 442.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(color=orange) 90.01 422.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child_color2: $color") 90.01 401.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ e) 90.01 360.33 T
(xport_test) 106.52 360.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color1: red) 90.01 339.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child_color1: red) 90.01 319.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child_color2: orange) 90.01 298.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color2: red) 90.01 277.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(14) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Environment V) 168.66 752.21 T
(ariables) 337.72 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(V) 90.01 694.62 T
(ariables are exported in the C shell using) 100.2 694.62 T
3 F
(setenv) 409.58 694.62 T
1 F
( rather) 454.6 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(than) 90.01 675.62 T
3 F
(set) 129.13 675.62 T
1 F
(.) 148.97 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(% cat e) 90.01 648.73 T
(xport_test) 131 648.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/csh) 90.01 628.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(seten) 90.01 607.53 T
(v color red) 118.22 607.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color1: $color") 90.01 586.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(./child_test $color) 90.01 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "parent color2: $color") 90.01 545.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(% cat child_test) 90.01 504.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/csh) 90.01 483.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child color1: $color") 90.01 463.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set color=orange) 90.01 442.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "child color2: $color") 90.01 422.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(% e) 90.01 380.93 T
(xport_test) 111.18 380.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color1: red) 90.01 360.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child color1: red) 90.01 339.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(child color2: orange) 90.01 319.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parent color2: red) 90.01 298.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(15) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Read) 269.42 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(T) 90.01 694.62 T
(o get and store input from the user) 99.8 694.62 T
(, use the) 355.69 694.62 T
3 F
(read) 422.67 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(command) 90.01 675.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.22 (It reads one line of input from the terminal and assigns it to a user) 90.01 639.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(supplied or de\336ned variable\050s\051) 90.01 622.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
($ cat ui) 90.01 596.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 576.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo -n "User Input, Please: ") 90.01 555.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(read input_v) 90.01 534.93 T
(ar) 160.04 534.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "Y) 90.01 514.33 T
(ou entered: $input_v) 134.22 514.33 T
(ar") 249.75 514.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./ui) 90.01 473.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(User Input, Please: ls) 90.01 452.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 90.01 431.93 T
(ou entered: ls) 98.58 431.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 397.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The) 90.01 397.22 T
3 F
(ec) 122.91 397.22 T
(ho) 136.83 397.22 T
1 F
( command \050builtin in some shells\051 takes a \322-n\323) 154.6 397.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument, whic) 90.01 378.22 T
(h means \322no newline\323. This is useful for) 205.75 378.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(prompts in shell scripts) 90.01 359.22 T
(, as above) 263.83 359.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 322.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
-0.05 (Use quotes around the last output string so that when the) 90.01 322.22 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shell dereferences the user input, any special c) 90.01 303.22 T
(haracters) 435.08 303.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(are not interpreted as part of a command, e) 90.01 284.22 T
(.g) 410.94 284.22 T
(. *) 423.58 284.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(16) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Read) 269.42 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If more than one variable is given, read will assign one) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (word from the input line to eac) 90.01 675.62 P
-0.34 (h variable supplied. If more) 316.05 675.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(words are given as input than the number of variables) 90.01 656.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(supplied, then the leftover input words are all assigned to) 90.01 637.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the last variable) 90.01 618.62 T
(.) 210.65 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat mui) 90.01 591.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 571.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo -n "Multiple Input, Please: ") 90.01 550.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(read v) 90.01 529.93 T
(ar1 v) 124.25 529.93 T
(ar2 v) 152.28 529.93 T
(ar3) 180.31 529.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "Y) 90.01 509.33 T
(ou entered: $v) 134.22 509.33 T
(ar1") 213.97 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "Y) 90.01 488.73 T
(ou entered: $v) 134.22 488.73 T
(ar2") 213.97 488.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "Y) 90.01 468.13 T
(ou entered: $v) 134.22 468.13 T
(ar3") 213.97 468.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./mui) 90.01 426.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Multiple Input, Please: mary had a little lamb) 90.01 406.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 90.01 385.73 T
(ou entered: mary) 98.58 385.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 90.01 365.13 T
(ou entered: had) 98.58 365.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 90.01 344.53 T
(ou entered: a little lamb) 98.58 344.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(17) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Some Important Environment V) 74.65 752.21 T
(ariables) 431.72 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(HOME) 90.01 695.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The path to your home directory created when you) 180.01 695.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(log in. Exported to all subsequent shells) 180.01 678.96 T
(.) 438.18 678.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(P) 90.01 652.96 T
(A) 98.58 652.96 T
(TH) 108.43 652.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The place and order in whic) 180.01 652.96 T
(h the shell searc) 359.59 652.96 T
(hes for) 465.27 652.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(executables) 180.01 635.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MAIL) 90.01 609.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The \336le in whic) 180.01 609.96 T
(h your mail is stored) 279.48 609.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 180.01 592.96 T
0 F
(/usr/spool/mail/name) 184.67 592.96 T
1 F
(\051) 302.9 592.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PS1) 90.01 566.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The value of the prompt string in the shell.) 180.01 566.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PS2) 90.01 540.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A variable for a secondary prompt \050default \322>\323\051 to) 180.01 540.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(displa) 180.01 523.96 T
(y when the shell is w) 219.03 523.96 T
(aiting for more input.) 354.39 523.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(TERM) 90.01 497.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(What kind of \322terminal\323 the system thinks that) 180.01 497.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(you\325re using) 180.01 480.96 T
(. Full-screen programs need to know) 258.21 480.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this) 180.01 463.96 T
(.) 204.55 463.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(USER) 90.01 437.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 180.01 437.96 T
(our login name) 188.47 437.96 T
(.) 285.44 437.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SHELL) 90.01 411.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The name of the shell that you\325re running) 180.01 411.96 T
(.) 449.83 411.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PWD) 90.01 385.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(contains the absolute pathname of your current) 180.01 385.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(directory) 180.01 368.96 T
(.) 236.32 368.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(P) 90.01 342.96 T
(AGER) 98.58 342.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can be set to the name of your fa) 180.01 342.96 T
(vorite page-by-page) 389.9 342.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(screen displa) 180.01 325.96 T
(y program like) 264.39 325.96 T
3 F
(more) 362.92 325.96 T
1 F
( or) 394.8 325.96 T
3 F
(less) 415.8 325.96 T
1 F
(.) 438.76 325.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(EDIT) 90.01 299.96 T
(OR) 126.19 299.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can be loaded with the name of your fa) 180.01 299.96 T
(vorite editor) 430.09 299.96 T
(.) 508.28 299.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(HOST) 90.01 273.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(name of a computer) 180.01 273.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DISPLA) 90.01 247.96 T
(Y) 143.15 247.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used by the X window system to identify the displa) 180.01 247.96 T
(y) 508.93 247.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(server that will be used for input and output by X) 180.01 230.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applications) 180.01 213.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(MANP) 90.01 187.96 T
(A) 133.31 187.96 T
(TH) 143.17 187.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a colon-separated list of directories to searc) 180.01 187.96 T
(h for) 459.66 187.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manual pages) 180.01 170.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PRINTER) 90.01 144.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can be loaded with the name of your default printer) 180.01 144.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(18) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Some variables apply to both interactive shell usage and to shell) 90.01 695.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(scripts:) 90.01 678.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 649.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
-0.31 (\322$$\323 is the pid of the current process) 108.01 649.96 P
-0.31 (. It\325) 339.89 649.96 P
-0.31 (s very useful for using in) 361.02 649.96 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(temporary \336le names:) 108.01 632.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
($ echo Hi there > /tmp/t$$a) 90.01 606.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ps -aux | grep $$) 90.01 586.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(scott      257  0.0  1.4   32  204 p0 S    08:08   0:00 grep 251) 90.01 565.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(scott      251  0.0  0.8   24  108 p0 S    08:08   0:00 -sh \050sh\051) 90.01 544.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 517.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(\322$!\323 is the pid of the last c) 108.01 517.56 T
(hild:) 273.35 517.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
($ ps&) 108.01 492.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1634) 108.01 473.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($   PID TT STAT  TIME COMMAND) 108.01 454.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1633 p1 S     0:00 sh) 108.01 435.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1634 p1 S     0:01 ps) 108.01 416.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo $!) 108.01 397.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1634) 108.01 378.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Notice that the output of) 108.01 354.53 T
3 F
(ps) 271.88 354.53 T
1 F
( is mixed up with the prompt and) 286.13 354.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(subsequent input in the example) 108.01 337.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(19) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(\322$?\323 stores the exit status of the last command.) 90.01 694.62 T
0 F
(By) 441.18 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (con) 90.01 675.62 P
-0.19 (v) 112.47 675.62 P
-0.19 (ention, a nonzero v) 120.23 675.62 P
-0.19 (alue in the e) 241.91 675.62 P
-0.19 (xit code of a program means an) 318.87 675.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error occured, 0 means successful e) 90.01 656.62 T
(x) 317.24 656.62 T
(ecution \050the opposite of) 325 656.62 T
5 F
(true) 480.54 656.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(and) 90.01 637.62 T
5 F
(false) 117.11 637.62 T
0 F
( in C\051.) 147.34 637.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 600.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The exit status of a script can be set by using the \322exit) 90.01 600.62 T
3 F
(n) 494.83 600.62 T
1 F
(\323) 504.6 600.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(command where) 90.01 581.62 T
3 F
(n) 215.64 581.62 T
1 F
( is the exit code) 225.42 581.62 T
(.) 339.51 581.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 544.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
-0.65 (If exit is not used in a script, then the script will return the) 90.01 544.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exit status of the last command executed in the script) 90.01 525.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(before completion or failure) 90.01 506.62 T
(.) 293.27 506.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat es) 90.01 479.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 459.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 90.01 438.53 T
(xit 7) 96.02 438.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./es) 90.01 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $?) 90.01 376.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 90.01 356.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ echo $?) 90.01 335.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 90.01 314.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(20) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Others apply primarily to shell scripts:) 72.01 695.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 659.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(\322$0\323 is the name that the user typed to invoke the script:) 90.01 659.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat printprog) 90.01 632.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 612.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "This script is called $0") 90.01 591.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./printprog) 90.01 570.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This script is called ./printprog) 90.01 550.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ~/play/printprog) 90.01 529.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This script is called /staf) 90.01 509.13 T
(f/cs/scott/play/printprog) 226.54 509.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 474.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 16 Q
(P) 90.01 474.42 T
(ositional P) 101.27 474.42 T
(arameters:) 189.71 474.42 T
1 F
(The command line arguments) 283.5 474.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.57 (that you call a script with are stored in variables $1, $2, ...,) 90.01 455.42 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($9.) 90.01 436.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat listar) 90.01 409.53 T
(gs) 148.08 409.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 388.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The ar) 90.01 368.33 T
(gs are $1 $2 $3 $4 $5 $6 $7 $8 $9") 161.55 368.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./listar) 90.01 347.73 T
(gs the of and to a in that is w) 135.65 347.73 T
(as he for) 296.89 347.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The ar) 90.01 327.13 T
(gs are the of and to a in that is) 125.91 327.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 292.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(If there are more than nine arguments on the command) 90.01 292.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(line) 90.01 273.42 T
(, they are still stored, but they ha) 117.58 273.42 T
(ve to be moved into) 364.87 273.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(these variables before they can be accessed using the) 90.01 254.42 T
3 F
(shift) 485.61 254.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(command) 90.01 235.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(21) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 16 Q
(shift) 90.01 694.62 T
1 F
(command promotes eac) 132.52 694.62 T
(h command line argument to) 304.86 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (the variable with preceeding value in argument order \050e) 90.01 675.62 P
-0.21 (.g) 501.96 675.62 P
-0.21 (.) 514.6 675.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the value in $2 moves to $1, $3 becomes $2, etc) 90.01 656.62 T
(.\051) 436.79 656.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat shiftar) 90.01 629.73 T
(gs) 155.85 629.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 609.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The ar) 90.01 588.53 T
(gs are 1 = $1, 2 = $2, 3 = $3") 161.55 588.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shift) 90.01 567.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The ar) 90.01 547.33 T
(gs are 1 = $1, 2 = $2, 3 = $3") 161.55 547.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shift) 90.01 526.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The ar) 90.01 506.13 T
(gs are 1 = $1, 2 = $2, 3 = $3") 161.55 506.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shift) 90.01 485.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./shiftar) 90.01 464.93 T
(gs hi folks its ho) 143.42 464.93 T
(wdy dude) 235.64 464.93 T
(y) 290.25 464.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The ar) 90.01 444.33 T
(gs are 1 = hi, 2 = folks, 3 = its) 125.91 444.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The ar) 90.01 423.73 T
(gs are 1 = folks, 2 = its, 3 = ho) 125.91 423.73 T
(wdy) 297.01 423.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The ar) 90.01 403.13 T
(gs are 1 = its, 2 = ho) 125.91 403.13 T
(wdy) 240.12 403.13 T
(, 3 = dude) 263.32 403.13 T
(y) 319.22 403.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 368.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The previous $1 becomes inaccessible) 90.01 368.42 T
(.) 366.2 368.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(22) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(\322$*\323 lists all command line args) 90.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat listall) 90.01 667.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 647.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The ar) 90.01 626.53 T
(gs are $*") 161.55 626.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./listar) 90.01 605.93 T
(gs the of and to a in that is w) 135.65 605.93 T
(as he for) 296.89 605.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The ar) 90.01 585.33 T
(gs are the of and to a in that is w) 125.91 585.33 T
(as he for) 307.74 585.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 528.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(\322$@\323 has the same function as \322$*\323 except when \322$*\323 or) 90.01 528.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\322$@\323 are surrounded by double quotes) 90.01 509.62 T
(.) 368.99 509.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 479.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
("$*" surrounds all the args with one set of quotes;) 108.01 479.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 90.01 450.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
("$@" surrounds eac) 108.01 450.96 T
(h arg with quotes) 231.78 450.96 T
(.) 344.75 450.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 414.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
($# contains the number of args on the command line) 90.01 414.62 T
(.) 477.91 414.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat listnumar) 90.01 387.73 T
(g) 172.97 387.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 367.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "The number of ar) 90.01 346.53 T
(gs are $#") 222.98 346.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./listnumar) 90.01 325.93 T
(g the of and to a in that is w) 160.54 325.93 T
(as he for) 316.33 325.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The number of ar) 90.01 305.33 T
(gs is 11) 187.34 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(23) 284.01 37.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 58.9 567.65 814.9 R
0.25 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 24 Q
(Readonly V) 190.43 752.21 T
(ariables) 315.95 752.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 16 Q
(set) 90.01 694.62 T
1 F
(command sets the command line args to its args) 114.44 694.62 T
(.) 470.23 694.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat demoset) 90.01 667.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set yat yih saam) 90.01 647.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "One is $1, tw) 90.01 626.53 T
(o is $2, and three is $3") 200.18 626.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./demoset) 90.01 605.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(One is yat, tw) 90.01 585.33 T
(o is yih, and three is saam) 167.64 585.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(\245) 72.01 550.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(The set command is useful for taking output of command) 90.01 550.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(substitution for input into command args) 90.01 531.62 T
(. e) 394.52 531.62 T
(.g) 411.13 531.62 T
(.) 423.77 531.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
($ cat len) 90.01 504.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#!/bin/sh) 90.01 484.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(set -- \324ls -l $1\324) 90.01 463.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(echo "File $8 is $4 bytes long") 90.01 442.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($ ./len len) 90.01 422.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(File len is 60 bytes long) 90.01 401.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(The \322) 90.01 368.36 T
4 F
(--) 124.24 368.36 T
1 F
(\323 argument to) 141.04 368.36 T
3 F
(set) 234.13 368.36 T
1 F
( tells it that there are no more \337ag) 251.49 368.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(arguments \050like \322) 90.01 351.36 T
4 F
(-v) 202.02 351.36 T
1 F
(\323 or \322) 218.82 351.36 T
4 F
(-e) 250.72 351.36 T
1 F
(\323 or whatever\051, and that it should take) 267.52 351.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(whatever follows as arguments) 90.01 334.36 T
(, not \337ags) 290.87 334.36 T
(. Most UNIX commands) 353.53 334.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ha) 90.01 317.36 T
(ve a \322) 106.21 317.36 T
4 F
(--) 141.74 317.36 T
1 F
(\323 option.) 158.54 317.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 23
%%DocumentFonts: Times-Roman
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Times-Italic
%%+ NewCenturySchlbk-Bold
%%EOF
